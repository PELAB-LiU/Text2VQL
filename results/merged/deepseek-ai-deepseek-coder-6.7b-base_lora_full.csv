id,construct,train_benchmark,nl,header,truth,0_output,1_output,2_output,3_output,4_output,has_correct,#truth,syntax_ok,match_ok
0,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchSet.vql,Active route with GO entry semaphore and misaligned switch position. Misaligned means switch position where the target Switch's current position is different from the SwitchPosition's position.,pattern goRouteMisalignedSwitch(route: Route){,"pattern goRouteMisalignedSwitch(route: Route){
 find goRoute(route);
 Route.follows(route, swP);
 find misalignedSwitchPosition(swP);
}

pattern goRoute(route: Route){
	Route.active(route,true);
	Route.entry(route, semaphore);
	Semaphore.signal(semaphore, Signal::GO);	
}

pattern misalignedSwitchPosition(swP : SwitchPosition){
	SwitchPosition.target(swP, sw);
	SwitchPosition.position(swP, swpPosition);
	Switch.currentPosition(sw, swCurrentPosition);
	swpPosition != swCurrentPosition;
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, targetSwitch);
    Switch.currentPosition(targetSwitch, position);
    SwitchPosition.position(switchPosition, position);
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, currentPosition);
    SwitchPosition.position(switchPosition, position);
    check(currentPosition != position);
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    Route.follows(route, switchPosition);
    SwitchPosition.position(switchPosition, position);
    SwitchPosition.target(switchPosition, targetSwitch);
    Switch.currentPosition(targetSwitch, position);
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
}",False,96,"[true, false, false, true, false]","[false, false, false, false, false]"
1,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/ConnectedSegments.vql,Six segments monitored by with the same sensor. Each segment is connected to the next one.,"pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    find connectedSegmentWithSameMonitor(segment1, segment2, sensor);
    find connectedSegmentWithSameMonitor(segment2, segment3, sensor);
    find connectedSegmentWithSameMonitor(segment3, segment4, sensor);
    find connectedSegmentWithSameMonitor(segment4, segment5, sensor);
    find connectedSegmentWithSameMonitor(segment5, segment6, sensor);

}
pattern connectedSegmentWithSameMonitor(segment1: Segment, segment2: Segment, sensor: Sensor){
    Segment.connectsTo(segment1,segment2);
    Segment.monitoredBy(segment1,sensor);
    Segment.monitoredBy(segment2,sensor);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    Segment.connectsTo(segment1, segment2);
    Segment.connectsTo(segment2, segment3);
    Segment.connectsTo(segment3, segment4);
    Segment.connectsTo(segment4, segment5);
    Segment.connectsTo(segment5, segment6);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}",True,74883,"[true, true, true, true, true]","[true, true, true, true, true]"
2,or,,Semaphores with STOP or GO signals.,pattern stopOrGo(semaphore: Semaphore){,"pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::GO);
} or {
    Semaphore.signal(semaphore, Signal::STOP);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::STOP);
} or {
    Semaphore.signal(semaphore, Signal::GO);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::STOP);
} or {
    Semaphore.signal(semaphore, Signal::GO);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::STOP);
} or {
    Semaphore.signal(semaphore, Signal::GO);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::STOP);
} or {
    Semaphore.signal(semaphore, Signal::GO);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::STOP);
} or {
    Semaphore.signal(semaphore, Signal::GO);
}",True,914,"[true, true, true, true, true]","[true, true, true, true, true]"
3,or,,TrackElements that are either connected or monitored by the same sensor.,"pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1,track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1, track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1,sensor);
    TrackElement.monitoredBy(track2,sensor);
} or {
    TrackElement.connectsTo(track1,track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1,sensor);
    TrackElement.monitoredBy(track2,sensor);
} or {
    TrackElement.connectsTo(track1,track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.connectsTo(track1, track2);
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1, track2);
}",True,46011,"[true, true, true, true, true]","[true, true, true, false, true]"
4,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchMonitored.vql,Switches not monitored by a sensor.,pattern switchNotMonitored(sw : Switch){,"pattern switchNotMonitored(sw : Switch){
    neg find hasSensor(sw);
}
//auxiliary pattern
pattern hasSensor(sw : Switch){
    TrackElement.monitoredBy(sw, _);
}","pattern switchNotMonitored(sw : Switch){
    neg find monitoredSwitch(sw, _);
}

//Auxiliary pattern
pattern monitoredSwitch(sw : Switch, sensor : Sensor){
    Switch.monitoredBy(sw, sensor);
}","pattern switchNotMonitored(sw : Switch){
    neg find monitoredSwitch(sw, _);
}

//Auxiliary pattern
pattern monitoredSwitch(sw: Switch, sensor: Sensor){
    Switch.monitoredBy(sw, sensor);
}","pattern switchNotMonitored(sw : Switch){
    neg find monitoredSwitch(sw, _);
}

//Auxiliary pattern
pattern monitoredSwitch(switch: Switch, sensor: Sensor){
    Switch.monitoredBy(switch, sensor);
}","pattern switchNotMonitored(sw : Switch){
    neg find monitoredSwitch(sw, _);
}

//Auxiliary pattern
pattern monitoredSwitch(sw : Switch, sensor : Sensor){
    Switch.monitoredBy(sw, sensor);
}","pattern switchNotMonitored(sw : Switch){
    neg find monitoredBySensor(sw, _);
}

//Auxiliary pattern
pattern monitoredBySensor(sw : Switch, sensor : Sensor){
    Switch.monitoredBy(sw, sensor);
}",True,316,"[true, true, false, true, true]","[true, true, false, true, true]"
5,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/RouteSensor.vql,Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.,"pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    TrackElement.monitoredBy(sw, sensor);
    neg find required(sensor, route);
}
//auxiliary pattern
pattern required(sensor : Sensor, route : Route){
    Route.requires(route, sensor);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.currentPosition(sw, Position::STRAIGHT);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    SwitchPosition.route(swP, route);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    SwitchPosition.route(swP, route);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    Switch.currentPosition(sw, Position::DIVERGING);
    SwitchPosition.route(swP, route);
    Switch.positions(sw, swP);
    Sensor.monitors(sensor, sw);
    Route.requires(route, sensor);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position::DIVERGING);
}",False,2699,"[true, true, true, true, true]","[false, false, false, false, false]"
6,agg,,Total length of segments.,pattern totalLength(length: java Integer){,"pattern totalLength(length: java Integer){
    length == sum find segmentLength(_,#);
}
pattern segmentLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
    length == sum find segmentLength(_);
}

//Auxiliary pattern
pattern segmentLength(segment: Segment){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
    find segmentsLength(_, length);
}

pattern segmentsLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
    length == sum find segmentLength(_);
}

//Auxiliary pattern
pattern segmentLength(segment: Segment){
    Segment.length(segment, length);
    check(length > 0);
}","pattern totalLength(length: java Integer){
    length == sum find segmentLength(_, #);
}

//Auxiliary pattern
pattern segmentLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
    length == sum find segmentLength(_);
}

//Auxiliary pattern
pattern segmentLength(segment: Segment){
    Segment.length(segment, len);
    check(len > 0);
}",True,612,"[false, true, false, true, false]","[false, false, false, true, false]"
7,agg,,Track elements monitored by at lest two sensors.,pattern monitoredBy2Sensors(track: TrackElement){,"pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find trackMonitoredBy(track, _);
    check(cnt >= 2);
}
pattern trackMonitoredBy(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find sensorsMonitoringTrackElement(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find sensorsMonitoringTrackElement(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find sensorsMonitoringTrackElement(_, track);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(sensor: Sensor, track: TrackElement){
    Sensor.monitors(sensor, track);
}","pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find sensorsMonitoringTrackElement(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find sensorsMonitoringTrackElement(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}",True,4931,"[true, true, true, true, true]","[true, true, true, true, true]"
8,type,,RailwayElements that are either Switches or SwitchPositions.,pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){,"pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}",True,3118,"[true, true, true, true, true]","[true, true, true, true, true]"
9,type,,Railway elements that are Switches.,pattern switchRailwayElements(railway: RailwayElement){,"pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}",True,1902,"[true, true, true, true, true]","[true, true, true, true, true]"
10,normal,,Active routes with entry GO semaphore.,pattern goActiveRoute(route: Route){,"pattern goActiveRoute(route: Route){
    Route.active(route,true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);    
}","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
}","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, entrySemaphore);
    Semaphore.signal(entrySemaphore, Signal::GO);
}","pattern goActiveRoute(route: Route){
    find activeRoute(route);
    find routeEntrySemaphoreGo(route);
}

//Auxiliary pattern
pattern activeRoute(route: Route){
    Route.active(route, true);
}

//Auxiliary pattern
pattern routeEntrySemaphoreGo(route: Route){
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
}","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
}","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
}",True,138,"[true, true, true, true, true]","[true, true, true, true, true]"
11,normal,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/PosLength.vql,Retrieve all segments whose lengths are less or equal than zero.,pattern posLength(segment : Segment){,"pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length<=0);
}","pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}",True,2576,"[true, true, true, true, true]","[true, true, true, true, true]"
12,normal,,SwitchPositions where the target Switch's current position is different from the SwitchPosition's position.,pattern misalignedSwitchPosition(swP : SwitchPosition){,"pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, sw);
    SwitchPosition.position(swP, swpPosition);
    Switch.currentPosition(sw, swCurrentPosition);
    swpPosition != swCurrentPosition;
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, target);
    Switch.currentPosition(target, currentPos);
    SwitchPosition.position(swP, pos);
    currentPos != pos;
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, targetSwitch);
    SwitchPosition.position(swP, position);
    Switch.currentPosition(targetSwitch, currentPosition);
    check(currentPosition != position);
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.route(swP, _);
    SwitchPosition.target(swP, targetSwitch);
    Switch.currentPosition(targetSwitch, targetPosition);
    SwitchPosition.position(swP, position);
    check(targetPosition != position);
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.route(swP,_);
    SwitchPosition.target(swP,sw);
    SwitchPosition.position(swP,pos);
    Switch.currentPosition(sw,curPos);
    check(curPos != pos);
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.position(swP, position);
    SwitchPosition.target(swP, targetSwitch);
    Switch.currentPosition(targetSwitch, currentPosition);
    check(currentPosition != position);
}",True,773,"[true, true, true, true, true]","[true, true, true, true, true]"
13,mix,,"Regions where the sum of segments lengths is at least 50, or regions with at least 10 sensors.",pattern bigRegion(region: Region){,"pattern bigRegion(region: Region){
    length == sum find trackLengthInRegion(region, _,#);
    check(length >= 50);
} or {
    cnt == count find sensorInRegion(region, _);
    check(cnt >= 10);
}
pattern trackLengthInRegion(region: Region, track: Segment, length: EInt){
    Region.elements(region,track);
    Segment.length(track,length);
}
pattern sensorInRegion(region:Region, sensor: Sensor){
    Region.sensors(region,sensor);
}","pattern bigRegion(region: Region){
    sumSegmentsLengths(region, 50);
} or {
    countSensorsInRegion(region, sensors);
    check(sensors >= 10);
}

//Auxiliary pattern
pattern sumSegmentsLengths(region: Region, sum: EInt){
    Region.elements(region, segment);
    Segment.length(segment, length);
    sum == sum + length;
}

//Auxiliary pattern
pattern countSensorsInRegion(region: Region, cnt: EInt){
    Region.sensors(region, _);
    cnt == count find sensorsInRegion(region, _);
}

//Auxiliary pattern
pattern sensorsInRegion(region: Region, sensor: Sensor){
    Region.sensors(region, sensor);
}","pattern bigRegion(region: Region){
    Region.elements(region, segment1);
    Segment.length(segment1, len1);
    Region.elements(region, segment2);
    Segment.length(segment2, len2);
    check(len1 + len2 >= 50);
} or {
    Region.sensors(region, _);
    cnt == count find sensorsInRegion(region, _);
    check(cnt>=10);
}

//Auxiliary pattern
pattern sensorsInRegion(region: Region, sensor: Sensor){
    Region.sensors(region, sensor);
}","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment.length(segment, length);
    check(sumSegmentsLength(region, _) >= 50);
} or {
    Region.sensors(region, _);
    check(countSensors(region, _) >= 10);
}

//Auxiliary pattern
pattern sumSegmentsLength(region: Region, sum: EInt){
    Region.elements(region, segment);
    Segment.length(segment, length);
    sum += length;
}

//Auxiliary pattern
pattern countSensors(region: Region, cnt: EInt){
    Region.sensors(region, _);
    cnt += 1;
}","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment.length(segment, length);
    check(sumSegmentsLength(region, length) >= 50);
} or {
    Region.sensors(region, _);
    cntSensors(region, cnt);
    check(cnt >= 10);
}

//Auxiliary pattern
pattern sumSegmentsLength(region: Region, acc: EInt){
    Region.elements(region, segment);
    Segment.length(segment, length);
    acc += length;
}

//Auxiliary pattern
pattern cntSensors(region: Region, cnt: EInt){
    Region.sensors(region, _);
    cnt += 1;
}","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment.length(segment, length);
    check(sumSegmentsLength(region, _) >= 50);
} or {
    Region.sensors(region, _);
    cntSensors(region, cnt);
    check(cnt >= 10);
}

//Auxiliary pattern
pattern sumSegmentsLength(region: Region, acc: EInt){
    Region.elements(region, segment);
    Segment.length(segment, length);
    acc += length;
}

//Auxiliary pattern
pattern cntSensors(region: Region, cnt: EInt){
    Region.sensors(region, _);
    cnt += 1;
}",False,576,"[false, true, false, false, false]","[false, false, false, false, false]"
14,mix,,Segments that are at least 7 units long or are switches.,pattern sevenSegmentOrSwitch(track: TrackElement){,"pattern sevenSegmentOrSwitch(track: TrackElement){
    Switch(track);
} or {
    Segment.length(track, length);
    check(length >= 7);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    find segmentLongEnough(track);
} or {
    find switch(track);
}

//Auxiliary pattern
pattern segmentLongEnough(segment: Segment){
    Segment.length(segment, length);
    check(length >= 7);
}

//Auxiliary pattern
pattern switch(element: TrackElement){
    Switch(element);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    find longSegment(track);
} or {
    Switch(track);
}

//Auxiliary pattern
pattern longSegment(track: TrackElement){
    Segment.length(track, length);
    check(length >= 7);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment.length(track,length);
    check(length>=7);
} or {
    Switch(track);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    find segmentLongEnough(track, 7);
} or {
    Switch(track);
}

//Auxiliary pattern
pattern segmentLongEnough(track: TrackElement, length: EInt){
    Segment.length(track, length);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment.length(track, length);
    check(length>=7);
} or {
    Switch(track);
}",True,3160,"[false, true, true, true, true]","[false, true, true, false, true]"
15,mix,,Active route whose entry is a GO semaphore but not monitored by any sensor.,pattern dangerousRoute(route: Route){,"pattern dangerousRoute(route: Route){
        find activeRouteWithGO(route);
        neg find routeMonitroedBy(route,_);
}
pattern routeMonitroedBy(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}
pattern activeRouteWithGO(route: Route){
    Route.active(route, true);
    Route.entry(route, entry);
    Semaphore.signal(entry, ::GO);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, entrySemaphore);
    Semaphore.signal(entrySemaphore, Signal::GO);
    neg find monitoredBySensor(route, _);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    neg find monitoredBySensor(route, _);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, entrySemaphore);
    Semaphore.signal(entrySemaphore, Signal::GO);
    neg find monitoredBySensor(route, _);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, entrySemaphore);
    Semaphore.signal(entrySemaphore, Signal::GO);
    neg find monitoredBySensor(route);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route){
    Route.requires(route, sensor);
    Sensor.monitors(sensor, _);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);
    neg find monitoredBySensor(route, _);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}",True,49,"[true, true, true, true, true]","[true, true, true, true, true]"
16,neg,https://github.com/ftsrg/trainbenchmark/blob/master/trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SemaphoreNeighbor.vql,"Two different routes where the exit semaphore of a route is not the entry semaphore of the other. Each route requires a sensor, and the sensors monitor connected tracks.","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
       Route.exit(route1, semaphore);
	Route.requires(route1, sensor1);
	TrackElement.monitoredBy(te1, sensor1);
	TrackElement.connectsTo(te1, te2);
	TrackElement.monitoredBy(te2, sensor2);
	Route.requires(route2, sensor2);
	
	neg find entrySemaphore(route2, semaphore);

	route1 != route2;
}

pattern entrySemaphore(route: Route, semaphore: Semaphore)
{
	Route.entry(route, semaphore);
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.signal(semaphore, Signal::GO);
    Route.entry(route1, semaphore);
    Route.exit(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.connectsTo(te1, te2);
    route1 != route2;
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, _);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.connectsTo(te1, te2);
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, _);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.connectsTo(te1, te2);
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Route.exit(route1, semaphore);
    Route.requires(route1, sensor1);
    Sensor.monitors(sensor1, te1);
    Route.entry(route2, semaphore);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor2, te2);
    te1 != te2;
    route1 != route2;
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, id);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.connectsTo(te1, te2);
}",False,6,"[true, true, true, true, true]","[false, false, false, false, false]"
