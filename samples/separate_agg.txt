Given this metamodel 

abstract class Pseudostate extends Vertex {
}
abstract class Vertex {
	reference Transition[0..*] incomingTransitions;
	reference Transition[0..*] outgoingTransitions;
}
class Region {
	reference Vertex[0..*] vertices;
	attribute EString[0..1] name;
}
class Transition {
	reference Vertex[1..1] target;
	reference Vertex[0..1] source;
}
class Statechart extends CompositeElement {
}
class Entry extends Pseudostate {
}
class Synchronization extends Pseudostate {
}
class State extends RegularState, CompositeElement {
}
abstract class RegularState extends Vertex {
}
abstract class CompositeElement {
	reference Region[0..*] regions;
}
class Choice extends Pseudostate {
}
class Exit extends Pseudostate {
}
class FinalState extends RegularState {
}


and the following Viatra Query examples

Example 1:
Description: "Region with at least 4 vertices."
Query:
pattern regionWith4OrMoreVertices(region: Region) {
	cnt == count find verticesInRegion(region, _);
	check(cnt>=4);
}

//auxiliary pattern
pattern verticesInRegion(region: Region, vertex: Vertex){
	Region.vertices(region, vertex);
}

Example 2:
Description: "Verte with at most 3 outgoing transition."
Query:
pattern max3outgoing(vertex: Vertex) {
	cnt == count find outgoingHelper(region, _);
	check(cnt<=3);
}

//auxiliary pattern
pattern outgoingHelper(vertex: Vertex, transition: Transition){
	Vertex.outgoingTransitions(vertex, transition);
}

Example 3:
Description: "Number of States."
Query:
pattern countStates(cnt: java Integer) {
	cnt == count find stateHelper(_);
}

//auxiliary pattern
pattern stateHelper(state: State){
	State(state);
}

Example 4:
Description: "Vertex with the least incoming transitions."
Query:
pattern vertexLeastIncoming(vertex: Vertex, minlength: java Integer) {
	minlength == min find countIncomingTransitions(_, #);
	find countIncomingTransitions(vertex, current);
	current == minlength;
}	

//auxiliary pattern
pattern countIncomingTransitions(vertex : Vertex, cnt: java Integer) {
	cnt == count find incomingHelper(vertex, _);
}
//auxiliary pattern
pattern incomingHelper(vertex: Vertex, transition: Transition){
	Vertex.incomingTransitions(vertex, transition);
}

Example 5:
Description: "Tere are at least 5 Entries in the model."
Query:
pattern exist5entries() {
	cnt == count find entryHelper(_);
	check(cnt>=5);
}

//auxiliary pattern
pattern entryHelper(entry: Entry){
	Entry(entry);
}

Based on the following metamodel, generate 4 Viatra Queries containing aggregation and their descriptions.
Tips:
* Use helper patterns for count find.
* Use # for min, max, avg, or sum.

class Database extends ModelElement {
	attribute EString[0..1] name;
	attribute EString[0..1] url;
	reference Schema[0..*] ownedSchemas;
}
class Schema extends ModelElement {
	attribute EString[0..1] name;
	reference Table[0..*] ownedTables;
	reference Database[1..1] owner;
}
class Table extends ModelElement {
	attribute EString[0..1] name;
	reference Column[0..*] ownedColumns;
	reference ForeignKey[0..*] ownedForeignKeys;
	reference Schema[1..1] owner;
}
class ForeignKey extends ModelElement {
	attribute EString[0..1] name;
	reference Table[1..1] foreignTable;
	reference Table[1..1] sourceTable;
}
class Column extends ModelElement {
	attribute EString[0..1] name;
	attribute Type[0..1] type;
	attribute EBoolean[0..1] isPrimaryKey;
	attribute EBoolean[0..1] isUnique;
	reference Table[1..1] owner;
}
enum Type {
	NUMERIC;
	VARCHAR;
	DATE;
	TIME;
	FLOAT;
	CHAR;
}
abstract class ModelElement {
	attribute EString[0..1] comment;
}

