id,construct,train_benchmark,nl,header,truth,0_output,1_output,2_output,3_output,4_output,has_correct,#truth,syntax_ok,match_ok
0,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchSet.vql,Active route with GO entry semaphore and misaligned switch position. Misaligned means switch position where the target Switch's current position is different from the SwitchPosition's position.,pattern goRouteMisalignedSwitch(route: Route){,"pattern goRouteMisalignedSwitch(route: Route){
 find goRoute(route);
 Route.follows(route, swP);
 find misalignedSwitchPosition(swP);
}

pattern goRoute(route: Route){
	Route.active(route,true);
	Route.entry(route, semaphore);
	Semaphore.signal(semaphore, Signal::GO);	
}

pattern misalignedSwitchPosition(swP : SwitchPosition){
	SwitchPosition.target(swP, sw);
	SwitchPosition.position(swP, swpPosition);
	Switch.currentPosition(sw, swCurrentPosition);
	swpPosition != swCurrentPosition;
}","pattern goRouteMisalignedSwitch(route: Route){
   Route.active(route, true);
    Route.entry(route, _);
    Route.exit(route, _);
    Route.follows(route, _);
    Route.requires(route, _);
    Route.connectsTo(route, _);
    Route.monitoredBy(route, _);
    Route.semaphores(route, _);
    Switch.currentPosition(route.follows.target, route.follows.position);
    Switch.currentPosition(route.follows.target, route.follows.position);
    Switch.target(route.follows, _);
    Switch.positions(route.follows, _);
    Switch.positions(route.follows, _);
    SwitchPosition.position(route.follows, _);
    SwitchPosition.position(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.target(route.follows, _);
    SwitchPosition.target(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.position(route.follows, _);
    SwitchPosition.position(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.target(route.follows, _);
    SwitchPosition.target(route.follows, _);
    SwitchPosition.route(route.follows, _);
    SwitchPosition.route(route.follows, _);
    Semaphore.signal(route.entry, GO);
}

//auxiliary pattern
pattern isActiveRoute(route: Route){
    Route.active(route, true);
}
","pattern goRouteMisalignedSwitch(route: Route){
   Route.active(route,true);
    Route.entry(route,Semaphore(_));
    SwitchPosition.position(SwitchPosition(_),Switch.currentPosition(Switch(_),_));
    Switch.currentPosition(Switch(_),_);
    SwitchPosition.position(SwitchPosition(_),_);
}
","pattern goRouteMisalignedSwitch(route: Route){
   Route.active(route,true);
    Route.entry(route,Semaphore(s));
    Route.exit(route,Semaphore(e));
    Route.follows(route,SwitchPosition(p));
    Switch.currentPosition(Switch(s.connectsTo.0),Position.DIVERGING);
    Switch.currentPosition(Switch(p.target),Position.STRAIGHT);
    SwitchPosition.position(p,Position.STRAIGHT);
    SwitchPosition.route(p,route);
    SwitchPosition.target(p,Switch(s.connectsTo.0));
    SwitchPosition.position(p,Position.DIVERGING);
    SwitchPosition.route(p,route);
    SwitchPosition.target(p,Switch(s.connectsTo.0));
    Switch.connectsTo(Switch(s.connectsTo.0),Segment(s));
    Segment.semaphores(Segment(s),Semaphore(s));
    Semaphore.signal(Semaphore(s),Signal.GO);
    Semaphore.signal(Semaphore(e),Signal.FAILURE);
    Semaphore.signal(Semaphore(s),Signal.FAILURE);
}
","pattern goRouteMisalignedSwitch(route: Route){
   Route.active(route, true);
    Route.entry(route, _);
    Route.exit(route, _);
    Route.follows(route, _);
    Route.requires(route, _);
    Route.semaphores(route, _);
    Route.monitors(route, _);
    Route.connectsTo(route, _);
    Semaphore.signal(route.entry, GO);
    Switch.currentPosition(route.follows.target, _);
    SwitchPosition.position(route.follows, _);
    Switch.currentPosition(route.follows.target, route.follows.position);
    SwitchPosition.position(route.follows, route.follows.target.currentPosition);
}
","pattern goRouteMisalignedSwitch(route: Route){
   Route.active(route,true);
    Route.entry(route,_);
    Route.exit(route,_);
    Route.semaphores(route,_);
    SwitchPosition.position(_,DIVERGING);
    SwitchPosition.route(_,route);
    SwitchPosition.target(_,_);
    Switch.currentPosition(_,STRAIGHT);
    Switch.positions(_,_);
    Switch.target(_,_);
    SwitchPosition.position(_,STRAIGHT);
    SwitchPosition.route(_,_);
    SwitchPosition.target(_,_);
}
",False,96,"[false, false, false, false, false]","[false, false, false, false, false]"
1,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/ConnectedSegments.vql,Six segments monitored by with the same sensor. Each segment is connected to the next one.,"pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    find connectedSegmentWithSameMonitor(segment1, segment2, sensor);
    find connectedSegmentWithSameMonitor(segment2, segment3, sensor);
    find connectedSegmentWithSameMonitor(segment3, segment4, sensor);
    find connectedSegmentWithSameMonitor(segment4, segment5, sensor);
    find connectedSegmentWithSameMonitor(segment5, segment6, sensor);

}
pattern connectedSegmentWithSameMonitor(segment1: Segment, segment2: Segment, sensor: Sensor){
    Segment.connectsTo(segment1,segment2);
    Segment.monitoredBy(segment1,sensor);
    Segment.monitoredBy(segment2,sensor);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
   Sensor.monitors(sensor, segment1);
    Sensor.monitors(sensor, segment2);
    Sensor.monitors(sensor, segment3);
    Sensor.monitors(sensor, segment4);
    Sensor.monitors(sensor, segment5);
    Sensor.monitors(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
	Sensor.monitors(sensor, segment1);
	Segment.monitoredBy(segment1, sensor);
	Segment.connectsTo(segment1, segment2);
	Segment.monitoredBy(segment2, sensor);
	Segment.connectsTo(segment2, segment3);
	Segment.monitoredBy(segment3, sensor);
	Segment.connectsTo(segment3, segment4);
	Segment.monitoredBy(segment4, sensor);
	Segment.connectsTo(segment4, segment5);
	Segment.monitoredBy(segment5, sensor);
	Segment.connectsTo(segment5, segment6);
	Segment.monitoredBy(segment6, sensor);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
   Sensor.monitors(sensor, segment1);
    TrackElement.connectsTo(segment1, segment2);
    Sensor.monitors(sensor, segment2);
    TrackElement.connectsTo(segment2, segment3);
    Sensor.monitors(sensor, segment3);
    TrackElement.connectsTo(segment3, segment4);
    Sensor.monitors(sensor, segment4);
    TrackElement.connectsTo(segment4, segment5);
    Sensor.monitors(sensor, segment5);
    TrackElement.connectsTo(segment5, segment6);
    Sensor.monitors(sensor, segment6);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
	Sensor.monitors(sensor, segment1);
	Segment.monitoredBy(segment1, sensor);
	Segment.connectsTo(segment1, segment2);
	Segment.connectsTo(segment2, segment3);
	Segment.connectsTo(segment3, segment4);
	Segment.connectsTo(segment4, segment5);
	Segment.connectsTo(segment5, segment6);
	Sensor.monitors(sensor, segment2);
	Segment.monitoredBy(segment2, sensor);
	Segment.connectsTo(segment2, segment3);
	Segment.connectsTo(segment3, segment4);
	Segment.connectsTo(segment4, segment5);
	Segment.connectsTo(segment5, segment6);
	Sensor.monitors(sensor, segment3);
	Segment.monitoredBy(segment3, sensor);
	Segment.connectsTo(segment3, segment4);
	Segment.connectsTo(segment4, segment5);
	Segment.connectsTo(segment5, segment6);
	Sensor.monitors(sensor, segment4);
	Segment.monitoredBy(segment4, sensor);
	Segment.connectsTo(segment4, segment5);
	Segment.connectsTo(segment5, segment6);
	Sensor.monitors(sensor, segment5);
	Segment.monitoredBy(segment5, sensor);
	Segment.connectsTo(segment5, segment6);
	Sensor.monitors(sensor, segment6);
	Segment.monitoredBy(segment6, sensor);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
   Sensor.monitors(sensor, segment1);
    Segment.monitoredBy(segment1, sensor);
    Segment.connectsTo(segment1, segment2);
    Segment.monitoredBy(segment2, sensor);
    Segment.connectsTo(segment2, segment3);
    Segment.monitoredBy(segment3, sensor);
    Segment.connectsTo(segment3, segment4);
    Segment.monitoredBy(segment4, sensor);
    Segment.connectsTo(segment4, segment5);
    Segment.monitoredBy(segment5, sensor);
    Segment.connectsTo(segment5, segment6);
    Segment.monitoredBy(segment6, sensor);
}
",True,74883,"[true, true, true, true, true]","[true, true, true, true, true]"
2,or,,Semaphores with STOP or GO signals.,pattern stopOrGo(semaphore: Semaphore){,"pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::GO);
} or {
    Semaphore.signal(semaphore, Signal::STOP);
}","pattern stopOrGo(semaphore: Semaphore){
   Semaphore(semaphore);
    Signal.STOP(semaphore.signal);
} or {
    Semaphore(semaphore);
    Signal.GO(semaphore.signal);
}
","pattern stopOrGo(semaphore: Semaphore){
   Semaphore.signal(semaphore, Signal.STOP);
    or {
        Semaphore.signal(semaphore, Signal.GO);
    }
}
","pattern stopOrGo(semaphore: Semaphore){
   Semaphore.signal(semaphore, Signal.STOP);
} or {
    Semaphore.signal(semaphore, Signal.GO);
}
","pattern stopOrGo(semaphore: Semaphore){
   Semaphore.signal(semaphore, STOP);
} or {
    Semaphore.signal(semaphore, GO);
}
","pattern stopOrGo(semaphore: Semaphore){
   Semaphore.signal(semaphore, STOP);
} or {
    Semaphore.signal(semaphore, GO);
}
",False,914,"[false, false, false, true, true]","[false, false, false, false, false]"
3,or,,TrackElements that are either connected or monitored by the same sensor.,"pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1,track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
   TrackElement.monitoredBy(track1, track2);
} or {
    TrackElement.connectsTo(track1, track2);
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
   (TrackElement.monitors(track1,_), TrackElement.monitors(track2,_));
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
   TrackElement.monitors(track1,track2);
} or {
    TrackElement.connectsTo(track1,track2);
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
   TrackElement.monitoredBy(track1, track2);
} or {
    TrackElement.connectsTo(track1, track2);
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
   (TrackElement.monitors(track1,track2) and TrackElement.connectsTo(track1,track2)) or
    (TrackElement.monitors(track2,track1) and TrackElement.connectsTo(track2,track1));
}
",False,46011,"[false, false, false, false, false]","[false, false, false, false, false]"
4,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchMonitored.vql,Switches not monitored by a sensor.,pattern switchNotMonitored(sw : Switch){,"pattern switchNotMonitored(sw : Switch){
    neg find hasSensor(sw);
}
//auxiliary pattern
pattern hasSensor(sw : Switch){
    TrackElement.monitoredBy(sw, _);
}","pattern switchNotMonitored(sw : Switch){
   Switch.monitoredBy(sw, _);
    neg find switchMonitored(sw);
}
","pattern switchNotMonitored(sw : Switch){
   Switch.monitoredBy(sw,_);
}
","pattern switchNotMonitored(sw : Switch){
   Switch(sw);
    neg find switchMonitored(sw);
}
//Auxiliary pattern
pattern switchMonitored(sw : Switch){
    Switch.monitoredBy(sw,_);
}
","pattern switchNotMonitored(sw : Switch){
   Switch.monitoredBy(sw,_);
    neg find sensorMonitors(sw);
}
//auxiliary pattern
pattern sensorMonitors(sw : Switch){
    Switch.monitoredBy(sw,s);
    Sensor.monitors(s,sw);
}
","pattern switchNotMonitored(sw : Switch){
   Switch.monitoredBy(sw,_);
    neg find sensorMonitorsSwitch(sw);
}
//auxiliary pattern
pattern sensorMonitorsSwitch(sw : Switch){
    Switch.monitoredBy(sw,_);
}
",True,316,"[false, true, true, true, true]","[false, false, true, false, false]"
5,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/RouteSensor.vql,Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.,"pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    TrackElement.monitoredBy(sw, sensor);
    neg find required(sensor, route);
}
//auxiliary pattern
pattern required(sensor : Sensor, route : Route){
    Route.requires(route, sensor);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
   Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions(sw, swP);
    Switch.positions(sw, _);
    Switch.positions","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
   Route.active(route,true);
    Route.follows(route,swP);
    Route.requires(route,sensor);
    Switch.positions(sw,swP);
    SwitchPosition.target(swP,sw);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
   Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    Switch.monitoredBy(sw, sensor);
    neg Route.requires(route, sensor);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
   SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, swP.position);
    Sensor.monitors(sensor, sw);
    Route.requires(route, sensor);
    neg find sensorMonitorsSwitch(sensor, sw);
}

//Auxiliary pattern
pattern sensorMonitorsSwitch(sensor : Sensor, sw : Switch){
    Sensor.monitors(sensor, sw);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
   Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Sensor.monitors(sensor, sw);
    neg find Sensor.requires(sensor, route);
}

//auxiliary pattern
pattern Sensor.requires(sensor : Sensor, route : Route){
    Sensor.monitors(sensor, _);
    Route.requires(route, sensor);
}
",True,2699,"[false, true, true, false, false]","[false, false, true, false, false]"
6,agg,,Total length of segments.,pattern totalLength(length: java Integer){,"pattern totalLength(length: java Integer){
    length == sum find segmentLength(_,#);
}
pattern segmentLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
   cnt == count find totalLengthOfSegments(_,_);
    check(length == cnt);
}

//Auxiliary pattern
pattern totalLengthOfSegments(seg : Segment, length: java Integer){
    Segment.length(seg, length);
}
","pattern totalLength(length: java Integer){
   cnt == count find totalLengthOfSegments(_);
    check(length==cnt);
}

//Auxiliary pattern
pattern totalLengthOfSegments(segment: Segment){
    Segment.length(segment,_);
}
","pattern totalLength(length: java Integer){
   cnt == count find segments(_, _);
    check(length == cnt);
}

//Auxiliary pattern
pattern segments(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}
","pattern totalLength(length: java Integer){
   cnt == count find totalLength(_, length);
}

//Auxiliary pattern
pattern totalLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}
","pattern totalLength(length: java Integer){
   cnt == count find segmentLength(_);
    check(cnt == length);
}

//Auxiliary pattern
pattern segmentLength(segment: Segment){
    Segment.length(segment, _);
}
",False,612,"[false, false, false, false, false]","[false, false, false, false, false]"
7,agg,,Track elements monitored by at lest two sensors.,pattern monitoredBy2Sensors(track: TrackElement){,"pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find trackMonitoredBy(track, _);
    check(cnt >= 2);
}
pattern trackMonitoredBy(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
   cnt == count find monitoredBySensor(track,_);
    check(cnt>=2);
}

//Auxiliary pattern
pattern monitoredBySensor(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track,sensor);
}
","pattern monitoredBy2Sensors(track: TrackElement){
   cnt == count find sensorsMonitoring(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoring(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}
","pattern monitoredBy2Sensors(track: TrackElement){
   cnt == count find sensorsMonitoringTrackElement(track,_);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringTrackElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}
","pattern monitoredBy2Sensors(track: TrackElement){
   cnt == count find sensorsMonitoringElement(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern sensorsMonitoringElement(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}
","pattern monitoredBy2Sensors(track: TrackElement){
   cnt == count find monitoredBySensor(track, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern monitoredBySensor(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}
",True,4931,"[true, true, true, true, true]","[true, true, true, true, true]"
8,type,,RailwayElements that are either Switches or SwitchPositions.,pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){,"pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
   Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
   Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
   Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
   Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
   Switch(raliway);
} or {
    SwitchPosition(raliway);
}
",True,3118,"[true, true, true, true, true]","[true, true, true, true, true]"
9,type,,Railway elements that are Switches.,pattern switchRailwayElements(railway: RailwayElement){,"pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
   Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
   Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
   Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
   Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
   Switch(railway);
}
",True,1902,"[true, true, true, true, true]","[true, true, true, true, true]"
10,normal,,Active routes with entry GO semaphore.,pattern goActiveRoute(route: Route){,"pattern goActiveRoute(route: Route){
    Route.active(route,true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);    
}","pattern goActiveRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(signal=GO));
}
","pattern goActiveRoute(route: Route){
   Route.active(route,true);
    Route.entry(route,Semaphore(signal==GO));
}
","pattern goActiveRoute(route: Route){
   Route.active(route,true);
    Route.entry(route,Semaphore(signal=GO));
}
","pattern goActiveRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(signal==GO));
}
","pattern goActiveRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(signal=Signal.GO));
}
",False,138,"[false, false, false, false, false]","[false, false, false, false, false]"
11,normal,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/PosLength.vql,Retrieve all segments whose lengths are less or equal than zero.,pattern posLength(segment : Segment){,"pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
   Segment.length(segment, l);
    check(l<=0);
}
","pattern posLength(segment : Segment){
   Segment.length(segment,l);
    check(l<=0);
}
","pattern posLength(segment : Segment){
   Segment.length(segment, l);
    check(l<=0);
}
","pattern posLength(segment : Segment){
   Segment.length(segment,length);
    check(length <= 0);
}
","pattern posLength(segment : Segment){
   Segment.length(segment, l);
    check(l <= 0);
}
",True,2576,"[true, true, true, true, true]","[true, true, true, true, true]"
12,normal,,SwitchPositions where the target Switch's current position is different from the SwitchPosition's position.,pattern misalignedSwitchPosition(swP : SwitchPosition){,"pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, sw);
    SwitchPosition.position(swP, swpPosition);
    Switch.currentPosition(sw, swCurrentPosition);
    swpPosition != swCurrentPosition;
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
   SwitchPosition.position(swP,_);
    SwitchPosition.target(swP,_);
    Switch.currentPosition(SwitchPosition.target(swP),_);
    check(SwitchPosition.position(swP)!=Switch.currentPosition(SwitchPosition.target(swP)));
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
   SwitchPosition.position(swP,_);
    SwitchPosition.target(swP,sw);
    Switch.currentPosition(sw,_);
    check(swP.position != sw.currentPosition);
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
   SwitchPosition.position(swP, pos);
    SwitchPosition.target(swP, sw);
    Switch.currentPosition(sw, pos);
    neg Switch.currentPosition(sw, SwitchPosition.position(swP, _));
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
   SwitchPosition.position(swP,_);
    SwitchPosition.target(swP,sw);
    Switch.currentPosition(sw,_);
    check(swP.position!=sw.currentPosition);
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
   SwitchPosition(swP);
    Switch.currentPosition(SwitchPosition.target(swP), _);
    SwitchPosition.position(swP, _);
    check(Switch.currentPosition(SwitchPosition.target(swP), _) != SwitchPosition.position(swP, _));
}
",False,773,"[false, false, false, false, false]","[false, false, false, false, false]"
13,mix,,"Regions where the sum of segments lengths is at least 50, or regions with at least 10 sensors.",pattern bigRegion(region: Region){,"pattern bigRegion(region: Region){
    length == sum find trackLengthInRegion(region, _,#);
    check(length >= 50);
} or {
    cnt == count find sensorInRegion(region, _);
    check(cnt >= 10);
}
pattern trackLengthInRegion(region: Region, track: Segment, length: EInt){
    Region.elements(region,track);
    Segment.length(track,length);
}
pattern sensorInRegion(region:Region, sensor: Sensor){
    Region.sensors(region,sensor);
}","pattern bigRegion(region: Region){
   sum == sum find lengthOfSegments(region, _);
    check(sum>=50);
} or {
    cnt == count find sensorsInRegion(region, _);
    check(cnt>=10);
}

//Auxiliary pattern
pattern lengthOfSegments(region: Region, segment: Segment){
    Region.elements(region, segment);
    Segment.length(segment,_);
}
","pattern bigRegion(region: Region){
   cnt == count find segmentSum(region, _);
    check(cnt>=50 or count find sensorsInRegion(region, _) >= 10);
}

//Auxiliary pattern
pattern segmentSum(region: Region, segment: Segment){
    Region.elements(region, segment);
}
","pattern bigRegion(region: Region){
   cnt == count find segmentsInRegion(region, _);
    check(cnt>=50);
} or {
    cnt == count find sensorsInRegion(region, _);
    check(cnt>=10);
}

//Auxiliary pattern
pattern segmentsInRegion(region: Region, segment: Segment){
    Region.elements(region, segment);
}
","pattern bigRegion(region: Region){
   cnt == count find segmentsInRegion(region, _);
    check(cnt>=50 or cnt>=10);
} or {
    cnt == count find sensorsInRegion(region, _);
    check(cnt>=10);
}

//Auxiliary pattern
pattern segmentsInRegion(region: Region, segment: Segment){
    Region.elements(region, segment);
}
","pattern bigRegion(region: Region){
   cnt == count find segmentsInRegion(region, _);
    check(cnt>=50 or cnt>=10);
}

//Auxiliary pattern
pattern segmentsInRegion(region: Region, segment: Segment){
    Region.elements(region, segment);
}
",False,576,"[false, false, false, false, false]","[false, false, false, false, false]"
14,mix,,Segments that are at least 7 units long or are switches.,pattern sevenSegmentOrSwitch(track: TrackElement){,"pattern sevenSegmentOrSwitch(track: TrackElement){
    Switch(track);
} or {
    Segment.length(track, length);
    check(length >= 7);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
   Segment(track);
    cnt == count find segmentOrSwitch(track, _);
    check(cnt>=7);
}
//Auxiliary pattern
pattern segmentOrSwitch(track: TrackElement, element: TrackElement){
    TrackElement.connectsTo(track, element);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
   Segment(track);
    check(track.length>=7 or track.isSwitch());
}

//Auxiliary pattern
pattern isSwitch(track: TrackElement){
    Switch(track);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
   Segment(track);
    check(track.length>=7 or track.isSwitch);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
   (Segment(track).length>7) or Switch(track);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
   or {
        Segment(track);
        Switch(track);
    }
    and {
        Segment.length(track,_);
        check(track.length>=7);
    }
}
",False,3160,"[true, false, false, false, false]","[false, false, false, false, false]"
15,mix,,Active route whose entry is a GO semaphore but not monitored by any sensor.,pattern dangerousRoute(route: Route){,"pattern dangerousRoute(route: Route){
        find activeRouteWithGO(route);
        neg find routeMonitroedBy(route,_);
}
pattern routeMonitroedBy(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}
pattern activeRouteWithGO(route: Route){
    Route.active(route, true);
    Route.entry(route, entry);
    Semaphore.signal(entry, ::GO);
}","pattern dangerousRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(_,Signal.GO));
    neg find routeIsMonitoredBySensor(route);
}

//Auxiliary pattern
pattern routeIsMonitoredBySensor(route: Route){
    Route.entry(route, Sensor(_,_));
}
","pattern dangerousRoute(route: Route){
	Route.active(route, true);
	Route.entry(route, Semaphore(_, Signal.GO));
	neg find monitorsSensor(route, _);
}

//Auxiliary pattern
pattern monitorsSensor(route: Route, sensor: Sensor){
	Route.requires(route, sensor);
}
","pattern dangerousRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(Semaphore.signal(GO)));
    neg find monitoredBySensor(route);
}

//Auxiliary pattern
pattern monitoredBySensor(route: Route){
    Route.monitors(route, Sensor(_));
}
","pattern dangerousRoute(route: Route){
   Route.active(route, true);
    Route.entry(route, Semaphore(_,Signal.GO));
    neg find isMonitoredBySensor(route);
}

//Auxiliary pattern
pattern isMonitoredBySensor(route: Route){
    Route.entry(route, Sensor(_,_));
}
","pattern dangerousRoute(route: Route){
   Route.active(route,true);
    Route.entry(route,Semaphore(s));
    neg find isMonitoredBySensor(s,_);
}

//Auxiliary pattern
pattern isMonitoredBySensor(sensor: Sensor, element: TrackElement){
    Sensor.monitors(sensor,element);
}
",False,49,"[false, false, false, false, false]","[false, false, false, false, false]"
16,neg,https://github.com/ftsrg/trainbenchmark/blob/master/trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SemaphoreNeighbor.vql,"Two different routes where the exit semaphore of a route is not the entry semaphore of the other. Each route requires a sensor, and the sensors monitor connected tracks.","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
       Route.exit(route1, semaphore);
	Route.requires(route1, sensor1);
	TrackElement.monitoredBy(te1, sensor1);
	TrackElement.connectsTo(te1, te2);
	TrackElement.monitoredBy(te2, sensor2);
	Route.requires(route2, sensor2);
	
	neg find entrySemaphore(route2, semaphore);

	route1 != route2;
}

pattern entrySemaphore(route: Route, semaphore: Semaphore)
{
	Route.entry(route, semaphore);
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
   Semaphore.signal(semaphore, Signal.STOP);
    Semaphore.signal(semaphore, Signal.GO);
    Route.active(route1, true);
    Route.active(route2, true);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Sensor.monitoredBy(sensor1, te1);
    Sensor.monitoredBy(sensor2, te2);
    Sensor.monitoredBy(sensor1, te2);
    Sensor.monitoredBy(sensor2, te1);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
   Semaphore.signal(semaphore, Signal.STOP);
    Route.active(route1, true);
    Route.active(route2, true);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.monitoredBy(te1, sensor1);
    TrackElement.monitoredBy(te2, sensor2);
    TrackElement.connectsTo(te1, te2);
    TrackElement.connectsTo(te2, te1);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
   Semaphore.signal(semaphore, GO);
    Semaphore.signal(semaphore, STOP);
    Semaphore.signal(semaphore, FAILURE);
    Route.active(route1, true);
    Route.active(route1, false);
    Route.active(route2, true);
    Route.active(route2, false);
    Route.semaphores(route1, semaphore);
    Route.semaphores(route2, semaphore);
    Route.entry(route1, semaphore);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.exit(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.monitoredBy(te1, sensor1);
    TrackElement.monitoredBy(te2, sensor2);
    TrackElement.connectsTo(te1, te2);
    TrackElement.connectsTo(te2, te1);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
   Semaphore.signal(semaphore,Signal.STOP);
    Route.active(route1,true);
    Route.active(route2,true);
    Route.exit(route1,semaphore);
    Route.entry(route2,semaphore);
    Sensor.monitoredBy(sensor1,te1);
    Sensor.monitoredBy(sensor2,te2);
    Sensor.monitors(semaphore,sensor1);
    Sensor.monitors(semaphore,sensor2);
    TrackElement.connectsTo(te1,te2);
    TrackElement.connectsTo(te2,te1);
    TrackElement.monitoredBy(te1,sensor1);
    TrackElement.monitoredBy(te2,sensor2);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
   Semaphore.signal(semaphore, Signal.STOP);
    Route.active(route1, true);
    Route.active(route2, true);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    TrackElement.monitoredBy(te1, sensor1);
    TrackElement.monitoredBy(te2, sensor2);
    TrackElement.connectsTo(te1, te2);
    TrackElement.connectsTo(te2, te1);
}

//auxiliary pattern
pattern requires(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}

//auxiliary pattern
pattern monitors(sensor: Sensor, te: TrackElement){
    Sensor.monitors(sensor, te);
}

//auxiliary pattern
pattern connectsTo(te1: TrackElement, te2: TrackElement){
    TrackElement.connectsTo(te1, te2);
}

//auxiliary pattern
pattern active(route: Route, active: EBoolean){
    Route.active(route, active);
}

//auxiliary pattern
pattern exit(route: Route, semaphore: Semaphore){
    Route.exit(route, semaphore);
}

//auxiliary pattern
pattern entry(route: Route, semaphore: Semaphore){
    Route.entry(route, semaphore);
}

//auxiliary pattern
pattern signal(semaphore: Semaphore, signal: Signal){
    Semaphore.signal(semaphore, signal);
}

//auxiliary pattern
pattern position(switchPosition: SwitchPosition, position: Position){
    SwitchPosition.position(switchPosition, position);
}

//auxiliary pattern
pattern target(switchPosition: SwitchPosition, target: Switch){
    SwitchPosition.target(switchPosition",False,6,"[false, false, false, false, false]","[false, false, false, false, false]"
