id,construct,train_benchmark,nl,header,truth,0_output,1_output,2_output,3_output,4_output
0,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchSet.vql,Active route with GO entry semaphore and misaligned switch position. Misaligned means switch position where the target Switch's current position is different from the SwitchPosition's position.,pattern goRouteMisalignedSwitch(route: Route){,"pattern goRouteMisalignedSwitch(route: Route){
 find goRoute(route);
 Route.follows(route, swP);
 find misalignedSwitchPosition(swP);
}

pattern goRoute(route: Route){
	Route.active(route,true);
	Route.entry(route, semaphore);
	Semaphore.signal(semaphore, Signal::GO);	
}

pattern misalignedSwitchPosition(swP : SwitchPosition){
	SwitchPosition.target(swP, sw);
	SwitchPosition.position(swP, swpPosition);
	Switch.currentPosition(sw, swCurrentPosition);
	swpPosition != swCurrentPosition;
}","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
    Route.follows(route, switchPosition);
    SwitchPosition.position(switchPosition, position);
    SwitchPosition.route(switchPosition, route);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    Switch.currentPosition(switch, position) != position;
}

//Auxiliary pattern
pattern misalignedSwitchPosition(switchPosition: SwitchPosition){
    SwitchPosition.position(switchPosition, position);
    SwitchPosition.route(switchPosition, route);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    Switch.currentPosition(switch, position) != position;
}
","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
    check(position != switch.currentPosition);
}

//Auxiliary pattern
pattern misalignedSwitch(switchPosition: SwitchPosition){
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
    check(position != switch.currentPosition);
}
","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
    Route.follows(route, switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
    position != Switch.currentPosition(switch);
}

//Auxiliary pattern
pattern goRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
","pattern goRouteMisalignedSwitch(route: Route){
    Route(route);
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore(semaphore);
    Semaphore.signal(semaphore, GO);
    Route.follows(route, switchPosition);
    SwitchPosition(switchPosition);
    SwitchPosition.target(switchPosition, switch);
    Switch(switch);
    Switch.currentPosition(switch, position);
    SwitchPosition.position(switchPosition, position);
    check(position != switch.currentPosition);
}

//Auxiliary pattern
pattern misalignedSwitch(switch: Switch, position: Position){
    Switch(switch);
    Switch.currentPosition(switch, position);
}
","pattern goRouteMisalignedSwitch(route: Route){
    Route.active(route,true);
    Route.entry(route,semaphore);
    Semaphore.signal(semaphore,Signal.GO);
    Route.follows(route,position);
    SwitchPosition.position(position,position1);
    SwitchPosition.target(position,targetSwitch);
    Switch.currentPosition(targetSwitch,position2);
    check(position1 != position2);
}

//Auxiliary pattern
pattern goRoute(route: Route){
    Route.active(route,true);
    Route.entry(route,semaphore);
    Semaphore.signal(semaphore,Signal.GO);
}
"
1,find,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/ConnectedSegments.vql,Six segments monitored by with the same sensor. Each segment is connected to the next one.,"pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    find connectedSegmentWithSameMonitor(segment1, segment2, sensor);
    find connectedSegmentWithSameMonitor(segment2, segment3, sensor);
    find connectedSegmentWithSameMonitor(segment3, segment4, sensor);
    find connectedSegmentWithSameMonitor(segment4, segment5, sensor);
    find connectedSegmentWithSameMonitor(segment5, segment6, sensor);

}
pattern connectedSegmentWithSameMonitor(segment1: Segment, segment2: Segment, sensor: Sensor){
    Segment.connectsTo(segment1,segment2);
    Segment.monitoredBy(segment1,sensor);
    Segment.monitoredBy(segment2,sensor);
}","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    Sensor.monitoredBy(sensor, segment3);
    Sensor.monitoredBy(sensor, segment4);
    Sensor.monitoredBy(sensor, segment5);
    Sensor.monitoredBy(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    Sensor.monitoredBy(sensor, segment3);
    Sensor.monitoredBy(sensor, segment4);
    Sensor.monitoredBy(sensor, segment5);
    Sensor.monitoredBy(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    Sensor.monitoredBy(sensor, segment3);
    Sensor.monitoredBy(sensor, segment4);
    Sensor.monitoredBy(sensor, segment5);
    Sensor.monitoredBy(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}

//Auxiliary pattern
pattern connectedSegments(sensor : Sensor, segment1 : Segment, segment2 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    TrackElement.connectsTo(segment1, segment2);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    Sensor.monitoredBy(sensor, segment3);
    Sensor.monitoredBy(sensor, segment4);
    Sensor.monitoredBy(sensor, segment5);
    Sensor.monitoredBy(sensor, segment6);
    Segment.connectsTo(segment1, segment2);
    Segment.connectsTo(segment2, segment3);
    Segment.connectsTo(segment3, segment4);
    Segment.connectsTo(segment4, segment5);
    Segment.connectsTo(segment5, segment6);
}
","pattern connectedSegments6(sensor : Sensor, segment1 : Segment, segment2 : Segment, segment3 : Segment, segment4 : Segment, segment5 : Segment, segment6 : Segment){
    Sensor.monitoredBy(sensor, segment1);
    Sensor.monitoredBy(sensor, segment2);
    Sensor.monitoredBy(sensor, segment3);
    Sensor.monitoredBy(sensor, segment4);
    Sensor.monitoredBy(sensor, segment5);
    Sensor.monitoredBy(sensor, segment6);
    TrackElement.connectsTo(segment1, segment2);
    TrackElement.connectsTo(segment2, segment3);
    TrackElement.connectsTo(segment3, segment4);
    TrackElement.connectsTo(segment4, segment5);
    TrackElement.connectsTo(segment5, segment6);
}

//Auxiliary pattern
pattern connectedSegments(segment1 : TrackElement, segment2 : TrackElement){
    TrackElement.connectsTo(segment1, segment2);
}
"
2,or,,Semaphores with STOP or GO signals.,pattern stopOrGo(semaphore: Semaphore){,"pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, Signal::GO);
} or {
    Semaphore.signal(semaphore, Signal::STOP);
}","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, signal);
    check(signal == Signal.STOP or signal == Signal.GO);
}
","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, signal);
    check(signal == Signal.STOP || signal == Signal.GO);
}
","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, signal);
    check(signal == Signal.STOP or signal == Signal.GO);
}
","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, signal);
    check(signal == Signal.STOP or signal == Signal.GO);
}
","pattern stopOrGo(semaphore: Semaphore){
    Semaphore.signal(semaphore, signal);
    check(signal == Signal.STOP || signal == Signal.GO);
}
"
3,or,,TrackElements that are either connected or monitored by the same sensor.,"pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1,track2);
}","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, track2);
    TrackElement.monitoredBy(track2, track1);
}

","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1,sensor1);
    TrackElement.monitoredBy(track2,sensor2);
    sensor1 == sensor2;
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1,_);
    TrackElement.monitoredBy(track2,_);
    TrackElement.connectsTo(track1,_);
    TrackElement.connectsTo(track2,_);
}

","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
} or {
    TrackElement.connectsTo(track1, track2);
}
","pattern relatedTrackElements(track1: TrackElement, track2: TrackElement){
    TrackElement.monitoredBy(track1, sensor);
    TrackElement.monitoredBy(track2, sensor);
    TrackElement.connectsTo(track1, track2);
}
"
4,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SwitchMonitored.vql,Switches not monitored by a sensor.,pattern switchNotMonitored(sw : Switch){,"pattern switchNotMonitored(sw : Switch){
    neg find hasSensor(sw);
}
//auxiliary pattern
pattern hasSensor(sw : Switch){
    TrackElement.monitoredBy(sw, _);
}","pattern switchNotMonitored(sw : Switch){
    Switch(sw);
    neg find monitoredBy(sw,_);
}

//auxiliary pattern
pattern monitoredBy(trackElement : TrackElement, sensor : Sensor) {
    TrackElement.monitoredBy(trackElement, sensor);
}
","pattern switchNotMonitored(sw : Switch){
    Switch(sw);
    neg find switchMonitoredBySensor(sw);
}

//auxiliary pattern
pattern switchMonitoredBySensor(switch : Switch) {
    Switch.monitoredBy(switch, _);
}
","pattern switchNotMonitored(sw : Switch){
    Switch(sw);
    neg find switchMonitored(_, sw);
}

//auxiliary pattern
pattern switchMonitored(sensor : Sensor, switch : Switch) {
    Sensor.monitoredBy(sensor, switch);
}
","pattern switchNotMonitored(sw : Switch){
    Switch(sw);
    neg find monitorSwitch(sw);
}

//auxiliary pattern
pattern monitorSwitch(switch : Switch) {
    TrackElement.monitoredBy(switch, _);
}
","pattern switchNotMonitored(sw : Switch){
    Switch(sw);
    neg find monitoredBySwitch(sw);
}

//auxiliary pattern
pattern monitoredBySwitch(switch : Switch) {
    TrackElement.monitoredBy(switch, _);
}
"
5,neg,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/RouteSensor.vql,Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.,"pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    TrackElement.monitoredBy(sw, sensor);
    neg find required(sensor, route);
}
//auxiliary pattern
pattern required(sensor : Sensor, route : Route){
    Route.requires(route, sensor);
}","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route(route);
    Route.follows(route, swP);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch(sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
    Route.requires(route, sensor);
    not find Route.entry(route, sensor);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
}

//Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.
pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
}

//Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.
pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
}

//Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.
pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
}

//Retrieve sensors that monitor a switch. The switch position that target that switch is followed by a route. That sensor is not required by the route.
pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route.requires(route, sensor);
   ","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route(route);
    Route.requires(route, sensor);
    Route.follows(route, swP);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.STRAIGHT);
    Sensor.monitoredBy(sensor, sw);
    find notRequiredSensorHelper(sensor, route);
}

//auxiliary pattern
pattern notRequiredSensorHelper(sensor : Sensor, route : Route){
    not Sensor.monitoredBy(sensor, _);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route(route);
    Route.requires(route, sensor);
    Route.follows(route, swP);
    SwitchPosition.target(swP, sw);
    Switch.monitoredBy(sw, sensor);
    neg find requiredSensor(route, sensor);
}
","pattern notRequiredRouteSensor(route : Route, sensor : Sensor, swP : SwitchPosition, sw : Switch){
    Route(route);
    Route.requires(route, _);
    Route.follows(route, swP);
    SwitchPosition.route(swP, route);
    SwitchPosition.target(swP, sw);
    Switch.positions(sw, swP);
    Switch.currentPosition(sw, Position.DIVERGING);
    Sensor.monitoredBy(sensor, sw);
    Route.requires(route, sensor);
}

"
6,agg,,Total length of segments.,pattern totalLength(length: java Integer){,"pattern totalLength(length: java Integer){
    length == sum find segmentLength(_,#);
}
pattern segmentLength(segment: Segment, length: java Integer){
    Segment.length(segment, length);
}","pattern totalLength(length: java Integer){
    Segment.length(segment, length);
    find segment(segment);
}

//Auxiliary pattern
pattern segment(segment: Segment){
    Segment(segment);
}
","pattern totalLength(length: java Integer){
    Segment.length(segment, length);
    find totalLength(length, segment);
}

//Auxiliary pattern
pattern totalLength(length: java Integer, segment: Segment){
    Segment.length(segment, length1);
    length += length1;
}
","pattern totalLength(length: java Integer){
    cnt == count find segment(_);
    check(cnt>0);
    length == sum length(segment(_));
}
","pattern totalLength(length: java Integer){
    Segment.length(segment,length);
}
","pattern totalLength(length: java Integer){
    Segment(segment);
    length == segment.length;
}
"
7,agg,,Track elements monitored by at lest two sensors.,pattern monitoredBy2Sensors(track: TrackElement){,"pattern monitoredBy2Sensors(track: TrackElement){
    cnt == count find trackMonitoredBy(track, _);
    check(cnt >= 2);
}
pattern trackMonitoredBy(track: TrackElement, sensor: Sensor){
    TrackElement.monitoredBy(track, sensor);
}","pattern monitoredBy2Sensors(track: TrackElement){
    TrackElement.monitoredBy(track, sensor1);
    TrackElement.monitoredBy(track, sensor2);
    sensor1 != sensor2;
}
","pattern monitoredBy2Sensors(track: TrackElement){
    TrackElement(track);
    find monitoredBy(track, _);
    count monitoredBy(track, _) >= 2;
}
","pattern monitoredBy2Sensors(track: TrackElement){
    TrackElement.monitoredBy(track, sensor1);
    TrackElement.monitoredBy(track, sensor2);
    neg TrackElement.monitoredBy(track, sensor1) and TrackElement.monitoredBy(track, sensor2);
}
","pattern monitoredBy2Sensors(track: TrackElement){
    TrackElement(track);
    monitoredBy(track, s1);
    monitoredBy(track, s2);
    s1 != s2;
}
","pattern monitoredBy2Sensors(track: TrackElement){
    TrackElement.monitoredBy(track, s1);
    TrackElement.monitoredBy(track, s2);
    neg s1 == s2;
}
"
8,type,,RailwayElements that are either Switches or SwitchPositions.,pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){,"pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}
","pattern switchOrSwitchPositionRailwayElemements(raliway: RailwayElement){
    Switch(raliway);
} or {
    SwitchPosition(raliway);
}
"
9,type,,Railway elements that are Switches.,pattern switchRailwayElements(railway: RailwayElement){,"pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
    RailwayElement.type(railway, ""Switch"");
}
","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
    Switch(railway);
}
","pattern switchRailwayElements(railway: RailwayElement){
    RailwayElement(railway);
    Switch(railway);
}
"
10,normal,,Active routes with entry GO semaphore.,pattern goActiveRoute(route: Route){,"pattern goActiveRoute(route: Route){
    Route.active(route,true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal::GO);    
}","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
","pattern goActiveRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, GO);
}
"
11,normal,trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/PosLength.vql,Retrieve all segments whose lengths are less or equal than zero.,pattern posLength(segment : Segment){,"pattern posLength(segment : Segment){
    Segment.length(segment, length);
    check(length <= 0);
}","pattern posLength(segment : Segment){
    Segment(segment);
    segment.length(length);
    length <=0;
}
","pattern posLength(segment : Segment){
    Segment(segment);
    Segment.length(segment, length);
    length <= 0;
}

//Retrieve all regions that have no sensors.
pattern noSensorInRegion(region : Region){
    Region(region);
    neg find SensorInRegion(region, _);
}

//Auxiliary pattern
pattern sensorInRegion(region : Region, sensor : Sensor){
    Region.sensors(region, sensor);
}
","pattern posLength(segment : Segment){
    Segment.length(segment, _) <= 0;
}
","pattern posLength(segment : Segment){
    segment.length <= EInt(0);
}
","pattern posLength(segment : Segment){
    Segment.length(segment, _);
}
"
12,normal,,SwitchPositions where the target Switch's current position is different from the SwitchPosition's position.,pattern misalignedSwitchPosition(swP : SwitchPosition){,"pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, sw);
    SwitchPosition.position(swP, swpPosition);
    Switch.currentPosition(sw, swCurrentPosition);
    swpPosition != swCurrentPosition;
}","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, sw);
    Switch.currentPosition(sw, current);
    SwitchPosition.position(swP, position);
    current != position;
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, target);
    Switch.currentPosition(target, currentPosition);
    SwitchPosition.position(swP, position);
    currentPosition != position;
}
","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, sw);
    Switch.currentPosition(sw, pos);
    SwitchPosition.position(swP, pos2);
    pos != pos2;
}

","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, switch);
    Switch.currentPosition(switch, current);
    SwitchPosition.position(swP, position);
    current != position;
}

","pattern misalignedSwitchPosition(swP : SwitchPosition){
    SwitchPosition.target(swP, target);
    Switch.currentPosition(target, currentPosition);
    SwitchPosition.position(swP, position);
    currentPosition != position;
}
"
13,mix,,"Regions where the sum of segments lengths is at least 50, or regions with at least 10 sensors.",pattern bigRegion(region: Region){,"pattern bigRegion(region: Region){
    length == sum find trackLengthInRegion(region, _,#);
    check(length >= 50);
} or {
    cnt == count find sensorInRegion(region, _);
    check(cnt >= 10);
}
pattern trackLengthInRegion(region: Region, track: Segment, length: EInt){
    Region.elements(region,track);
    Segment.length(track,length);
}
pattern sensorInRegion(region:Region, sensor: Sensor){
    Region.sensors(region,sensor);
}","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment(segment);
    Segment.length(segment, length);
    sumLength(length, sum);
    check(sum >= 50 || cnt >= 10);
}

//Auxiliary pattern
pattern sumLength(length: EInt, sum: EInt){
    sum == sum + length;
}

","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment(segment);
    Segment.length(segment, length);
    cnt == count find Segment(_, length);
    check(cnt >= 50);
} or {
    Region.sensors(region, _);
    cnt == count find Sensor(_, _);
    check(cnt >= 10);
}

","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment(segment);
    Segment.length(segment, length);
    cnt == count find Segment(_, length);
    check(cnt>=50);
} or {
    Region.sensors(region, _);
    cnt == count find Region.sensors(region, _);
    check(cnt>=10);
}
","pattern bigRegion(region: Region){
    Region.elements(region, segment);
    Segment.length(segment, length);
    sum == sum length;
    check(sum>=50);
} or {
    Region.sensors(region, _);
    cnt == count find Region.sensors(region, _);
    check(cnt>=10);
}
","pattern bigRegion(region: Region){
    Region.elements(region, element);
    find segment(element, segment);
    Region.elements(region, element2);
    find segment(element2, segment2);
    Segment.length(segment, length);
    Segment.length(segment2, length2);
    check(length + length2 >= 50);
} or {
    Region.sensors(region, sensor);
    check(count sensor >= 10);
}

//Auxiliary pattern
pattern segment(element: TrackElement, segment: Segment){
    TrackElement(element);
    Segment(segment);
}
"
14,mix,,Segments that are at least 7 units long or are switches.,pattern sevenSegmentOrSwitch(track: TrackElement){,"pattern sevenSegmentOrSwitch(track: TrackElement){
    Switch(track);
} or {
    Segment.length(track, length);
    check(length >= 7);
}","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment(track);
    Segment.length(track, length);
    check(length>=7);
} or {
    Switch(track);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment(track);
    Segment.length(track, length);
    check(length>=7);
} or {
    Switch(track);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment(track);
    Segment.length(track, length);
    check(length >= 7);
} or {
    Switch(track);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
    TrackElement.connectsTo(track, segment);
    Segment(segment);
    Segment.length(segment, length);
    check(length >= 7);
} or {
    TrackElement.connectsTo(track, switch);
    Switch(switch);
}
","pattern sevenSegmentOrSwitch(track: TrackElement){
    Segment(track);
    Segment.length(track, length);
    check(length >= 7 or Switch(track));
}
"
15,mix,,Active route whose entry is a GO semaphore but not monitored by any sensor.,pattern dangerousRoute(route: Route){,"pattern dangerousRoute(route: Route){
        find activeRouteWithGO(route);
        neg find routeMonitroedBy(route,_);
}
pattern routeMonitroedBy(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}
pattern activeRouteWithGO(route: Route){
    Route.active(route, true);
    Route.entry(route, entry);
    Semaphore.signal(entry, ::GO);
}","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal.GO);
    find routeWithoutSensor(route, _);
}

//Auxiliary pattern
pattern routeWithoutSensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
    Sensor.monitors(sensor, _);
}
","pattern dangerousRoute(route: Route){
    Route.active(route, true);
    find entrySemaphore(route, _);
    find routeNotMonitoredBySensor(route, _);
}

//Auxiliary pattern
pattern entrySemaphore(route: Route, semaphore: Semaphore){
    Route.entry(route, semaphore);
    Semaphore.signal(semaphore, Signal.GO);
}
","pattern dangerousRoute(route: Route){
    Route.active(route, active);
    check(active);
    Route.entry(route, entry);
    Semaphore(entry);
    Semaphore.signal(entry, signal);
    check(signal == GO);
    find noSensorMonitorsSemaphore(entry);
}

//Auxiliary pattern
pattern noSensorMonitorsSemaphore(semaphore: Semaphore){
    Semaphore.monitoredBy(semaphore, sensor);
    Sensor(sensor);
}
","pattern dangerousRoute(route: Route){
    Route.active(route, active);
    check(active);
    Route.entry(route, semaphore);
    Semaphore(semaphore);
    Semaphore.signal(semaphore, signal);
    check(signal == GO);
    find noSensorMonitored(semaphore);
}

//Auxiliary pattern
pattern noSensorMonitored(semaphore: Semaphore){
    Semaphore.monitoredBy(semaphore, sensor);
    Sensor(sensor);
}
","pattern dangerousRoute(route: Route){
    Route.active(route, active);
    check(active);
    Route.entry(route, entry);
    Semaphore(entry);
    Semaphore.signal(entry, signal);
    check(signal != Signal.GO);
    Route.requires(route, sensor);
    Sensor.monitors(sensor, _);
}
"
16,neg,https://github.com/ftsrg/trainbenchmark/blob/master/trainbenchmark-tool-viatra-patterns/src/hu/bme/mit/trainbenchmark/benchmark/viatra/SemaphoreNeighbor.vql,"Two different routes where the exit semaphore of a route is not the entry semaphore of the other. Each route requires a sensor, and the sensors monitor connected tracks.","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
       Route.exit(route1, semaphore);
	Route.requires(route1, sensor1);
	TrackElement.monitoredBy(te1, sensor1);
	TrackElement.connectsTo(te1, te2);
	TrackElement.monitoredBy(te2, sensor2);
	Route.requires(route2, sensor2);
	
	neg find entrySemaphore(route2, semaphore);

	route1 != route2;
}

pattern entrySemaphore(route: Route, semaphore: Semaphore)
{
	Route.entry(route, semaphore);
}","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, id);
    Route.entry(route1, entry1);
    Route.exit(route2, exit2);
    Semaphore(id, entry1, exit2);
    Semaphore(id, exit2, entry1);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitoredBy(sensor1, te1);
    Sensor.monitoredBy(sensor2, te2);
    te1 != te2;
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, id);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    te1 != te2;
    te1.connectsTo(te2);
}

//Auxiliary pattern
pattern semaphoreNeighbor(semaphore: Semaphore, route: Route, sensor: Sensor, te: TrackElement){
    Semaphore.id(semaphore, id);
    Route.entry(route, semaphore);
    Route.exit(route, semaphore);
    Route.requires(route, sensor);
    Sensor.monitors(sensor, te);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, id);
    Route.exit(route1, semaphore);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitors(sensor1, te1);
    Sensor.monitors(sensor2, te2);
    te1.connectsTo(te2);
}

//Auxiliary pattern
pattern sensorMonitor(sensor: Sensor, trackElement: TrackElement){
    Sensor.monitors(sensor, trackElement);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.id(semaphore, id);
    Route.exit(route1, semaphore);
    Route.exit(route2, _);
    Route.entry(route1, _);
    Route.entry(route2, semaphore);
    Route.requires(route1, sensor1);
    Route.requires(route2, sensor2);
    Sensor.monitoredBy(sensor1, te1);
    Sensor.monitoredBy(sensor2, te2);
    te1 != te2;
    te1.connectsTo(te2);
}

//Auxiliary pattern
pattern routeWithSensor(route: Route, sensor: Sensor){
    Route.requires(route, sensor);
}
","pattern semaphoreNeighbor(semaphore: Semaphore, route1: Route, route2: Route, sensor1: Sensor, sensor2: Sensor, te1: TrackElement, te2: TrackElement){
    Semaphore.signal(semaphore, signal);
    Semaphore.id(semaphore, id);
    Route.entry(route1, entry1);
    Semaphore.id(entry1, id1);
    Route.exit(route2, exit2);
    Semaphore.id(exit2, id2);
    check(id1 != id2);
    Route.requires(route1, sensor1);
    Sensor.monitoredBy(sensor1, te1);
    Route.requires(route2, sensor2);
    Sensor.monitoredBy(sensor2, te2);
}
"
