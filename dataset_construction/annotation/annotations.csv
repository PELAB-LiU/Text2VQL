id,nl,pattern,metamodel,metamodel_definition,__index_level_0__,Reviewer1,Reviewer2,Agreed
49298,Get all posts that have a specific tag and are commented on by a user who has also commented on another post,"pattern taggedAndCommentedWithUser(tag: Tag, post1: Post, post2: Post, user: User){
    Tag.tagPost(tag,post1);
    Comment.commentPost(_,post2);
    Comment.commentUser(_,user);
}",repo-ecore-all/data/wrwei/Jorvik/org.eclipse.jorvik.examples/model/Wordpress.ecore,"class Website {
	reference Content[0..*] contents;
	reference Comment[0..*] comments;
	reference Category[0..*] categories;
	reference Media[0..*] mediaFiles;
	reference Tag[0..*] tags;
	reference Template[0..*] templates;
	reference Node[0..*] nodes;
	reference Link[0..*] links;
	reference User[0..*] users;
	reference Widget[0..*] widgets;
	reference WidgetArea[0..*] widgetAreas;
	reference Menu[0..*] menus;
	reference MenuItem[0..*] menuItems;
	reference ExternalLink[0..*] externalLinks;
	reference Theme[0..*] themes;
}
class Post extends Content {
	attribute EString[0..1] stickFrontPage;
	reference Category[0..*] postCategory;
	reference Media[0..*] postMedia;
	reference Tag[0..*] postTag;
	reference Link[0..1] postLink;
	attribute EString[0..1] format;
	reference Comment[0..*] postComment;
	reference User[0..1] postUser;
}
class Category {
	attribute EString[0..1] name;
	attribute EString[0..1] description;
	reference Post[0..*] categoryPost;
	reference Category[0..1] parent;
}
class Media {
	attribute EString[0..1] title;
	attribute EString[0..1] description;
	attribute EInt[0..1] aligment;
	attribute EInt[0..1] formatSize;
	attribute EInt[0..1] dimensions;
	reference User[0..1] mediaUser;
	reference Node[0..*] mediaNode;
}
class Tag {
	attribute EString[0..1] name;
	attribute EString[0..1] description;
	reference Post[0..*] tagPost;
}
class Link {
	attribute EString[0..1] url;
	attribute EString[0..1] name;
	reference LinkCategory[0..*] theLinkCategory;
	attribute EInt[0..1] target;
	attribute EString[0..1] visible;
}
class LinkCategory extends Category {
	reference Link[0..*] categoryLink;
}
class NavigationNode extends Node {
	reference NavigationNode[0..1] parent;
	reference Template[1..1] pageTemplate;
	attribute EInt[0..1] order;
	reference Comment[0..*] pageComment;
	reference User[0..1] pageUser;
}
class Template {
	reference WidgetArea[0..*] templateWidget;
}
class Comment {
	attribute EString[0..1] text;
	reference Post[0..*] commentPost;
	reference NavigationNode[0..1] commentPage;
	reference User[0..1] commentUser;
	reference Comment[0..1] parent;
	reference Content[0..1] commentContent;
}
class User {
	attribute EString[0..1] name;
}
class WidgetArea {
	reference Widget[0..*] areaWidget;
}
class Widget {
	reference WidgetArea[0..1] theWidgetArea;
	attribute EString[0..1] active;
	reference Menu[0..1] widgetMenu;
}
class Menu {
	reference Widget[0..1] menuWidget;
}
class MenuItem {
	reference NavigationNode[0..1] menuItemPage;
	reference ExternalLink[0..1] menuItemExternal;
	attribute EString[0..1] navigationLabel;
}
class ExternalLink {
}
class Theme {
	attribute EString[0..1] name;
	reference WidgetArea[0..*] themeWidgetArea;
}
class Node {
	attribute EString[0..1] title;
	attribute EString[0..1] date;
	attribute EString[0..1] text;
	attribute EInt[0..1] status;
	attribute EInt[0..1] visibility;
	reference Media[0..*] nodeMedia;
}
class Content {
	attribute EString[0..1] title;
	attribute EString[0..1] date;
	attribute EString[0..1] text;
	attribute EInt[0..1] visibility;
	attribute EInt[0..1] status;
	reference Comment[0..*] contentComment;
}
class Page extends Content {
	reference Page[0..1] parent;
	attribute EInt[0..1] order;
}
",9207,no,no,no
45023,RailsClasses that have at least one attribute of type string and at least one method of type classMethod,"pattern classWithStringAttributeAndClassMethod(railsClass: RailsClass) {
    RailsClass.attributes(railsClass, attribute);
    RailsAttribute.dataType(attribute, RailsDataType::string);
    RailsClass.methods(railsClass, method);
    RailsMethod.methodType(method, RailsMethodType::classMethod);
}",repo-ecore-all/data/jairud-garcia/rails-model-extractor/co.gruposaberes.rails.target/metamodels/RailsTarget.ecore,"class RailsAttribute {
	attribute RailsDataType[1..1] dataType;
	attribute EString[0..1] name;
}
class RailsMethod {
	attribute EString[0..1] name;
	attribute RailsMethodType[1..1] methodType;
}
class RailsClass {
	attribute EString[0..1] name;
	attribute EString[0..1] fullName;
	attribute RailsClassType[1..1] classType;
	reference RailsMethod[0..*] methods;
	reference RailsAttribute[0..*] attributes;
}
class RailsAssociation {
	reference RailsClass[1..1] source;
	reference RailsClass[1..1] target;
	attribute EString[0..1] foreignKeyColumnName;
	attribute EString[0..1] sourceRoleName;
	attribute EString[0..1] targetRoleName;
	attribute RailsCardinality[1..1] sourceCardinality;
	attribute RailsCardinality[1..1] targetCardinality;
	attribute RailsAssociationType[1..1] associationType;
}
class RailsNamespace {
	attribute EString[0..1] name;
	attribute EString[0..1] fullName;
	reference RailsClass[0..*] classes;
}
class RailsApplication {
	attribute EString[0..1] name;
	reference RailsAssociation[0..*] railsAssociations;
	reference RailsClass[0..*] classes;
	reference RailsNamespace[0..*] namespaces;
}
enum RailsDataType {
	none;
	binary;
	boolean;
	date;
	datetime;
	decimal;
	float;
	integer;
	bigint;
	primary_key;
	references;
	string;
	text;
	time;
	timestamp;
	hstore;
	json;
	array;
	cidr_address;
	ip_address;
	mac_address;
}
enum RailsMethodType {
	instanceMethod;
	classMethod;
}
enum RailsClassType {
	none;
	activeRecord;
	activeResource;
}
enum RailsCardinality {
	none;
	one;
	many;
}
enum RailsAssociationType {
	aggregation;
	composition;
}
",4932,yes,yes,yes
57609,Objects that are part of the initial room in the PointAndClickAdventure,"pattern initialRoomObjects(obj : Object, initialRoom : Room) {
    PointAndClickAdventure.initialRoom(mainAdventure, initialRoom);
    Room.containedObjects(initialRoom, obj);
}",repo-ecore-all/data/DevBoost/EMFText-Zoo/Inhabitants/PACAD/org.emftext.language.pacad/metamodel/pacad.ecore,"abstract class NamedElement {
	attribute EString[0..1] declaredName;
	attribute EString[1..1] id;
}
abstract class AdventureElement {
}
class Object extends NamedElement, AdventureElement {
	attribute EInt[0..1] definedPositionX;
	attribute EInt[0..1] definedPositionY;
	reference Object[0..1] parent;
	attribute EBoolean[0..1] visible;
}
class InternalObject extends Object {
	attribute EInt[0..1] definedWidth;
	attribute EInt[0..1] definedHeight;
}
class Room extends Object {
	reference Object[0..*] containedObjects;
	attribute EString[1..1] declaredBackgroundSound;
}
class Command extends AdventureElement {
	attribute CommandType[1..1] type;
	reference Action[1..*] actions;
	reference Object[1..*] subjects;
}
enum CommandType {
	LookAt;
	Take;
	Use;
	TalkTo;
}
abstract class Action {
}
class Hide extends Action {
	reference Object[1..1] subject;
}
class Show extends Action {
	reference Object[1..1] subject;
}
class MoveAbsolute extends Action {
	reference Object[1..1] subject;
	attribute EInt[1..1] newPositionX;
	attribute EInt[1..1] newPositionY;
}
class MoveRelative extends Action {
	reference Object[1..1] subject;
	attribute EInt[1..1] deltaX;
	attribute EInt[1..1] deltaY;
}
class PlaySound extends Action {
	attribute EString[1..1] soundfile;
}
class ShowText extends Action {
	reference Object[0..1] speaker;
	attribute EString[1..*] text;
}
class PointAndClickAdventure {
	attribute EBoolean[0..1] main;
	reference AdventureElement[0..*] elements;
	reference Room[0..1] initialRoom;
	reference ColorMapping[0..*] colorMappings;
	reference PointAndClickAdventure[0..1] mainScript;
}
class ColorMapping {
	reference Object[1..1] person;
	attribute EString[1..1] red;
	attribute EString[1..1] green;
	attribute EString[1..1] blue;
}
class Import extends AdventureElement {
	reference PointAndClickAdventure[1..1] importedAdventure;
}
class Inventory {
	reference InventoryObject[0..*] carriedObjects;
}
class Store extends Action {
	reference Object[1..1] subject;
}
class Remove extends Action {
	reference Object[1..1] subject;
}
class InventoryObject extends Object {
}
",17518,ok,ok,ok
42155,All autonomic managers that have at least one change request,"pattern autonomicManagerWithChangeRequest(autonomicManager: AutonomicManager){
    AutonomicManager.requests(autonomicManager, _);
}",repo-ecore-all/data/adalrsjr1/mddsm/mddsm-broker-model/src/main/resources/model/base.ecore,"class Manager extends Annotable {
	reference Interface[1..1] iface;
	reference Action[0..*] actions;
	reference Handler[0..*] handlers;
	reference StateManager[0..1] stateManager;
	reference ResourceManager[0..1] resourceManager;
	reference AutonomicManager[0..1] autonomicManager;
	reference PolicyManager[1..1] policyManager;
}
abstract class ResourceManager {
	reference Interface[1..1] iface;
}
class StateManager {
	reference State[0..*] stateTypes;
}
class AutonomicManager {
	reference Symptom[0..*] identifies;
	reference ChangeRequest[0..*] requests;
	reference ChangePlan[0..*] plans;
}
class PolicyManager {
	reference PolicyEvaluationPoint[0..*] points;
	reference PolicyEvaluationHandler[0..*] handlers;
	reference Policy[0..*] policies;
}
class Handler {
	reference Signal[1..1] signal;
	reference ActionExecution[1..1] action;
	attribute EBoolean[1..1] enabled;
}
class InstanceResourceManager extends ResourceManager {
	reference Instance[0..*] instances;
	attribute EString[0..1] Name;
}
class Instance extends Annotable {
	attribute EString[1..1] impl;
	reference Interface[1..1] iface;
}
",2064,yes,yes,yes
54780,All recommendations that are strengths,"pattern strengthRecommendation(recommendation: Recommendation){
    Strength(recommendation);
}",repo-ecore-all/data/AGSNeditor/development/AGSN_sourcecode/AGSN/model/AGSN.ecore,"class SafetyCase {
	reference BasicNode[0..*] rootBasicNode;
	reference BasicLink[0..*] rootBasicLink;
	reference Recommendation[0..*] rootCommendation;
	attribute EString[0..1] description;
	attribute EString[0..1] id;
}
abstract class BasicNode {
	attribute EString[0..1] id;
	attribute EString[0..1] name;
	attribute AssessStatus[0..1] assessstatus;
	reference Recommendation[0..1] hasComment;
	attribute EString[0..1] description;
	attribute Level[0..1] qualityLevel;
	attribute percentage[0..1] confidencePercentage;
	attribute EDouble[0..1] weight;
	attribute beliefDegree[0..1] beliefDegree;
}
abstract class BasicLink {
	reference BasicNode[0..1] source;
	reference BasicNode[0..1] target;
	attribute EString[0..1] id;
}
class Goal extends BasicNode {
}
class Strategy extends BasicNode {
}
class Evidence extends BasicNode {
	attribute EString[0..1] attachment;
}
class Context extends BasicNode {
}
class Justification extends BasicNode {
}
class Assumption extends BasicNode {
}
class InContextOf extends BasicLink {
}
class SupportedBy extends BasicLink {
}
enum AssessStatus {
	NotReviewed;
	Accepted;
	Incorrect;
	Weak;
	ReviewLater;
}
class Recommendation {
	attribute EString[0..1] ID;
	attribute EString[0..1] name;
	attribute EString[0..1] description;
}
class Strength extends Recommendation {
}
class RequiredAction extends Recommendation {
}
class Weakness extends Recommendation {
}
class Question extends Recommendation {
}
enum Level {
	VeryLow;
	Low;
	Medium;
	High;
	VeryHigh;
}
class AdditionalElement extends BasicNode {
	attribute EString[0..1] attachment;
}
class AdditionalLink extends BasicLink {
}
class ModuleElement extends BasicNode {
	attribute EString[0..1] attachment;
}
class Module extends ModuleElement {
}
class Contract extends ModuleElement {
}
",14689,yes,yes,yes
42954,Decisions with more than 1 outgoing arrow.,"pattern decisionWithMultipleOutgoingArrows(decision: Decision){
    cnt == count find outgoingArrows(decision, _);
    check(cnt>1);
}

//Auxiliary pattern
pattern outgoingArrows(decision: Decision, arrow: DecisionArrow){
    Decision.outgoing(decision, arrow);
}",repo-ecore-all/data/CoWolf/CoWolf/de.uni_stuttgart.iste.cowolf.model.activity_diagram/model/activity_diagram.ecore,"class ActivityDiagram extends IDBase {
	reference Start[1..1] start;
	reference Action[0..*] action;
	reference Decision[0..*] decision;
	reference End[1..1] end;
	reference Split[0..*] split;
	reference Join[0..*] join;
	reference ArrowAfterStart[1..1] startArrow;
	reference AfterActionArrow[0..*] afterActionArrow;
	reference DecisionArrow[0..*] decisionArrow;
	reference SplitArrow[0..*] splitArrow;
	reference JoinArrow[0..*] joinArrow;
	reference ArrowAfterJoin[0..*] ArrowAfterJoin;
}
class Start extends IDBase {
	reference ArrowAfterStart[1..1] outgoingFromStart;
}
class Action extends NodesWithoutJoin, IDBase {
	attribute EString[1..1] Action;
	reference AfterActionArrow[1..1] outgoing;
}
class Decision extends NodesWithoutJoin, IDBase {
	reference DecisionArrow[2..*] outgoing;
}
class Split extends NodesWithoutJoin, IDBase {
	reference SplitArrow[2..*] outgoing;
}
class Join extends Nodes, IDBase {
	reference ArrowAfterJoin[1..1] outgoing;
}
class End extends NodesWithoutJoin, IDBase {
}
abstract class NodesWithoutJoin extends Nodes, IDBase {
}
class ArrowAfterStart extends IDBase {
	reference NodesWithoutJoin[1..1] target;
}
class DecisionArrow extends IDBase {
	attribute EString[0..1] Condition;
	reference NodesWithoutJoin[1..1] target;
}
class AfterActionArrow extends IDBase {
	reference NodesWithoutJoin[1..1] target;
}
class SplitArrow extends IDBase {
	reference NodesWithoutJoin[1..1] target;
}
class JoinArrow extends IDBase {
	reference NodesWithoutJoin[2..*] source;
	reference Join[1..1] target;
}
abstract class Nodes extends IDBase {
}
class ArrowAfterJoin extends IDBase {
	reference Nodes[1..1] target;
}
",2863,ok,ok,ok
42876,All tests with a note attached,"pattern testWithNote(test: Test){
    Test.note(test, _);
}",repo-ecore-all/data/kuronosec/vulnfinder/display model/edu.udea.vulnfinder.escaneo/model/escaneo.ecore,"class Test {
	reference TargetOfEvaluation[1..1] scope;
	reference Attack[1..*] possibleAttacks;
	attribute EString[0..1] id;
	attribute EDate[0..1] date;
	attribute EString[0..1] name;
	reference Note[0..1] note;
	attribute ESeverity[0..1] severity;
	reference AuthSetting[0..1] authSetting;
}
class TargetOfEvaluation {
	attribute EString[0..1] domain;
	reference WebComponent[1..*] components;
	attribute EString[0..1] ip;
	attribute EString[0..1] protocol;
	attribute EString[0..1] port;
}
class WebComponent {
	attribute EString[0..1] path;
	reference WebComponent[0..*] targetLinks;
	reference Input[0..*] inputs;
}
class Input {
	attribute EString[0..1] name;
	reference Attack[0..*] attacks;
}
class Attack {
	attribute EString[0..1] name;
	attribute ESeverity[0..1] severity;
}
enum ESeverity {
	Medium;
	Low;
	High;
}
enum EAttackMethod {
	SQLInjection;
	XSS;
	Authentication;
	Authorization;
	PrivilegeScalation;
}
class Note {
	attribute EString[0..1] noteText;
}
class AuthSetting {
	attribute EString[0..*] roles;
	attribute EString[0..1] usernameParam;
	attribute EString[0..1] passwordParam;
	attribute EString[0..1] loginTargetURL;
	attribute EString[0..1] loginMessagePattern;
	attribute EString[0..1] logoutMessagePattern;
}
",2785,yes,yes,yes
53751,Tables that have at least one field with a default value,"pattern tableWithFieldDefaultValue(table: Table) {
    Table.fields(table, field);
    Field.defaultValue(field, _);
}",repo-ecore-all/data/gourch/rds2sql/rds2sql/metamodels/genericSql.ecore,"abstract class NamedElement {
	attribute EString[0..1] name;
	attribute EString[0..1] comment;
}
enum Type {
	int;
	bigInt;
	boolean;
	byteArray;
	date;
	double;
	varchar;
	undefined;
}
class DataBase extends NamedElement {
	reference Table[1..*] tables;
}
class Table extends NamedElement {
	reference PrimaryKey[0..1] primaryKey;
	reference ForeignKey[0..*] foreignKeys;
	reference Field[1..*] fields;
	reference Constraint[0..*] constraints;
	reference DataBase[1..1] database;
}
class PrimaryKey extends NamedElement {
	reference Field[1..*] primaryFields;
	reference Table[0..1] table;
}
class ForeignKey extends NamedElement {
	reference Field[0..*] foreignFields;
	reference Table[0..1] table;
	reference PrimaryKey[1..1] refersTo;
}
class Field extends NamedElement {
	attribute EBoolean[0..1] notNull;
	attribute EBoolean[0..1] unique;
	attribute Type[0..1] type;
	attribute EBoolean[0..1] autoIcrement;
	reference Table[1..1] table;
	attribute EInt[0..1] size;
	attribute EString[0..1] defaultValue;
	attribute EString[0..1] specificType;
}
class Check extends Constraint {
	attribute EString[0..1] expression;
}
class Unique extends Constraint {
}
abstract class Constraint {
	reference Field[1..*] constrainedFields;
}
",13660,yes,yes,yes
60865,GenFeatures that have the notify property set to true,"pattern genFeatureWithNotify(genFeature : GenFeature) {
    GenFeature.notify(genFeature, true);
}",repo-ecore-all/data/bmaggi/Topcased/plugins/generators/configurators/genmodel/GenModel.ecore,"class GenModel extends GenBase {
	attribute EString[0..1] copyrightText;
	attribute EString[0..1] modelDirectory;
	attribute EBoolean[0..1] creationCommands;
	attribute EString[0..1] editDirectory;
	attribute EString[0..1] editorDirectory;
	attribute EString[0..1] modelPluginID;
	attribute EString[0..1] templateDirectory;
	attribute EBoolean[0..1] runtimeJar;
	attribute EString[0..*] foreignModel;
	attribute EBoolean[0..1] dynamicTemplates;
	attribute EString[0..1] redirection;
	attribute EBoolean[0..1] forceOverwrite;
	attribute EString[0..1] nonExternalizedStringTag;
	attribute EString[0..1] modelName;
	attribute EString[0..1] modelPluginClass;
	attribute EString[0..1] editPluginClass;
	attribute EString[0..1] editorPluginClass;
	attribute EBoolean[0..1] updateClasspath;
	attribute EBoolean[0..1] generateSchema;
	attribute EBoolean[0..1] nonNLSMarkers;
	attribute EString[0..*] staticPackages;
	attribute EString[0..*] modelPluginVariables;
	attribute EString[0..1] rootExtendsInterface;
	attribute EString[0..1] rootExtendsClass;
	attribute EString[0..1] rootImplementsInterface;
	attribute EBoolean[0..1] suppressEMFTypes;
	attribute EString[0..1] featureMapWrapperInterface;
	attribute EString[0..1] featureMapWrapperInternalInterface;
	attribute EString[0..1] featureMapWrapperClass;
	attribute EBoolean[0..1] runtimeCompatibility;
	attribute EBoolean[0..1] richClientPlatform;
	attribute EBoolean[0..1] reflectiveDelegation;
	attribute EBoolean[0..1] codeFormatting;
	attribute EString[0..1] testsDirectory;
	attribute EString[0..1] testSuiteClass;
	attribute EString[0..1] booleanFlagsField;
	attribute EInt[0..1] booleanFlagsReservedBits;
	reference GenPackage[0..*] genPackages;
	reference GenPackage[0..*] usedGenPackages;
}
class GenPackage extends GenBase {
	attribute EString[0..1] prefix;
	attribute EString[0..1] basePackage;
	attribute GenResourceKind[0..1] resource;
	attribute EBoolean[0..1] disposableProviderFactory;
	attribute EBoolean[0..1] adapterFactory;
	attribute EBoolean[0..1] loadInitialization;
	reference EPackage[1..1] ecorePackage;
	reference GenModel[1..1] genModel;
	reference GenEnum[0..*] genEnums;
	reference GenDataType[0..*] genDataTypes;
	reference GenClass[0..*] genClasses;
	reference GenPackage[0..*] nestedGenPackages;
	reference GenClassifier[0..*] genClassifiers;
}
class GenClass extends GenClassifier {
	attribute GenProviderKind[0..1] provider;
	attribute EBoolean[0..1] image;
	reference EClass[1..1] ecoreClass;
	reference GenFeature[0..*] genFeatures;
	reference GenOperation[0..*] genOperations;
	reference GenFeature[0..1] labelFeature;
}
class GenFeature extends GenBase {
	attribute GenPropertyKind[0..1] property;
	attribute EBoolean[0..1] notify;
	attribute EBoolean[0..1] children;
	attribute EBoolean[0..1] createChild;
	reference GenClass[1..1] genClass;
	reference EStructuralFeature[1..1] ecoreFeature;
}
abstract class GenBase {
}
class GenEnum extends GenDataType {
	reference EEnum[1..1] ecoreEnum;
	reference GenEnumLiteral[0..*] genEnumLiterals;
}
class GenEnumLiteral extends GenBase {
	reference GenEnum[1..1] genEnum;
	reference EEnumLiteral[1..1] ecoreEnumLiteral;
}
abstract class GenClassifier extends GenBase {
	reference GenPackage[1..1] genPackage;
}
class GenDataType extends GenClassifier {
	reference EDataType[1..1] ecoreDataType;
}
class GenOperation extends GenBase {
	reference GenClass[1..1] genClass;
	reference EOperation[1..1] ecoreOperation;
	reference GenParameter[0..*] genParameters;
}
class GenParameter extends GenBase {
	reference GenOperation[1..1] genOperation;
	reference EParameter[1..1] ecoreParameter;
}
enum GenProviderKind {
	Singleton;
	Stateful;
	None;
}
enum GenPropertyKind {
	Editable;
	Readonly;
	None;
}
enum GenResourceKind {
	None;
	Basic;
	XMI;
	XML;
}
",20774,yes,yes,yes
47108,All squares that have a widget assigned to them,"pattern squaresWithWidget(square: Square){
    Square.widget(square, _);
}",repo-ecore-all/data/pitch-sands/Website/de.tu_bs.cs.isf.mbse.website/model/Website.ecore,"class Website {
	attribute EString[0..1] name;
	reference Widget[0..*] widgets;
}
class Widget {
	attribute EString[0..1] name;
	attribute EInt[0..1] row;
	attribute EDouble[0..1] width;
	attribute EDouble[0..1] height;
	attribute EInt[0..1] column;
	reference Square[1..1] square;
}
class TextBox extends Widget {
	attribute EString[0..1] content;
}
class ImageBox extends Widget {
	attribute EString[0..1] source;
}
class ButtonBox extends Widget {
	attribute EString[0..1] content;
	attribute EString[0..1] link;
}
class SearchBox extends Widget {
}
class MenuitemBox extends Widget {
	attribute EString[0..1] content;
	attribute EString[0..1] link;
}
class Board {
	reference Square[64..64] squares;
	reference Widget[0..64] widgets;
}
class Square {
	attribute EInt[0..1] index;
	attribute Files[0..1] file;
	attribute Ranks[0..1] rank;
	attribute Color[0..1] color;
	reference Widget[0..1] widget;
}
enum Files {
	none;
	A;
	B;
	C;
	D;
	E;
	F;
	G;
	H;
}
enum Ranks {
	none;
	A;
	B;
	C;
	D;
	E;
	F;
	G;
	H;
}
enum Color {
	white;
	blue;
	none;
}
",7017,yes,yes,yes
62365,Variables with their types,"pattern variableWithType(variable : Variable, type : Type) {
    Variable.variableType(variable, type);
}",repo-ecore-all/data/DemidovAlexander/Xtext_MiniJava_IDE/demidov.projects.minijava.parent/demidov.projects.minijava/model/generated/MiniJava.ecore,"class Program {
	reference ClassDecl[0..*] classDeclarations;
}
class ClassDecl {
	attribute EString[0..1] name;
	reference MainMethod[0..1] mainMethod;
	reference ClassDecl[0..1] extendedClass;
	reference VarDeclaration[0..*] varDeclarations;
	reference Method[0..*] methodDeclarations;
}
class MainMethod {
	reference Statement[0..1] statement;
}
class Type {
	attribute EString[0..1] typeName;
	reference ClassDecl[0..1] classDecl;
}
class VarDeclaration {
	reference Variable[0..1] variable;
}
class Variable {
	reference Type[0..1] variableType;
	attribute EString[0..1] name;
}
class Method {
	reference Type[0..1] methodType;
	attribute EString[0..1] name;
	reference Variable[0..*] formalVarDeclarations;
	reference VarDeclaration[0..*] localVarDeclarations;
	reference Statement[0..*] statements;
	reference Expr[0..1] returnExpression;
}
class Statement {
	attribute EString[0..1] statementType;
	reference Statement[0..*] statements;
	reference Expr[0..1] firstExpression;
	reference Variable[0..1] variable;
	attribute EBoolean[0..1] isArrayElementAssignment;
	reference Expr[0..1] secondExpression;
}
class Expr {
	attribute EString[0..1] expressionType;
	reference Expr[0..1] right;
	reference Expr[0..1] expression;
	reference Type[0..1] type;
	reference Variable[0..1] variable;
	reference NumberValue[0..1] number;
	reference MethodCall[0..1] methodCall;
	reference Expr[0..1] left;
}
class MethodCall {
	reference Method[0..1] method;
	reference Expr[0..*] parameters;
}
class NumberValue {
	attribute EInt[0..1] value;
}
class Expression extends Expr {
}
class Addition extends Expr {
}
class Multiplication extends Expr {
}
class Point extends Expr {
}
class SquareBrackets extends Expr {
}
",22274,yes,yes,yes
54917,Views with at least 2 controllers.,"pattern viewWith2OrMoreControllers(view: View) {
    cnt == count find controllersInView(view, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern controllersInView(view: View, controller: Controller){
    View.controllers(view, controller);
}",repo-ecore-all/data/despinalr/VehicleTaxMCT/metamodels/Arch.ecore,"class Application {
	attribute EString[0..1] name;
	reference FrontEnd[1..1] frontend;
	reference BackEnd[1..1] backend;
}
class FrontEnd {
	attribute EString[0..1] name;
	reference View[0..*] views;
	reference Controller[0..*] controllers;
}
class BackEnd {
	attribute EString[0..1] name;
	reference Service[0..*] services;
	reference Logic[0..*] logics;
	reference Entity[0..*] entities;
}
class View {
	attribute EString[0..1] name;
	reference GraphicControl[0..*] graphicControls;
	reference Controller[0..*] controllers;
}
class Controller {
	attribute EString[0..1] name;
	reference View[0..*] views;
	reference Event[0..*] events;
}
class Service {
	attribute EString[0..1] name;
	reference Method[0..*] methods;
}
class Logic {
	attribute EString[0..1] name;
	reference Method[0..*] methods;
}
class Entity {
	attribute EString[0..1] name;
	reference Attribute[0..*] attributes;
	reference Method[0..*] methods;
}
class Attribute {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
}
class Method {
	attribute EString[0..1] name;
	attribute EString[0..1] returntype;
	reference Parameter[0..*] parameters;
}
abstract class GraphicControl {
	attribute EString[0..1] name;
	reference Event[0..*] events;
}
class Event {
	attribute EString[0..1] name;
}
class Parameter {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
}
class Label extends GraphicControl {
	attribute EString[0..1] text;
}
class TextBox extends GraphicControl {
	attribute EString[0..1] type;
}
class Div extends GraphicControl {
	reference GraphicControl[0..*] graphicControls;
}
class DropDownList extends GraphicControl {
	attribute EString[0..*] items;
}
",14826,yes,yes,yes
58523,Get all parameters that are either PositionFParameter or have a value of type EBooleanObject,"pattern positionFOrBooleanParameter(parameter: Parameter){
    PositionFParameter(parameter);
} or {
    BooleanParameter(parameter);
}",repo-ecore-all/data/Ealrann/Lily-core/org.sheepy.lily.core.model/model/types.ecore,"abstract class LNamedElement {
	attribute EString[0..1] name;
}
abstract class Parameter {
}
abstract class PositionParameter extends Parameter {
}
abstract class PositionFParameter extends Parameter {
}
abstract class NativeParameter extends Parameter {
}
class FloatParameter {
	attribute EFloat[0..1] value;
}
class StringParameter {
	attribute EString[0..1] value;
}
class BooleanParameter {
	attribute EBooleanObject[0..1] value;
}
enum ENotificationDirection {
	Parent;
	Children;
	Self;
	All;
}
enum EMoveState {
	START_MOVING;
	STOP_MOVING;
}
enum EDirection {
	UP;
	LEFT;
	RIGHT;
	DOWN;
}
enum ETimeUnit {
	NANOSECONDS;
	MICROSECONDS;
	MILLISECONDS;
	SECONDS;
	MINUTES;
	HOURS;
	DAYS;
}
enum ENumberComparisonType {
	Equal;
	InfOrEqual;
	SupOrEqual;
	Inf;
	Sup;
}
enum ERelative {
	HORIZONTAL;
	VERTICAL;
}
enum EVerticalRelative {
	BOTTOM;
	MIDDLE;
	TOP;
}
enum EHorizontalRelative {
	LEFT;
	MIDDLE;
	RIGHT;
}
enum EMouseButton {
	RIGHT;
	LEFT;
	MIDDLE;
	_4;
	_5;
	_6;
	_7;
	_8;
}
enum EKeyState {
	RELEASED;
	PRESSED;
	REPEATED;
}
enum ECharTable {
	Base;
	Extended;
	Chinese;
}
",18432,no,no,no
49932,Columns that have more than one field,"pattern columnWithMultipleFields(column : Column) {
    Column.fields(column, field1);
    Column.fields(column, field2);
    field1 != field2;
}",repo-ecore-all/data/MISO-MDE/PILA/Unified/segundainstancia/PaymentStaticModel/metamodel/MM_PILA_FrontEnd.ecore,"class Application {
	reference View[1..*] views;
}
class View {
	attribute EString[0..1] name;
	attribute EString[0..1] url;
	reference Form[0..1] form;
	reference Grid[0..1] grid;
	reference Service[1..*] services;
}
class Form {
	attribute EString[0..1] name;
	reference Field[1..*] fields;
}
class Grid {
	attribute EString[0..1] name;
	reference Column[0..*] columns;
}
class Column {
	attribute EString[0..1] name;
	attribute EString[0..1] url;
	reference Field[1..*] fields;
}
abstract class Field {
	attribute EString[0..1] name;
}
class Input extends Field {
	attribute EString[0..1] value;
}
class Date extends Field {
	attribute EDate[0..1] value;
}
class Select extends Field {
	attribute EString[0..1] value;
}
abstract class Action extends Field {
	attribute EString[0..1] value;
	reference Service[1..1] service;
}
class Service {
	attribute EString[0..1] name;
	attribute EString[0..1] url;
}
class CreateAction extends Action {
}
class ReadAction extends Action {
}
class UpdateAction extends Action {
}
class DeleteAction extends Action {
}
class CancelAction extends Action {
}
",9841,yes,yes,yes
46696,All bindings that are simple:,"pattern simpleBindings(binding: Binding){
    Binding.kind(binding, BindingKind::simple);
}",repo-ecore-all/data/ctiber/clacs/GCLACS/model/gclacs.ecore,"class Document_Root {
	reference ComponentInstance[1..1] componentInstance;
}
enum BindingKind {
	simple;
	delegation;
	constraintConnection;
	contractConnection;
}
enum ComponentKind {
	business;
	constraint;
	contract;
}
enum Visibility {
	internal;
	external;
}
class Interface {
	attribute EString[0..1] name;
	reference Services[0..*] service;
}
class ComponentInstance {
	attribute EString[0..1] name;
	reference Interface[0..*] interface;
	reference ComponentInstance[0..*] componentInstance;
	reference Port[1..*] port;
	reference Binding[0..*] binding;
	attribute ComponentKind[0..1] kind;
	attribute EInt[0..1] width;
	attribute EInt[0..1] height;
	attribute EString[1..1] defineByDescriptor;
}
class Services {
	attribute EString[0..1] name;
	attribute ServiceKind[0..1] kind;
	reference Arg[0..*] arg;
	reference BodyType[0..1] body;
	attribute EString[0..1] returnedType;
}
class Port {
	attribute EString[0..1] name;
	attribute Visibility[0..1] visibility;
	attribute EInt[0..1] xp;
	attribute EInt[0..1] yp;
	reference DefineByInterface[1..1] defineByInterface;
}
class RequiredPort extends Port {
}
class Binding {
	attribute BindingKind[0..1] kind;
	attribute EBoolean[0..1] glue;
	reference Port[1..1] source;
	reference Port[1..1] target;
	attribute EString[0..1] name;
	attribute EString[0..1] usedServiceName;
	attribute EString[0..1] usedServiceArgs;
}
class ProvidedPort extends Port {
}
class DefineByInterface {
	reference Interface[1..1] Interface;
	reference Port[1..1] port;
}
enum ServiceKind {
	business;
	constraintCheck;
	contractCheck;
}
class Arg {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
}
class BodyType {
	attribute EString[0..1] value;
	attribute EString[0..1] language;
}
",6605,yes,yes,yes
48165,Properties with their titles,"pattern propertyWithTitle(prop : Prop, title : Title) {
    Prop.title(prop, title);
}",repo-ecore-all/data/carentsen/SM2-MSD/ExternalDSL-Laptio/dk.mmmi.sdu.mdsd.forms/model/generated/MyForm.ecore,"class FormModel {
	reference Title[0..1] title;
	reference Target[0..1] target;
	reference Prop[0..*] properties;
	reference Submit[0..*] submit;
}
class Prop {
	attribute EString[0..1] name;
	reference Title[0..1] title;
}
class Input extends Prop {
	attribute Type[0..1] type;
	reference Validation[0..*] validate;
	reference Class[0..1] class;
}
class Dropdown extends Prop {
	reference Variable[0..*] variables;
	reference Class[0..1] class;
}
class Checkbox extends Prop {
	reference Variable[0..*] variables;
	reference Class[0..1] Class;
}
class Submit {
	attribute EString[0..1] name;
	reference Title[0..1] title;
	reference Class[0..1] class;
	reference Target[0..1] target;
}
class Title {
	attribute EString[0..1] value;
}
class Variable {
	attribute EString[0..1] name;
}
class Term extends Expression {
	attribute EInt[0..1] value;
}
enum Type {
	TEXT;
	EMAIL;
	NUMBER;
	PASSWORD;
}
class Class {
	attribute EString[0..1] value;
}
class Target {
	attribute EString[0..1] value;
}
class Expression {
}
class Validation {
	reference Expression[0..1] expression;
	reference Condition[0..1] condition;
}
class Condition {
	attribute EString[0..1] variable;
	reference Prop[0..1] property;
}
class Length extends Term {
}
class OrExpression extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class AndExpression extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class LogicalExpression extends Expression {
	reference Term[0..1] left;
	attribute EString[0..1] operator;
	reference Term[0..1] right;
}
",8074,yes,yes,yes
54924,BackEnd with the highest number of logics.,"pattern backendWithMostLogics(backend: BackEnd, maxlogics: java Integer) {
    maxlogics == max find countLogicsInBackend(_, #);
    find countLogicsInBackend(backend, current);
    current == maxlogics;
}	

//auxiliary pattern
pattern countLogicsInBackend(backend : BackEnd, cnt: java Integer) {
    cnt == count find logicsInBackend(backend, _);
}

//auxiliary pattern
pattern logicsInBackend(backend: BackEnd, logic: Logic){
    BackEnd.logics(backend, logic);
}",repo-ecore-all/data/despinalr/VehicleTaxMCT/metamodels/Arch.ecore,"class Application {
	attribute EString[0..1] name;
	reference FrontEnd[1..1] frontend;
	reference BackEnd[1..1] backend;
}
class FrontEnd {
	attribute EString[0..1] name;
	reference View[0..*] views;
	reference Controller[0..*] controllers;
}
class BackEnd {
	attribute EString[0..1] name;
	reference Service[0..*] services;
	reference Logic[0..*] logics;
	reference Entity[0..*] entities;
}
class View {
	attribute EString[0..1] name;
	reference GraphicControl[0..*] graphicControls;
	reference Controller[0..*] controllers;
}
class Controller {
	attribute EString[0..1] name;
	reference View[0..*] views;
	reference Event[0..*] events;
}
class Service {
	attribute EString[0..1] name;
	reference Method[0..*] methods;
}
class Logic {
	attribute EString[0..1] name;
	reference Method[0..*] methods;
}
class Entity {
	attribute EString[0..1] name;
	reference Attribute[0..*] attributes;
	reference Method[0..*] methods;
}
class Attribute {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
}
class Method {
	attribute EString[0..1] name;
	attribute EString[0..1] returntype;
	reference Parameter[0..*] parameters;
}
abstract class GraphicControl {
	attribute EString[0..1] name;
	reference Event[0..*] events;
}
class Event {
	attribute EString[0..1] name;
}
class Parameter {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
}
class Label extends GraphicControl {
	attribute EString[0..1] text;
}
class TextBox extends GraphicControl {
	attribute EString[0..1] type;
}
class Div extends GraphicControl {
	reference GraphicControl[0..*] graphicControls;
}
class DropDownList extends GraphicControl {
	attribute EString[0..*] items;
}
",14833,yes,yes,yes
43670,Get the number of diagrams.,"pattern countDiagrams(cnt: java Integer){
    cnt == count find diagram(_);
}

//Auxiliary pattern
pattern diagram(diagram: Diagram){
    Diagram(diagram);
}",repo-ecore-all/data/jesusc/bento/plugins-sirius/bento.sirius.odesign.generator/outputs/generated-free_new.ecore,"class Node extends NamedElement, BindingElement {
	reference Link[0..1] linkin;
	reference Link[0..1] linkout;
	reference nameNode[0..1] containsnameNode;
}
class Link extends NamedElement, BindingElement {
	reference Node[0..1] nodetarget;
	reference Node[0..1] nodesource;
	reference nameLink[0..1] containsnameLink;
}
class Diagram extends NamedElement {
	reference Node[0..*] node;
	reference Link[0..*] link;
	reference MetamodelElement[0..*] containsMetamodelElement;
	reference IntemediateElement[0..*] containsIntermediateElement;
	reference FeatureClass[0..*] containsFeatureClass;
	reference FeatureClass[0..*] containsMetamodelElementFeature;
}
abstract class NamedElement {
	attribute EString[0..1] name;
}
class nameNode extends FeatureClass {
	attribute EString[0..1] value;
}
class nameLink extends FeatureClass {
	attribute EString[0..1] value;
}
abstract class BindingElement {
}
class MetamodelElement {
	attribute EString[0..1] name;
	reference MetamodelElementFeature[0..*] metamodelElementFeature;
}
class IntemediateElement {
	reference BindingElement[1..1] bindingElement;
	reference MetamodelElement[1..1] metamodElelement;
}
class MetamodelElementFeature {
	attribute EString[0..1] name;
	reference FeatureClass[0..*] featureClass;
}
abstract class FeatureClass {
}
",3579,yes,yes,yes
45954,Give me all bindings with the same source or same target,"pattern sameSourceOrTargetBinding(binding1: Binding, binding2: Binding){
    Binding.src(binding1,source);
    Binding.src(binding2,source);
} or {
    Binding.trg(binding1,target);
    Binding.trg(binding2,target);
}",repo-ecore-all/data/francoispfister/diagraph/org.isoe.fwk.megamodel.deploy/repository-bundle/error3.ecore,"class World {
	reference Thing[0..*] things;
}
class Thing extends NamedElement {
	attribute EInt[0..1] id;
	reference RelatedTo[0..*] relations;
}
abstract class NamedElement {
	attribute EString[0..1] name;
}
class RelatedTo extends NamedElement {
	reference Thing[0..1] fromThing;
	reference Thing[0..1] toThing;
	attribute EString[0..1] since;
}
class Required {
	attribute EString[0..1] ir;
	reference Binding[0..*] bindings;
}
class Binding {
	attribute EString[0..1] type;
	reference Required[0..1] src;
	reference Provided[0..1] trg;
}
class Provided {
	attribute EString[0..1] ip;
}
class AbstractComponent {
	attribute EString[0..1] name;
	reference Required[0..*] requiredInterfaces;
	reference Provided[0..*] providedInterfaces;
}
class Level2 extends AbstractComponent {
}
class NestedComponent extends AbstractComponent {
	reference Level2[0..*] levels2;
}
class RecursiveComponen extends AbstractComponent {
	reference NestedComponent[0..*] levels1;
	reference Bazbar[0..*] bazbars;
	reference RecursiveComponen[0..*] components;
}
class Bazbar {
	attribute EString[0..1] b;
}
",5863,no,spec,no
62169,RAM components with clock speed and size specified.,"pattern ramWithClockSpeedAndSize(ram: RAM){
    RAM.clockSpeed(ram, _);
    RAM.size(ram, _);
}",repo-ecore-all/data/eclipse-emfcloud/emfcloud-modelserver-theia/example/workspace/Coffee.ecore,"abstract class Component {
	reference Component[0..*] children;
	reference Component[0..1] parent;
}
class Machine extends Component {
	attribute EString[1..1] name;
	reference Workflow[0..*] workflows;
}
class ControlUnit extends Component {
	reference Processor[1..1] processor;
	reference Dimension[1..1] dimension;
	reference RAM[1..*] ram;
	reference Display[0..1] display;
	attribute EString[0..1] userDescription;
}
class BrewingUnit extends Component {
}
class DipTray extends Component {
}
class WaterTank extends Component {
}
class Processor {
	attribute EString[0..1] vendor;
	attribute EInt[0..1] clockSpeed;
	attribute EInt[0..1] numberOfCores;
	attribute SocketConnectorType[0..1] socketconnectorType;
	attribute EInt[0..1] thermalDesignPower;
	attribute ManufactoringProcess[0..1] manufactoringProcess;
}
enum SocketConnectorType {
	A1T;
	Z51;
}
enum ManufactoringProcess {
	nm18;
	nm25;
}
class Dimension {
	attribute EInt[0..1] width;
	attribute EInt[0..1] height;
	attribute EInt[0..1] length;
}
class RAM {
	attribute EInt[0..1] clockSpeed;
	attribute EInt[0..1] size;
	attribute RamType[0..1] type;
}
enum RamType {
	SODIMM;
	SIDIMM;
}
class Display {
	attribute EInt[0..1] width;
	attribute EInt[0..1] height;
}
class Workflow {
	reference Node[0..*] nodes;
	reference Flow[0..*] flows;
}
abstract class Node {
}
abstract class Task extends Node {
	attribute EString[1..1] name;
	attribute EInt[0..1] duration;
}
class AutomaticTask extends Task {
	reference Component[0..1] component;
}
class ManualTask extends Task {
	attribute EString[0..1] actor;
}
class Fork extends Node {
}
class Join extends Node {
}
class Decision extends Node {
}
class Merge extends Node {
}
class Flow {
	reference Node[1..1] source;
	reference Node[1..1] target;
}
class WeightedFlow extends Flow {
	attribute EDouble[0..1] probability;
}
",22078,yes,yes,yes
54219,Intervals with their tasks,"pattern intervalWithTask(interval : Interval, task : Task) {
    Interval.task(interval, task);
}",repo-ecore-all/data/KristinaBekker/PerformanceDeveloper-stool/com.kristina.performance.model/User.ecore,"class User {
	reference Task[0..*] tasks;
	attribute EString[0..1] name;
	attribute EDate[0..1] dateStart;
	attribute EDate[0..1] dateEnd;
	attribute EDate[0..1] currentDate;
	reference Parameters[0..1] parameters;
	reference Interval[0..*] intervals;
	attribute EString[0..1] descriptoin;
}
class Task {
	attribute EString[0..1] name;
	attribute EString[0..1] status;
	attribute EDate[0..1] dateStart;
	attribute EDate[0..1] dateEnd;
	attribute EDate[0..1] currentDate;
	attribute EString[0..1] description;
	reference Task[0..*] subtasks;
	reference Parameters[0..1] parameters;
}
class Parameters {
	attribute EDouble[0..1] timePassive;
	attribute EDouble[0..1] timeActive;
	attribute EDouble[0..1] typingSpeed;
	attribute EInt[0..1] numberOfCharacters;
	attribute EInt[0..1] countSavedEditing;
	attribute EInt[0..1] numberOfSwitches;
	attribute EInt[0..1] errorsCount;
	attribute EDouble[0..1] timeToCorrectionErrors;
	attribute EInt[0..1] typoCount;
}
class Interval {
	attribute EDate[0..1] start;
	attribute EDate[0..1] end;
	reference Parameters[0..1] parameter;
	reference Task[0..1] task;
}
class Performance {
	reference User[0..1] Users;
}
",14128,yes,yes,yes
46637,All pages that have a form with a specific action,"pattern pageWithFormAction(page: Page, action : EString){
    Form.action(_, action);
    Page.formulaire(page, _);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/MetaWebModel.ecore,"class WebSite {
	reference Controller[1..*] controllers;
	reference Model[1..*] models;
	reference View[1..*] vues;
	attribute EString[0..1] name;
}
class Controller {
	reference View[1..*] controledViews;
	reference Model[0..1] model;
}
class View {
	reference Model[1..*] model;
	reference Page[1..*] pages;
}
class Model {
	reference DAO[1..*] dao;
}
class DAO {
	reference DataBase[1..*] dataBase;
	reference Entity[1..*] managedEntities;
}
class DataBase {
	reference SQLTable[1..*] tables;
	attribute EString[0..1] name;
	attribute EString[0..1] url;
	attribute EString[0..1] userName;
	attribute EString[0..1] password;
}
class Entity extends DataType {
	reference EntityAtribute[0..*] atributes;
}
class SQLTable {
	reference Row[0..*] Rows;
	reference Column[1..*] columns;
	attribute EString[0..1] name;
}
class Row {
	reference Data[1..*] content;
}
class Column {
	attribute EString[0..1] Type;
	attribute EString[0..1] Nom;
}
class Data {
	reference Column[1..1] column;
	attribute EString[1..1] value;
}
class Page {
	reference Form[1..*] formulaire;
	reference Content[0..1] htmlContent;
	attribute EString[0..1] head;
	reference CSS[0..*] css;
	attribute EString[0..1] name;
}
class Form {
	reference Field[1..*] fields;
	attribute EString[0..1] action;
	attribute Method[0..1] method;
}
class Content {
	attribute EString[0..1] htmlText;
}
class Field {
	reference Input[0..1] input;
	reference Label[0..1] label;
}
class Input {
	attribute InputType[0..1] inputType;
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
enum InputType {
	Submit;
	CheckBox;
	RadioButton;
	Select;
	Option;
	TextArea;
	Password;
	Email;
	Reset;
	Text;
}
class Label {
	attribute EString[0..1] value;
}
class CSS {
	attribute EString[0..1] content;
}
enum Method {
	POST;
	GET;
	PUT;
}
enum SQLDataType {
}
class EntityAtribute {
	attribute EString[0..1] name;
	reference DataType[1..1] type;
}
class DataType {
	attribute EString[0..1] nom;
}
",6546,no,no,no
55341,Check if there are any trigger descriptions in the model.,"pattern hasTriggerDescriptions(){
    find triggerDesc(_);
}

//Auxiliary pattern
pattern triggerDesc(trigger: TriggerDesc){
    TriggerDesc(trigger);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/descriptor.ecore,"class DescriptorLibrary extends NamedElement {
	reference Classifier[0..*] buildingBlocks;
}
class TriggerDesc extends BuildingBlockDesc {
}
class ConditionDesc extends BuildingBlockDesc {
}
class ConditionalStepDesc extends StepDesc {
}
class DomainObjectDesc extends Classifier {
	attribute EString[0..1] contentURI;
	attribute EString[0..1] projection;
	attribute EString[0..1] selection;
	attribute EString[0..1] selectionArgs;
	attribute EString[0..1] sortOrder;
}
class QueryDesc extends BuildingBlockDesc {
}
abstract class BuildingBlockDesc extends Classifier {
	reference Property[0..*] properties;
	attribute EString[0..1] iconUrl;
}
class Property extends NamedElement {
	attribute EBoolean[1..1] canReferToOther;
	attribute EBoolean[1..1] canBeReferedTo;
	attribute EBoolean[0..1] isResultValue;
	reference Value[0..*] allowedValues;
	reference Classifier[1..1] dataType;
	attribute EInt[0..1] lowerBound;
	attribute EInt[0..1] upperBound;
}
class Value {
	attribute EString[1..1] name;
}
class StepDesc extends BuildingBlockDesc {
}
abstract class Classifier extends NamedElement {
}
class NamedElement {
	attribute EString[0..1] name;
	attribute EString[0..1] userFriendlyName;
	attribute EString[0..1] description;
}
class DataType extends Classifier {
}
",15250,ok,yes,ok
61203,Get all participants with at least 2 outbound endpoints.,"pattern participantWith2OrMoreOutboundEndpoints(participant: ParticipantStatement){
    cnt == count find outboundEndpoints(participant, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern outboundEndpoints(participant: ParticipantStatement, outbound: OutboundEndpointDef){
    ParticipantStatement.outbounds(participant, outbound);
}",repo-ecore-all/data/maheeka/esbxtext/com.wso2.esb.dsl/model/generated/EsbDsl.ecore,"class Model {
	attribute EString[0..1] integrationFlowName;
	reference ParticipantStatement[0..*] participants;
	reference Statement[0..*] statements;
}
class Statement {
}
class MediatorStatement extends Statement {
	attribute MediatorType[0..1] mediatorStatement;
	attribute EString[0..1] config;
}
class ProcessingStatement {
	attribute EString[0..1] name;
	attribute EString[0..1] configs;
}
class RoutingStatement extends Statement {
	attribute EString[0..1] source;
	attribute EString[0..1] target;
	attribute EString[0..1] action;
}
class ParallelStatement extends Statement {
	reference Statement[0..*] parstatements;
	reference Statement[0..*] elsestatements;
}
class IfStatement extends Statement {
	attribute EString[0..1] routeId;
	attribute EString[0..1] transport;
	attribute EString[0..1] pattern;
	reference Statement[0..*] altstatements;
	reference Statement[0..*] elsestatements;
}
class LoopStatement extends Statement {
	attribute EString[0..1] name;
}
class GroupStatement extends Statement {
	attribute EString[0..1] name;
}
class RefStatement extends Statement {
	attribute EString[0..1] name;
}
class ParticipantStatement {
	attribute EString[0..1] name;
	attribute ParticipantType[0..1] participantType;
	attribute EString[0..1] description;
	reference OutboundEndpointDef[0..1] outbounds;
	reference InboundEndpointDef[0..1] inbounds;
}
class OutboundEndpointDef {
	attribute EString[0..1] protocol;
	attribute EString[0..1] host;
}
class InboundEndpointDef {
	attribute EString[0..1] protocol;
	attribute EInt[0..1] port;
	attribute EString[0..1] context;
}
enum ParticipantType {
	INTEGRATIONFLOW;
	INBOUNDENDPOINT;
	OUTBOUNDENDPOINT;
	PIPELINE;
}
enum MediatorType {
	LOG;
	CALL;
	RESPOND;
	FILTER;
	TRANSFORM;
	ENRICH;
	EXTERNAL;
}
",21112,yes,spec,yes
57198,Feature types with deprecated elements.,"pattern featureTypeWithDeprecatedElements(featureType: FeatureType, deprecatedElement: DeprecatableElement) {
    FeatureType.parameters(featureType, parameter);
    DeprecatableElement.deprecated(deprecatedElement, true);
}",repo-ecore-all/data/Yakindu/statecharts/plugins/org.yakindu.sct.model.sgen/model/emf/sgen.ecore,"class GeneratorModel {
	reference GeneratorEntry[0..*] entries;
	attribute EString[0..1] generatorId;
	reference Property[0..*] properties;
}
class GeneratorConfiguration {
	reference FeatureConfiguration[0..*] configurations;
}
class FeatureType extends NamedElement, DeprecatableElement {
	reference FeatureParameter[0..*] parameters;
	reference FeatureTypeLibrary[1..1] library;
	attribute EBoolean[0..1] optional;
}
class FeatureParameter extends NamedElement, DeprecatableElement {
	reference FeatureType[0..1] featureType;
	attribute EBoolean[0..1] optional;
	attribute ParameterTypes[0..1] parameterType;
}
class FeatureConfiguration {
	reference FeatureType[0..1] type;
	reference FeatureParameterValue[0..*] parameterValues;
}
class GeneratorEntry {
	reference EObject[0..1] elementRef;
	reference FeatureConfiguration[0..*] features;
	attribute EString[0..1] contentType;
}
class FeatureParameterValue {
	reference FeatureParameter[0..1] parameter;
	reference FeatureConfiguration[0..1] featureConfiguration;
	reference Expression[0..1] expression;
}
class FeatureTypeLibrary {
	reference FeatureType[0..*] types;
	attribute EString[0..1] name;
}
enum ParameterTypes {
	STRING;
	FLOAT;
	BOOLEAN;
	INTEGER;
}
class DeprecatableElement {
	attribute EBoolean[1..1] deprecated;
	attribute EString[0..1] comment;
}
",17107,no,no,no
52261,All signals that control at least one route,"pattern signalControlsRoute(signal: Signal){
    Signal.controlsRoutes(signal, _);
}",repo-ecore-all/data/CSP-B/OnTrack/Bjoerner_Generator/models/BjoernerComplete.ecore,"class Node {
	reference Unit[0..*] hasUnits;
}
class Unit {
	reference Connector[1..1] hasC1;
	reference Connector[1..1] hasC2;
	attribute EString[0..1] name;
	attribute EInt[1..1] length;
}
class Track extends Unit {
	reference Signal[0..2] hasSignals;
	reference Signal[0..2] hasSignal;
	reference Direction[1..2] hasTrackDirection;
}
class Point extends Unit {
	attribute EString[0..1] pointName;
	reference Connector[1..1] hasC3_Point;
	reference Direction[2..4] hasPointDirection;
}
class Connector {
	reference Unit[0..1] hasUnit1;
	reference Point[0..2] hasPoint;
	reference Unit[0..1] hasUnit2;
	attribute EString[0..1] ID;
}
class Path {
	reference Connector[1..1] hasPC2;
	reference Connector[1..1] hasPC1;
}
class UnitPathPair {
	reference Path[1..1] hasPath;
	reference Unit[1..1] hasUnit;
}
class Signal {
	reference Route[0..*] controlsRoutes;
	attribute EString[0..1] name;
	reference Track[1..1] placedOnTrack;
	reference Connector[1..1] placedAtConnector;
	reference Track[1..1] placedAt;
	reference Direction[1..1] hasDirection;
}
class Route {
	reference UnitPathPair[0..*] hasUPPs;
	reference Signal[1..1] controlledBySignal;
	attribute EString[0..1] name;
	reference Point[0..*] hasNormalPoints;
	reference Point[0..*] hasReversePoints;
}
class ControlTable {
	reference Route[0..*] hasRoutes;
}
class RailDiagram {
	reference Unit[0..*] hasUnits;
	reference Connector[0..*] hasConnectors;
	reference Signal[0..*] hasSignals;
	reference ControlTable[0..1] hasControlTable;
}
class Crossing extends Unit {
	reference Connector[1..1] hasC3_Crossing;
	reference Connector[1..1] hasC4_Crossing;
	reference Direction[2..4] hasCrossingDirection;
}
class Terminal extends Track {
	reference Signal[1..1] hasTerminalSignal;
}
class Direction {
	reference Connector[2..2] hasConnectors;
}
",12170,yes,yes,yes
63898,Get the number of foreign keys.,"pattern countForeignKeys(cnt: java Integer){
    cnt == count find foreignKey(_);
}

//Auxiliary pattern
pattern foreignKey(fk: ForeignKey){
    ForeignKey(fk);
}",repo-ecore-all/data/LukasSchwarz00/Ecore2Sql/model/SQL.ecore,"abstract class NamedElement extends ModelElement {
	attribute EString[1..1] name;
}
class Table extends NamedElement {
	reference Column[1..*] ownedColumns;
	reference PrimaryKey[0..1] ownedPrimaryKey;
	reference ForeignKey[0..*] ownedForeignKeys;
	reference ForeignKey[0..*] referencingForeignKeys;
	reference Schema[1..1] owningSchema;
}
class Column extends NamedElement, ModelElement {
	reference Table[1..1] owningTable;
	attribute EString[1..1] type;
	reference Key[0..*] keys;
	attribute Property[0..*] properties;
}
abstract class Key extends ModelElement {
	reference Column[1..1] column;
}
class PrimaryKey extends Key {
	reference Table[1..1] owningTable;
}
class ForeignKey extends Key {
	reference Table[1..1] referencedTable;
	reference Table[1..1] owningTable;
	reference Event[0..*] ownedEvents;
}
class Event extends ModelElement {
	attribute Condition[1..1] condition;
	attribute Action[1..1] action;
	reference ForeignKey[1..1] owningForeignKey;
}
enum Condition {
	Delete;
	Update;
}
enum Action {
	Cascade;
	SetNull;
}
enum Property {
	NotNull;
	AutoIncrement;
	Unique;
}
class Schema extends NamedElement {
	reference Table[1..*] ownedTables;
}
abstract class ModelElement {
	reference Annotation[0..*] ownedAnnotations;
}
class Annotation {
	reference ModelElement[1..1] owningModelElement;
	attribute EString[1..1] annotation;
}
",23807,yes,yes,yes
50866,SVGModels with at least two Rechteck elements,"pattern svgModelWithMultipleRechtecks(svgModel : SVGModel, rechteck1 : Rechteck, rechteck2 : Rechteck) {
    SVGModel.elements(svgModel, rechteck1);
    SVGModel.elements(svgModel, rechteck2);
    rechteck1 != rechteck2;
}",repo-ecore-all/data/FunThomas424242/svgd/Plugins/gh.funthomas424242.svgd/metamodel/svgd.ecore,"abstract class NamedElement {
	attribute EString[1..1] name;
}
abstract class Form extends NamedElement {
}
class Rechteck extends Form {
	attribute EFloat[1..1] hoehe;
	attribute EFloat[1..1] breite;
	reference LinienStil[1..1] lineprops;
	reference FlaechenStil[1..1] areaprops;
}
class Kreis extends Form {
	attribute EFloat[1..1] radius;
	reference LinienStil[1..1] lineprops;
	reference FlaechenStil[1..1] areaprops;
}
class SVGModel {
	reference Form[1..*] elements;
	attribute EString[1..1] fileName;
	attribute EFloat[1..1] hoehe;
	attribute EFloat[1..1] breite;
	reference Import[0..1] imports;
	attribute EString[1..1] version;
}
class Linie extends Form {
	attribute EFloat[1..1] x2;
	attribute EFloat[1..1] y2;
	reference LinienStil[1..1] lineprops;
}
enum Linienart {
	durchgezogen;
	gestrichelt;
	gepunktet;
}
class Figure extends Form {
	reference EmbedForm[1..*] forms;
	attribute EFloat[1..1] x;
	attribute EFloat[1..1] y;
}
class Import {
	reference SVGModel[1..*] importedRessource;
}
class EmbedForm {
	attribute EFloat[1..1] x;
	attribute EFloat[1..1] y;
	reference Form[1..1] form;
}
class LinienStil {
	attribute Linienart[0..1] zug;
	attribute EString[0..1] dicke;
	attribute EString[0..1] farbe;
}
class FlaechenStil {
	attribute EString[0..1] fuellung;
	attribute EString[0..1] muster;
}
",10775,ok,yes,ok
55080,All TextBoxes with a specified minimum text length,"pattern textBoxWithMinTextLength(textBox: TextBox){
    TextBox(textBox);
    TextBox.minTextLength(textBox, minTextLength);
    check(minTextLength > 0);
}",repo-ecore-all/data/bdave94/winformcodegen/org.xtext.entityDsl/model/generated/EntityDsl.ecore,"class Domainmodel {
	attribute EString[0..1] applicationName;
	reference Entity[0..*] elements;
}
class Entity {
	attribute EString[0..1] name;
	reference Attribute[0..*] attributes;
}
class Attribute {
	attribute EString[0..1] required;
	attribute EString[0..1] name;
	reference WinFormControlType[0..1] inputType;
	reference Label[0..1] labelText;
}
class DataType {
	attribute EString[0..1] type;
}
class Label {
	attribute EString[0..1] text;
}
class WinFormControlType {
	reference TextBox[0..1] controlType;
	attribute EString[0..1] name;
}
class TrackBar extends WinFormControlType {
	reference DataType[0..1] dataType;
	attribute EInt[0..1] defaultTick;
	attribute EInt[0..1] increment;
	attribute EInt[0..1] denominator;
	attribute EInt[0..1] minimumValue;
	attribute EInt[0..1] maximumValue;
	attribute EString[0..*] stringValues;
}
class Spinner extends WinFormControlType {
	attribute EInt[0..1] defaultValue;
	attribute EInt[0..1] minimumValue;
	attribute EInt[0..1] maximumValue;
}
class RadioButtonGroup extends WinFormControlType {
	reference RadioButton[0..*] buttons;
	reference DataType[0..1] dataType;
}
class RadioButton {
	attribute EString[0..1] text;
}
class CheckBox extends WinFormControlType {
}
class TextBox {
	attribute EString[0..1] name;
	reference DataType[0..1] dataType;
	attribute EInt[0..1] minTextLength;
	attribute EInt[0..1] maxTextLength;
}
class ComboBox extends WinFormControlType {
	reference ComboBoxItem[0..*] items;
	reference DataType[0..1] dataType;
}
class ComboBoxItem {
	attribute EString[0..1] text;
}
",14989,no,no,no
44982,Generalizations where the specific and general classifiers are the same,"pattern selfGeneralization(gen : Generalization) {
    Generalization.specific(gen, classifier);
    Generalization.general(gen, classifier);
}",repo-ecore-all/data/jesusc/bento/examples/evaluation/bento.componetization.atl.examples/tmp_/UML2_effective.ecore,"abstract class Feature extends RedefinableElement {
}
abstract class NamedElement extends Element {
	attribute String[0..1] name;
	attribute VisibilityKind[0..1] visibility;
}
abstract class PackageableElement extends NamedElement, ParameterableElement {
}
class Dependency extends PackageableElement, DirectedRelationship {
	reference NamedElement[1..*] supplier;
}
class Property extends StructuralFeature, ConnectableElement, DeploymentTarget {
}
class Generalization extends DirectedRelationship {
	reference Classifier[1..1] specific;
	reference Classifier[1..1] general;
}
class Class extends EncapsulatedClassifier, BehavioredClassifier {
	reference Operation[0..*] ownedOperation;
	reference Classifier[0..*] nestedClassifier;
}
class Parameter extends ConnectableElement, MultiplicityElement {
}
class Model extends Package {
}
class Operation extends BehavioralFeature, ParameterableElement, TemplateableElement {
}
class Package extends Namespace, PackageableElement, TemplateableElement {
	reference PackageableElement[0..*] packagedElement;
}
abstract class Classifier extends Namespace, RedefinableElement, Type, TemplateableElement {
	reference Generalization[0..*] generalization;
	attribute Boolean[1..1] isAbstract;
}
abstract class BehavioralFeature extends Namespace, Feature {
	reference Behavior[0..*] method;
	reference Parameter[0..*] ownedParameter;
}
abstract class Behavior extends Class {
}
abstract class TypedElement extends NamedElement {
	reference Type[0..1] type;
}
abstract class Type extends PackageableElement {
}
enum VisibilityKind {
	public;
	private;
	protected;
	package;
}
abstract class StructuredClassifier extends Classifier {
	reference Property[0..*] ownedAttribute;
}
abstract class Element extends EModelElement {
}
abstract class EModelElement {
}
abstract class EncapsulatedClassifier extends StructuredClassifier {
}
abstract class Namespace extends NamedElement {
}
abstract class RedefinableElement extends NamedElement {
}
abstract class ParameterableElement extends Element {
}
abstract class TemplateableElement extends Element {
}
abstract class BehavioredClassifier extends Classifier {
}
abstract class DirectedRelationship extends Relationship {
}
abstract class Relationship extends Element {
}
abstract class ConnectableElement extends TypedElement, ParameterableElement {
}
abstract class MultiplicityElement extends Element {
}
abstract class StructuralFeature extends Feature, TypedElement, MultiplicityElement {
}
abstract class DeploymentTarget extends NamedElement {
}
",4891,yes,yes,yes
51063,All compilation units with at least one import,"pattern compilationUnitWithImports(unit: CompilationUnit){
    CompilationUnit.imports(unit, _);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/MiniJava.ecore,"class CompilationUnit {
	reference ClassDeclaration[1..1] containedClass;
	reference ClassImport[0..*] imports;
	reference Package[0..1] package_;
}
class ClassImport {
	reference ClassDeclaration[1..1] importedClass;
}
class ClassDeclaration extends NamedElement {
	reference MemberDeclaration[0..*] members;
	attribute Visibility[0..1] visibility;
	reference CompilationUnit[0..1] compilationUnit;
}
class Package extends NamedElement {
	reference CompilationUnit[0..*] compilationUnits;
}
class FieldDeclaration extends MemberDeclaration {
}
abstract class MemberDeclaration extends TypedElement {
	reference ClassDeclaration[0..1] owningClass;
	reference Parameter[0..*] parameters;
	attribute Visibility[0..1] visibility;
}
class MethodDeclaration extends MemberDeclaration {
	reference Statement[0..*] body;
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
enum Visibility {
	private;
	public;
	protected;
}
class Parameter extends TypedElement {
	reference MemberDeclaration[0..1] owningDeclaration;
}
abstract class TypedElement extends NamedElement {
	reference ClassDeclaration[1..1] type;
}
class Statement {
}
",10972,yes,yes,yes
44955,Operations with parameters of the same type,"pattern operationWithSameTypeParameters(operation : Operation, parameter1 : Parameter, parameter2 : Parameter, type : Type) {
    Operation.ownedParameter(operation, parameter1);
    Operation.ownedParameter(operation, parameter2);
    Parameter.type(parameter1, type);
    Parameter.type(parameter2, type);
    parameter1 != parameter2;
}",repo-ecore-all/data/jesusc/bento/examples/evaluation/bento.componetization.atl.examples/tmp_/UML2_effective.ecore,"abstract class Feature extends RedefinableElement {
}
abstract class NamedElement extends Element {
	attribute String[0..1] name;
	attribute VisibilityKind[0..1] visibility;
}
abstract class PackageableElement extends NamedElement, ParameterableElement {
}
class Dependency extends PackageableElement, DirectedRelationship {
	reference NamedElement[1..*] supplier;
}
class Property extends StructuralFeature, ConnectableElement, DeploymentTarget {
}
class Generalization extends DirectedRelationship {
	reference Classifier[1..1] specific;
	reference Classifier[1..1] general;
}
class Class extends EncapsulatedClassifier, BehavioredClassifier {
	reference Operation[0..*] ownedOperation;
	reference Classifier[0..*] nestedClassifier;
}
class Parameter extends ConnectableElement, MultiplicityElement {
}
class Model extends Package {
}
class Operation extends BehavioralFeature, ParameterableElement, TemplateableElement {
}
class Package extends Namespace, PackageableElement, TemplateableElement {
	reference PackageableElement[0..*] packagedElement;
}
abstract class Classifier extends Namespace, RedefinableElement, Type, TemplateableElement {
	reference Generalization[0..*] generalization;
	attribute Boolean[1..1] isAbstract;
}
abstract class BehavioralFeature extends Namespace, Feature {
	reference Behavior[0..*] method;
	reference Parameter[0..*] ownedParameter;
}
abstract class Behavior extends Class {
}
abstract class TypedElement extends NamedElement {
	reference Type[0..1] type;
}
abstract class Type extends PackageableElement {
}
enum VisibilityKind {
	public;
	private;
	protected;
	package;
}
abstract class StructuredClassifier extends Classifier {
	reference Property[0..*] ownedAttribute;
}
abstract class Element extends EModelElement {
}
abstract class EModelElement {
}
abstract class EncapsulatedClassifier extends StructuredClassifier {
}
abstract class Namespace extends NamedElement {
}
abstract class RedefinableElement extends NamedElement {
}
abstract class ParameterableElement extends Element {
}
abstract class TemplateableElement extends Element {
}
abstract class BehavioredClassifier extends Classifier {
}
abstract class DirectedRelationship extends Relationship {
}
abstract class Relationship extends Element {
}
abstract class ConnectableElement extends TypedElement, ParameterableElement {
}
abstract class MultiplicityElement extends Element {
}
abstract class StructuralFeature extends Feature, TypedElement, MultiplicityElement {
}
abstract class DeploymentTarget extends NamedElement {
}
",4864,no,yes,yes
60113,Intents that do not have any extras,"pattern intentWithoutExtras(intent : Intent) {
    Intent(intent);
    neg find hasExtra(intent, _);
}

//auxiliary pattern
pattern hasExtra(intent : Intent, extra : Extra) {
    Intent.extras(intent, extra);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/Intent.ecore,"class Intent extends NamedElement {
	reference Extra[0..*] extras;
	attribute EString[1..1] action;
	attribute IntentType[1..1] intentType;
	attribute EString[0..1] category;
	attribute EString[0..1] type;
	attribute EString[0..1] data;
	reference Callback[0..1] sucessCallback;
	attribute EString[0..1] exceptionName;
	reference Permissions[0..*] permissions;
}
class Extra extends NamedElement {
	attribute EString[1..1] value;
	attribute ExtraType[1..1] type;
}
class Callback extends NamedElement {
}
class Permissions extends NamedElement {
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
class Model extends NamedElement {
	reference Intent[0..*] intents;
}
enum ExtraType {
	String;
	Serializable;
	Float;
	Byte;
	Long;
	Parcelable;
	Bundle;
	Char;
	CharSequence;
	Int;
	Double;
	Uri;
	Boolean;
}
enum IntentType {
	Standard;
	Broadcast;
}
",20022,yes,yes,yes
60245,"Count of employees with the job title ""Manager"".","pattern countManagers(cnt: java Integer){
    cnt == count find managerEmployee(_);
}

//Auxiliary pattern
pattern managerEmployee(employee: Employee){
    Employee.jobTitle(employee, jobTitle);
    JobTitle.title(jobTitle, ""Manager"");
}",repo-ecore-all/data/srirammails/emftriple/tags/0.6.1/examples/com.emf4sw.rdfizer.examples/src/resources/employee.ecore,"class Directory {
	attribute EString[1..1] name;
	reference Project[0..*] projects;
	reference Employee[0..*] employees;
	reference JobTitle[0..*] jobs;
	reference Degree[0..*] degrees;
}
abstract class Project {
	attribute EString[0..1] name;
	attribute EString[0..1] description;
	reference Employee[0..1] teamLeader;
}
class SmallProject extends Project {
}
class LargeProject extends Project {
	attribute EDouble[0..1] budget;
	attribute EDate[0..1] milestone;
}
class PhoneNumber {
	attribute EString[0..1] number;
	attribute EString[0..1] type;
	attribute EString[0..1] areaCode;
	reference Employee[1..1] owner;
}
class JobTitle {
	attribute EString[0..1] title;
}
enum Gender {
	Male;
	Female;
}
class EmploymentPeriod {
	attribute EDate[0..1] startDate;
	attribute EDate[0..1] endDate;
}
class Employee {
	attribute EString[0..1] firstName;
	attribute EString[0..1] lastName;
	attribute Gender[0..1] gender;
	attribute EDouble[0..1] salary;
	attribute EString[0..*] responsibilities;
	reference EmploymentPeriod[0..1] period;
	reference Address[0..1] address;
	reference JobTitle[0..1] jobTitle;
	reference Employee[0..1] manager;
	reference Employee[0..*] managedEmployees;
	reference PhoneNumber[0..*] phoneNumbers;
	reference Degree[0..*] degrees;
	reference Project[0..*] projects;
	reference EmailAddress[0..*] emailAddresses;
}
class EmailAddress {
	attribute EString[0..1] address;
}
class Degree {
	attribute EString[0..1] name;
}
class Address {
	attribute EString[0..1] city;
	attribute EString[0..1] country;
	attribute EString[0..1] province;
	attribute EString[0..1] postalCode;
	attribute EString[0..1] street;
}
",20154,yes,yes,yes
56854,All automata definitions with their initial states,"pattern automataWithInitialState(automata : AutomataDef, initialState : State) {
    AutomataDef.init(automata, initialState);
}",repo-ecore-all/data/manuelleduc/gpfl/fr.mleduc.gpfl/model/generated/Gpfl.ecore,"class Program {
	attribute EString[0..1] name;
	reference AutomataDef[0..*] automatas;
	reference GExpression[0..*] initStmts;
	reference GExpression[0..*] stmts;
}
class GExpression {
	reference GExpression[0..1] expression;
}
class Field {
	attribute EString[0..1] name;
	reference GExpression[0..1] value;
}
class AutomataDef {
	attribute EString[0..1] name;
	reference State[0..1] init;
	reference State[0..*] states;
}
class State {
	attribute EString[0..1] name;
	reference Transition[0..*] transitions;
}
class Transition {
	attribute EString[0..1] event;
	reference State[0..1] target;
}
class CondStmt extends GExpression {
	reference GExpression[0..1] exp;
	reference GExpression[0..*] stmts;
}
class IterStmt extends GExpression {
	reference GExpression[0..1] exp;
	reference GExpression[0..*] stmts;
}
class InterruptStmt extends GExpression {
	attribute EInt[0..1] timeout;
	reference GExpression[0..1] periodic;
	reference GExpression[0..*] stmts;
}
class NopCmd extends GExpression {
}
class AcceptCmd extends GExpression {
}
class DropCmd extends GExpression {
}
class SendCmd extends GExpression {
	reference GExpression[0..1] port;
	reference Field[0..*] fields;
}
class AlarmCmd extends GExpression {
	reference GExpression[0..1] exp;
}
class SetCmd extends GExpression {
	attribute EString[0..1] name;
	reference GExpression[0..1] exp;
}
class AutomatonCmd extends GExpression {
	attribute EString[0..1] name;
	reference AutomataDef[0..1] automaton;
}
class StpCmd extends GExpression {
	reference AutomatonCmd[0..1] automaton;
	reference GExpression[0..1] event;
	reference GExpression[0..*] errors;
}
class CmdAnd extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdEq extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdNEq extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdGECompare extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdLECompare extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdGCompare extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdLCompare extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdAdd extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class CmdSub extends GExpression {
	reference GExpression[0..1] left;
	reference GExpression[0..1] right;
}
class IntLitCmd extends GExpression {
	attribute EInt[0..1] value;
}
class GBoolTrue extends GExpression {
}
class GBoolFalse extends GExpression {
}
class StringLit extends GExpression {
	attribute EString[0..1] value;
}
class Variable extends GExpression {
	attribute EString[0..1] value;
}
class PortLit extends GExpression {
	attribute EBoolean[0..1] inSide;
}
class InPort extends GExpression {
}
class OutPort extends GExpression {
}
",16763,yes,yes,yes
41358,Classes with methods that have parameters of a specific primitive type,"pattern classWithMethodParameterType(clase : Clase, metodo : Metodo, parametro : Parametro, type : TipoPrimitivo) {
    Clase.metodos(clase, metodo);
    Metodo.parametros(metodo, parametro);
    Parametro.tipo(parametro, type);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/CD.ecore,"class DiagramaClases extends ElementoNombrado {
	reference Clase[0..*] clases;
	reference Relacion[0..*] relaciones;
}
class Clase extends ElementoNombrado {
	reference Atributo[0..*] atributos;
	reference Metodo[0..*] metodos;
	reference Relacion[0..*] relacionesFuente;
	reference Relacion[0..*] relacionesDestino;
	attribute EBoolean[0..1] aspecto;
}
class Atributo extends ElementoNombrado {
	attribute TipoPrimitivo[0..1] tipo;
	attribute TipoVisibilidad[0..1] visibilidad;
}
class Metodo extends ElementoNombrado {
	attribute TipoVisibilidad[0..1] visibilidad;
	attribute TipoPrimitivo[0..1] tipoDevuelto;
	reference Parametro[0..*] parametros;
}
abstract class ElementoNombrado {
	attribute EString[0..1] nombre;
}
class Relacion extends ElementoNombrado {
	reference Clase[1..1] destino;
	reference Clase[1..1] fuente;
	attribute EString[0..1] cardFuente;
	attribute EString[0..1] cardDestino;
}
enum TipoPrimitivo {
	String;
	int;
	double;
	Date;
	boolean;
	Object;
}
enum TipoVisibilidad {
	private;
	default;
	protected;
	public;
}
class Parametro extends ElementoNombrado {
	attribute TipoPrimitivo[0..1] tipo;
}
",1267,ok,ok,ok
47550,Find all MethodCalls with at least 2 different types.,"pattern methodCallsWithMultipleTypes(call1: MethodCall, call2: MethodCall){
    MethodCall.type(call1, type1);
    MethodCall.type(call2, type2);
    check(type1 != type2);
}",repo-ecore-all/data/eMoflon/emoflon-neo/examples/TestSuiteGT/resources/in/metamodel/OCLGrammar.ecore,"class OCLString {
}
class Expression extends OCLString {
	reference Collection[0..1] callee;
	reference MethodCall[0..1] call;
}
class MethodCall {
	attribute MethodType[0..1] type;
	reference Parameter[0..1] parameter;
}
class Parameter {
}
enum MethodType {
	APPEND;
	APPEND_ALL;
}
class Collection extends OCLString, Parameter {
	attribute CollectionType[0..1] type;
	reference Literal[0..*] elements;
}
enum CollectionType {
	SEQUENCE;
	SET;
	ORDERED_SET;
	BAG;
}
class Literal extends Parameter {
}
class StringLiteral extends Literal {
	attribute EString[0..1] literal;
}
class NumberRange extends Literal {
	attribute EInt[0..1] lowerBound;
	attribute EInt[0..1] upperBound;
}
class NumberLiteral extends Literal {
	attribute EInt[0..1] value;
}
class DoubleLiteral extends NumberLiteral {
	attribute EInt[0..1] fractional;
}
class NullLiteral extends Literal {
}
class InvalidLiteral extends Literal {
}
",7459,no,no,no
51035,Find all class declarations that either have a method with parameters or a field declaration,"pattern methodWithParamsOrField(class: ClassDeclaration, member: MemberDeclaration){
    ClassDeclaration.members(class, member);
    MemberDeclaration.parameters(member,_);
} or {
    ClassDeclaration.members(class, member);
    FieldDeclaration(member);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/MiniJava.ecore,"class CompilationUnit {
	reference ClassDeclaration[1..1] containedClass;
	reference ClassImport[0..*] imports;
	reference Package[0..1] package_;
}
class ClassImport {
	reference ClassDeclaration[1..1] importedClass;
}
class ClassDeclaration extends NamedElement {
	reference MemberDeclaration[0..*] members;
	attribute Visibility[0..1] visibility;
	reference CompilationUnit[0..1] compilationUnit;
}
class Package extends NamedElement {
	reference CompilationUnit[0..*] compilationUnits;
}
class FieldDeclaration extends MemberDeclaration {
}
abstract class MemberDeclaration extends TypedElement {
	reference ClassDeclaration[0..1] owningClass;
	reference Parameter[0..*] parameters;
	attribute Visibility[0..1] visibility;
}
class MethodDeclaration extends MemberDeclaration {
	reference Statement[0..*] body;
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
enum Visibility {
	private;
	public;
	protected;
}
class Parameter extends TypedElement {
	reference MemberDeclaration[0..1] owningDeclaration;
}
abstract class TypedElement extends NamedElement {
	reference ClassDeclaration[1..1] type;
}
class Statement {
}
",10944,no,spec,no
46554,Items with their names,"pattern itemWithName(item : Item, name : EString) {
    Item.name(item, name);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/travel.ecore,"abstract class Node {
	reference Connection[0..*] outgoingConnections;
	reference Connection[0..*] ingoingConnections;
}
class Start extends Node {
}
class End extends Node {
}
abstract class Item extends Node {
	attribute EString[0..1] name;
}
class Flight extends Item {
	attribute EString[0..1] destinationTown;
	attribute EString[0..1] destinationCountry;
}
class Hotel extends Item {
	attribute EString[0..1] hotelName;
}
abstract class Tour extends Item {
}
class TrekkingTour extends Tour {
}
class ParachuteTour extends Tour {
}
class CarRental extends Item {
}
class Insurance extends Item {
	attribute InsuranceType[0..1] type;
}
enum InsuranceType {
	CarInsurance;
	TravelInsurance;
}
class Travel {
	reference Start[1..1] start;
	reference Data[0..*] data;
	reference End[1..1] end;
	reference Connection[0..*] connections;
	reference Item[0..*] items;
}
class Data {
	attribute EString[0..1] name;
	reference Parameter[1..*] parameters;
}
class Parameter {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class Connection {
	attribute EString[0..1] name;
	reference Node[1..1] sourceNode;
	reference Node[1..1] targetNode;
}
",6463,yes,yes,yes
62076,Nested refinements that have a nested refinement defined,"pattern nestedRefinementWithNested(nestedRefinement: NestedRefinement) {
    NestedRefinement(nestedRefinement);
    NestedRefinement.nested(nestedRefinement, _);
}",repo-ecore-all/data/b2ihealthcare/snow-owl/snomed/com.b2international.snowowl.snomed.ecl/model/generated/Ecl.ecore,"class Script {
	reference ExpressionConstraint[0..1] constraint;
}
class ExpressionConstraint {
}
class ChildOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class DescendantOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class DescendantOrSelfOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class ParentOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class AncestorOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class AncestorOrSelfOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class MemberOf extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
}
class EclConceptReference extends ExpressionConstraint {
	attribute EString[0..1] id;
	attribute EString[0..1] term;
}
class Any extends ExpressionConstraint {
}
class EclRefinement {
}
class NestedRefinement extends EclRefinement {
	reference EclRefinement[0..1] nested;
}
class EclAttributeGroup extends EclRefinement {
	reference Cardinality[0..1] cardinality;
	reference EclRefinement[0..1] refinement;
}
class AttributeConstraint extends EclRefinement {
	reference Cardinality[0..1] cardinality;
	attribute EBoolean[0..1] reversed;
	reference ExpressionConstraint[0..1] attribute;
	reference Comparison[0..1] comparison;
}
class Cardinality {
	attribute EInt[0..1] min;
	attribute EInt[0..1] max;
}
class Comparison {
}
class AttributeComparison extends Comparison {
	reference ExpressionConstraint[0..1] constraint;
}
class DataTypeComparison extends Comparison {
}
class AttributeValueEquals extends AttributeComparison {
}
class AttributeValueNotEquals extends AttributeComparison {
}
class BooleanValueEquals extends DataTypeComparison {
	attribute EBoolean[0..1] value;
}
class BooleanValueNotEquals extends DataTypeComparison {
	attribute EBoolean[0..1] value;
}
class StringValueEquals extends DataTypeComparison {
	attribute EString[0..1] value;
}
class StringValueNotEquals extends DataTypeComparison {
	attribute EString[0..1] value;
}
class IntegerValueEquals extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class IntegerValueNotEquals extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class IntegerValueGreaterThan extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class IntegerValueLessThan extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class IntegerValueGreaterThanEquals extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class IntegerValueLessThanEquals extends DataTypeComparison {
	attribute EInt[0..1] value;
}
class DecimalValueEquals extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class DecimalValueNotEquals extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class DecimalValueGreaterThan extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class DecimalValueLessThan extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class DecimalValueGreaterThanEquals extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class DecimalValueLessThanEquals extends DataTypeComparison {
	attribute EBigDecimal[0..1] value;
}
class NestedExpression extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] nested;
}
class OrExpressionConstraint extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] left;
	reference ExpressionConstraint[0..1] right;
}
class AndExpressionConstraint extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] left;
	reference ExpressionConstraint[0..1] right;
}
class ExclusionExpressionConstraint extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] left;
	reference ExpressionConstraint[0..1] right;
}
class RefinedExpressionConstraint extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
	reference EclRefinement[0..1] refinement;
}
class DottedExpressionConstraint extends ExpressionConstraint {
	reference ExpressionConstraint[0..1] constraint;
	reference ExpressionConstraint[0..1] attribute;
}
class OrRefinement extends EclRefinement {
	reference EclRefinement[0..1] left;
	reference EclRefinement[0..1] right;
}
class AndRefinement extends EclRefinement {
	reference EclRefinement[0..1] left;
	reference EclRefinement[0..1] right;
}
",21985,spec,spec,spec
53107,All microservices that are infrastructural and require at least one interface,"pattern infrastructuralMicroserviceWithInterface(microservice: MicroService){
    MicroService.isInfrastructural(microservice, true);
    MicroService.require(microservice, interface);
}",repo-ecore-all/data/kansor/Univaq-Thesis-GM/ArchitectureImpactAnalysis/ArchitectureRecovery/src/main/resources/model/msa.ecore,"abstract class Element {
	attribute EString[0..1] name;
}
class Product extends Element {
	reference MicroService[1..*] composedBy;
	reference Cluster[0..*] dividedIn;
	reference Team[1..*] teams;
	reference Link[0..*] links;
	reference Developer[0..*] developers;
}
class MicroService extends Element {
	reference Product[0..1] compose;
	reference Cluster[0..1] belongTo;
	reference Interface[0..*] expose;
	attribute EString[0..1] host;
	reference Team[0..1] owned;
	attribute EBoolean[0..1] isInfrastructural;
	reference Interface[0..*] require;
}
class Cluster extends Element {
	reference MicroService[0..*] contains;
	reference Product[0..1] divide;
	attribute EString[0..1] context;
}
class Developer extends Element {
	attribute EString[0..1] email;
	attribute EString[0..1] username;
	reference Product[0..1] worksFor;
}
class Interface extends Element {
	reference MicroService[0..1] exposedBy;
	attribute EString[0..1] endPoint;
	attribute EInt[0..1] port;
	reference MicroService[0..1] requiredBy;
}
class Link extends Element {
	reference Interface[0..1] source;
	reference Interface[0..1] target;
	reference Product[0..1] Dependency;
}
class Team extends Element {
	reference Developer[0..*] composedBy;
	reference MicroService[0..*] workOn;
	reference Product[0..1] workFor;
}
",13016,yes,yes,yes
50245,Find components that have at least 2 connectors of type ASSEMBLY.,"pattern componentWith2OrMoreAssemblyConnectors(component: Component) {
    cnt == count find assemblyConnectorsInComponent(component, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern assemblyConnectorsInComponent(component: Component, connector: Connector){
    Component.connectors(component, connector);
    Connector.type(connector, ""ASSEMBLY"");
}",repo-ecore-all/data/masters-info-nantes/compoNantes/codeProjet/org.xtext.example.compoNantes/model/generated/CompoNantes.ecore,"class Model {
	reference Component[0..*] components;
}
class Component {
	attribute EString[0..1] name;
	reference Port[0..*] ports;
	reference Interface[0..*] interfaces;
	reference Component[0..*] components;
	reference Connector[0..*] connectors;
	reference Dependency[0..*] dependencies;
}
class Port {
	attribute EString[0..1] name;
}
class Interface {
	attribute InterfaceType[0..1] type;
	attribute EString[0..1] name;
	reference Port[0..1] port;
}
class Connector {
	attribute ConnectorType[0..1] type;
	attribute EString[0..1] name;
	reference Interface[0..1] int_from;
	reference Interface[0..1] int_to;
}
class Dependency {
	attribute DependencyType[0..1] type;
	attribute EString[0..1] name;
	reference Interface[0..1] component_from;
	reference Interface[0..1] component_to;
}
enum InterfaceType {
	REQUIRED;
	PROVIDED;
}
enum ConnectorType {
	ASSEMBLY;
	DELEGATION;
}
enum DependencyType {
	USAGE;
	ASSOCIATION;
}
",10154,yes,yes,yes
42085,Actors that do not create or perform any tasks,"pattern actorWithoutTasks(actor: Actor) {
    Actor(actor);
    neg find actorCreatesTask(actor, _);
    neg find actorPerformsTask(actor, _);
}

//auxiliary pattern
pattern actorCreatesTask(actor: Actor, task: Task) {
    Actor.creates(actor, task);
}

//auxiliary pattern
pattern actorPerformsTask(actor: Actor, task: Task) {
    Actor.performs(actor, task);
}",repo-ecore-all/data/alejandrort/no.hvl.multecore.examples.process2019/no.hvl.multecore.examples.bicycle2019.main/models/process.ecore,"class Root {
	attribute EString[1..1] __metamodels;
	attribute EString[0..*] __supplementaries;
	reference EClass[0..*] __contains;
}
class EClass {
	attribute EString[1..1] __name;
	attribute EString[1..1] __relationNames;
	attribute EString[1..1] __potency;
	attribute EString[1..1] __parentNodes;
	attribute EBoolean[1..1] __isAbstract;
	attribute EString[0..*] __attributeNames;
	attribute EString[0..*] __supplementaryNodes;
	reference EClass[0..*] EReference;
}
class Task extends EClass {
	attribute EString[0..1] beginDate;
	attribute EString[0..1] endDate;
	attribute EInt[0..1] expectedDuration;
	attribute EBoolean[0..1] isCritical;
	reference Artifact[0..*] produces;
	reference Artifact[0..*] uses;
}
class Gateway extends EClass {
	reference Task[1..*] source;
	reference Task[1..*] target;
}
class FinalTask extends Task {
}
class InitTask extends Task {
}
class Actor extends EClass {
	reference AbstractRole[1..*] hasRole;
	reference Task[0..*] creates;
	reference Task[0..*] performs;
}
class Artifact extends EClass {
}
abstract class AbstractRole extends EClass {
	reference Task[0..*] executes;
}
class AndJoin extends Gateway {
}
class Process extends EClass {
	reference InitTask[1..1] initialTask;
	reference FinalTask[1..*] finalTask;
	reference Task[1..*] contains;
}
class OrJoin extends Gateway {
}
class OrSplit extends Gateway {
}
class AndSplit extends Gateway {
}
class Sequence extends Gateway {
}
class Role extends AbstractRole {
}
class CombinedRole extends AbstractRole {
	reference AbstractRole[2..*] includes;
}
class SeniorRole extends Role {
}
",1994,yes,yes,yes
58953,Exploitations that have more than one resource,"pattern exploitationWithMultipleResources(exploitation : Exploitation) {
    Exploitation.Ressource(exploitation, ressource1);
    Exploitation.Ressource(exploitation, ressource2);
    ressource1 != ressource2;
}",repo-ecore-all/data/HamedKaramoko/farmingdsl/fr.esir.lsi.langage/model/Exploitation.ecore,"class Exploitation {
	attribute EString[0..1] name;
	reference Ressource[0..*] Ressource;
	reference Surface[0..*] Surface;
}
class Ressource {
	attribute EString[0..1] name;
	reference Exploitation[1..1] Exploitation;
	reference ResourceType[0..1] resourceType;
}
class Surface {
	reference Exploitation[1..1] Exploitation;
	reference Parcelle[0..*] Parcelle;
}
enum Cereal {
	CORN;
	WHEAT;
	SORGHUM;
}
class Parcelle {
	attribute EBoolean[0..1] irrigue;
	attribute EInt[0..1] nbHectare;
	attribute EInt[0..1] id;
	reference Surface[1..1] Surface;
	reference Atelier[1..1] Atelier;
}
abstract class Atelier {
	reference Parcelle[1..1] Parcelle;
	reference Activity[0..1] activity;
}
class Elevage extends Atelier {
	attribute Animals[0..1] animals;
}
class Culture extends Atelier {
	attribute Cereal[0..1] cereals;
}
enum Animals {
	OVIN;
	BOVIN;
}
",18862,yes,yes,yes
43779,Launches that have arguments with the same name,"pattern duplicateArgumentNames(launch: Launch, argument1: Argument, argument2: Argument) {
    Launch.argument(launch, argument1);
    Launch.argument(launch, argument2);
    argument1 != argument2;
    Argument.name(argument1, name);
    Argument.name(argument2, name);
}",repo-ecore-all/data/szenergy/szenergy_mdse_tools/structure-generators/hu.sze.jkk.robot.launch.model/model/launchmodel.ecore,"class Launch {
	reference Node[0..*] node;
	attribute EString[0..1] name;
	reference Argument[0..*] argument;
	reference Parameter[0..*] launchparameters;
	reference Include[0..*] include;
	reference Namespace[0..*] namespace;
}
class Node extends LaunchElement {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
	reference Parameter[0..*] parameter;
	attribute EString[0..1] rospkg;
	attribute EString[0..1] args;
}
class StaticTransform extends Node {
	reference Vec3[0..1] vec3;
	reference Vec3[0..1] rpy;
	attribute EString[0..1] link_from;
	attribute EString[0..1] link_to;
}
class Vec3 {
	attribute EDouble[0..1] x;
	attribute EDouble[0..1] y;
	attribute EDouble[0..1] z;
}
class Parameter {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class Argument {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class Include extends LaunchElement {
	reference Argument[0..*] argument;
	attribute EString[0..1] file;
}
class Namespace {
	attribute EString[0..1] name;
	reference LaunchElement[0..*] launchelement;
}
class LaunchElement {
}
",3688,yes,yes,yes
61139,TGG rules that have nodes connected by a correlation edge,"pattern ruleWithCorrelationEdge(rule : TGGRule, sourceNode : TGGRuleNode, targetNode : TGGRuleNode) {
    TGGRule.nodes(rule, sourceNode);
    TGGRule.nodes(rule, targetNode);
    TGGRuleCorr.source(correlation, sourceNode);
    TGGRuleCorr.target(correlation, targetNode);
}",repo-ecore-all/data/eMoflon/emoflon-ibex/org.emoflon.ibex.tgg.core.language/model/Language.ecore,"class TGG extends TGGNamedElement {
	reference EPackage[0..*] src;
	reference EPackage[0..*] trg;
	reference EPackage[0..1] corr;
	reference TGGRule[0..*] rules;
	reference TGGAttributeConstraintDefinitionLibrary[1..1] attributeConstraintDefinitionLibrary;
}
class TGGRule extends TGGNamedElement {
	reference TGGRule[0..*] refines;
	reference NAC[0..*] nacs;
	reference TGGRuleNode[0..*] nodes;
	reference TGGRuleEdge[0..*] edges;
	reference TGGAttributeConstraintLibrary[1..1] attributeConditionLibrary;
	attribute EBoolean[0..1] abstract;
}
abstract class TGGRuleElement extends TGGNamedElement {
	attribute DomainType[0..1] domainType;
	attribute BindingType[0..1] bindingType;
}
class TGGRuleNode extends TGGRuleElement {
	reference TGGRuleEdge[0..*] incomingEdges;
	reference TGGRuleEdge[0..*] outgoingEdges;
	reference EClass[0..1] type;
	reference TGGRuleCorr[0..*] incomingCorrsSource;
	reference TGGRuleCorr[0..*] incomingCorrsTarget;
	reference TGGInplaceAttributeExpression[0..*] attrExpr;
}
class TGGRuleCorr extends TGGRuleNode {
	reference TGGRuleNode[0..1] source;
	reference TGGRuleNode[0..1] target;
}
class TGGRuleEdge extends TGGRuleElement {
	reference TGGRuleNode[0..1] srcNode;
	reference TGGRuleNode[0..1] trgNode;
	reference EReference[0..1] type;
}
enum DomainType {
	SRC;
	TRG;
	CORR;
}
enum BindingType {
	CONTEXT;
	CREATE;
	DELETE;
	NEGATIVE;
	RELAXED;
}
class NAC extends TGGNamedElement {
	reference TGGRuleNode[0..*] nodes;
	reference TGGRuleEdge[0..*] edges;
	reference TGGAttributeConstraintLibrary[1..1] attributeConditionLibrary;
}
class TGGInplaceAttributeExpression {
	reference EAttribute[1..1] attribute;
	reference TGGExpression[0..1] valueExpr;
	attribute TGGAttributeConstraintOperators[1..1] operator;
}
enum TGGAttributeConstraintOperators {
	EQUAL;
	UNEQUAL;
	GR_EQUAL;
	LE_EQUAL;
	GREATER;
	LESSER;
}
class TGGAttributeConstraintLibrary {
	reference TGGAttributeConstraint[0..*] tggAttributeConstraints;
	reference TGGParamValue[0..*] parameterValues;
}
class TGGAttributeConstraint {
	reference TGGAttributeConstraintDefinition[0..1] definition;
	reference TGGParamValue[0..*] parameters;
}
class TGGAttributeVariable extends TGGParamValue {
	attribute EString[0..1] name;
}
class TGGAttributeConstraintDefinitionLibrary {
	reference TGGAttributeConstraintDefinition[0..*] tggAttributeConstraintDefinitions;
}
class TGGAttributeConstraintDefinition extends TGGNamedElement {
	attribute EBoolean[0..1] userDefined;
	reference TGGAttributeConstraintParameterDefinition[0..*] parameterDefinitions;
	reference TGGAttributeConstraintAdornment[0..*] syncAdornments;
	reference TGGAttributeConstraintAdornment[0..*] genAdornments;
}
class TGGAttributeConstraintParameterDefinition {
	reference EDataType[0..1] type;
	attribute EString[0..1] name;
}
class TGGAttributeConstraintAdornment {
	attribute EString[0..*] value;
}
class TGGNamedElement {
	attribute EString[0..1] name;
}
class TGGParamValue {
	reference TGGAttributeConstraintParameterDefinition[0..1] parameterDefinition;
}
abstract class TGGExpression extends TGGParamValue {
}
class TGGLiteralExpression extends TGGExpression {
	attribute EString[0..1] value;
}
class TGGEnumExpression extends TGGExpression {
	reference EEnum[0..1] eenum;
	reference EEnumLiteral[0..1] literal;
}
class TGGAttributeExpression extends TGGExpression {
	reference TGGRuleNode[0..1] objectVar;
	reference EAttribute[0..1] attribute;
}
",21048,yes,yes,yes
40715,All entries with a published date,"pattern entryWithPublishedDate(entry: Entry){
    Entry.published(entry, _);
}",repo-ecore-all/data/geodes-sms/j-t-core/Ramifier/flesh/Atom1.ecore,"class ATOM {
	attribute EString[1..1] title;
	attribute EString[1..1] id;
	attribute EString[0..1] subtitle;
	reference Date[1..1] lastUpdate;
	reference Author[1..*] authors;
	reference Contributor[0..*] contibutors;
	reference Entry[0..*] entries;
}
class Entry {
	attribute EString[1..1] title;
	attribute EString[1..1] id;
	attribute EString[0..1] rights;
	attribute EString[0..1] summary;
	reference Source[0..1] source;
	reference Date[0..1] published;
	reference Date[1..1] lastUpdate;
	reference Content[0..1] content;
	reference Author[1..*] authors;
	reference Contributor[0..*] contibutors;
	reference ATOM[1..1] atom;
}
class Source {
	attribute EString[0..1] id;
	attribute EString[0..1] icon;
	reference Date[0..1] lastUpdate;
	reference Contributor[0..*] contributors;
	reference Author[0..1] author;
}
class Content {
	attribute EString[0..1] type;
}
class InLineXHTMLContent extends Content {
}
class InLineOtherContent extends Content {
}
class Author {
}
class Contributor {
}
class Date {
	attribute EString[1..1] day;
	attribute EBigDecimal[1..1] month;
	attribute EDoubleObject[1..1] year;
	attribute EDouble[1..1] hours;
	attribute ELong[1..1] minutes;
	attribute EDate[1..1] seconds;
}
",624,yes,yes,yes
52881,Count the number of object matchings.,"pattern countObjectMatchings(cnt: java Integer){
    cnt == count find objectMatching(_);
}

//Auxiliary pattern
pattern objectMatching(objectMatching: ObjectMatching){
    ObjectMatching(objectMatching);
}",repo-ecore-all/data/antmordel/mmatching/JLAMP2014_Example/Bindings/CorrespondencesMM.ecore,"class Correspondences {
	reference MMMatching[1..*] mms;
	reference RuleMatching[1..*] rules;
}
class MMMatching {
	attribute EString[0..1] obMMName;
	attribute EString[0..1] DSLMMName;
	reference ClassMatching[0..*] classes;
	reference RefMatching[0..*] refs;
}
class RuleMatching {
	attribute EString[0..1] obRuleName;
	attribute EString[0..1] DSLRuleName;
	reference ObjectMatching[0..*] lhsObjs;
	reference ObjectMatching[0..*] rhsObjs;
	reference LinkMatching[0..*] rhsLinks;
	reference LinkMatching[0..*] lhsLinks;
}
class ClassMatching {
	attribute EString[0..1] obName;
	attribute EString[0..1] DSLName;
}
class RefMatching {
	attribute EString[0..1] obClassName;
	attribute EString[0..1] obRefName;
	attribute EString[0..1] DSLClassName;
	attribute EString[0..1] DSLRefName;
}
class ObjectMatching {
	attribute EString[0..1] obName;
	attribute EString[0..1] DSLName;
}
class LinkMatching {
	attribute EString[0..1] obObjName;
	attribute EString[0..1] obLinkName;
	attribute EString[0..1] DSLObjName;
	attribute EString[0..1] DSLLinkName;
}
",12790,yes,yes,yes
51081,Get all methods with exactly 1 parameter.,"pattern methodWith1Parameter(method: MethodDeclaration){
    cnt == count find parametersInMethod(method, _);
    check(cnt==1);
}

//Auxiliary pattern
pattern parametersInMethod(method: MethodDeclaration, parameter: Parameter){
    MethodDeclaration.body(method, _);
    Parameter.owningDeclaration(parameter, method);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/MiniJava.ecore,"class CompilationUnit {
	reference ClassDeclaration[1..1] containedClass;
	reference ClassImport[0..*] imports;
	reference Package[0..1] package_;
}
class ClassImport {
	reference ClassDeclaration[1..1] importedClass;
}
class ClassDeclaration extends NamedElement {
	reference MemberDeclaration[0..*] members;
	attribute Visibility[0..1] visibility;
	reference CompilationUnit[0..1] compilationUnit;
}
class Package extends NamedElement {
	reference CompilationUnit[0..*] compilationUnits;
}
class FieldDeclaration extends MemberDeclaration {
}
abstract class MemberDeclaration extends TypedElement {
	reference ClassDeclaration[0..1] owningClass;
	reference Parameter[0..*] parameters;
	attribute Visibility[0..1] visibility;
}
class MethodDeclaration extends MemberDeclaration {
	reference Statement[0..*] body;
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
enum Visibility {
	private;
	public;
	protected;
}
class Parameter extends TypedElement {
	reference MemberDeclaration[0..1] owningDeclaration;
}
abstract class TypedElement extends NamedElement {
	reference ClassDeclaration[1..1] type;
}
class Statement {
}
",10990,no,no,no
46596,Connection with the shortest name.,"pattern connectionWithShortestName(connection: Connection, minlength: java Integer) {
    minlength == min find countConnectionName(_, #);
    find countConnectionName(connection, current);
    current == minlength;
}	

//auxiliary pattern
pattern countConnectionName(connection : Connection, cnt: java Integer) {
    cnt == count find nameAttribute(connection, _);
}

//auxiliary pattern
pattern nameAttribute(connection: Connection, name: EString){
    Connection.name(connection, name);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/travel.ecore,"abstract class Node {
	reference Connection[0..*] outgoingConnections;
	reference Connection[0..*] ingoingConnections;
}
class Start extends Node {
}
class End extends Node {
}
abstract class Item extends Node {
	attribute EString[0..1] name;
}
class Flight extends Item {
	attribute EString[0..1] destinationTown;
	attribute EString[0..1] destinationCountry;
}
class Hotel extends Item {
	attribute EString[0..1] hotelName;
}
abstract class Tour extends Item {
}
class TrekkingTour extends Tour {
}
class ParachuteTour extends Tour {
}
class CarRental extends Item {
}
class Insurance extends Item {
	attribute InsuranceType[0..1] type;
}
enum InsuranceType {
	CarInsurance;
	TravelInsurance;
}
class Travel {
	reference Start[1..1] start;
	reference Data[0..*] data;
	reference End[1..1] end;
	reference Connection[0..*] connections;
	reference Item[0..*] items;
}
class Data {
	attribute EString[0..1] name;
	reference Parameter[1..*] parameters;
}
class Parameter {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class Connection {
	attribute EString[0..1] name;
	reference Node[1..1] sourceNode;
	reference Node[1..1] targetNode;
}
",6505,no,no,no
55960,Classes with static operations,"pattern classWithStaticOperations(clClass : ClClass, operation : ClOperation) {
    ClOperation.isStatic(operation, true);
    ClClass.operations(clClass, operation);
}",repo-ecore-all/data/ELTE-Soft/xUML-RT-Executor/plugins/hu.eltesoft.modelexecution.m2m.metamodel/model/classdef.ecore,"class ClClass extends ModelRoot {
	attribute NamedReference[0..1] region;
	attribute NamedReference[0..1] destructor;
	reference ClOperation[0..*] operations;
	reference ClReception[0..*] receptions;
	reference ClAttribute[0..*] attributes;
	reference ClInheritedAttribute[0..*] inheritedAttributes;
	reference ClAssociation[0..*] associations;
	attribute NamedReference[0..*] parents;
	reference ClInheritedAssociation[0..*] inheritedAssociations;
	attribute EBoolean[1..1] hasReceptions;
	attribute EBoolean[1..1] isAbstract;
	attribute EBoolean[1..1] isActive;
}
class ClClassSpec extends ModelRoot {
	reference ClOperationSpec[0..*] operations;
	reference ClReceptionSpec[0..*] receptions;
	reference ClAttributeSpec[0..*] attributes;
	reference ClAssociation[0..*] associations;
	attribute EBoolean[1..1] hasStateMachine;
	attribute NamedReference[0..*] parents;
	reference ClCtorRecord[0..*] ctorRecords;
	attribute EBoolean[1..1] hasReceptions;
	attribute EBoolean[1..1] isAbstract;
	attribute EBoolean[1..1] isActive;
}
class ClOperation extends ClOperationSpec {
	attribute NamedReference[0..1] method;
}
class ClOperationSpec extends Named {
	reference Type[0..1] returnType;
	reference Parameter[0..*] parameters;
	attribute EBoolean[1..1] isStatic;
}
class ClReception extends ClReceptionSpec {
	attribute NamedReference[1..1] signal;
}
class ClReceptionSpec extends Named {
	reference ClReceptionParameter[0..*] parameters;
}
class ClReceptionParameter extends Named, Multiplicity {
	reference PrimitiveType[1..1] type;
}
class ClAttribute extends ClAttributeSpec {
	attribute EBoolean[1..1] isStatic;
}
class ClAttributeSpec extends Named, Typed {
}
class ClInheritedAttribute extends ClAttributeSpec, Inherited {
}
class ClAssociation extends ClAssociationSpec {
}
abstract class ClAssociationSpec extends Named, Typed {
}
class ClInheritedAssociation extends Inherited, ClAssociationSpec {
}
class ClCtorRecord extends Named {
	reference Named[0..*] directParents;
}
",15869,yes,yes,yes
47312,Count the number of Layer elements that are referenced by at least 3 Rules.,"pattern layerReferencedByAtLeast3Rules(layer: Layer){
    cnt == count find rulesUsingLayer(_, layer);
    check(cnt >= 3);
}

//Auxiliary pattern
pattern rulesUsingLayer(rule: Rule, layer: Layer){
    Rule.layer(rule, layer);
}",repo-ecore-all/data/Pavel-research/ada/com.onpositive.parsing.rules/model/generated/MyDsl.ecore,"class Model {
	reference TokenDefinition[0..*] tokens;
	reference Function[0..*] functions;
	reference Layer[0..*] layers;
	reference Rule[0..*] rules;
}
class TransferModel {
	reference Call[0..*] seq;
}
class Call {
	reference Function[0..1] name;
	reference ArgList[0..1] args;
	attribute EString[0..1] op;
}
class ArgList {
	reference PrimaryExpression[0..*] a;
}
class Name {
	attribute EString[0..1] v;
}
class PrimaryExpression {
	reference EObject[0..1] c;
}
class IntLiteral {
	attribute EInt[0..1] v;
}
class StringLiteral {
	attribute EString[0..1] v;
}
class Seq {
	reference OrExp[0..*] seq;
}
class Group {
	reference Seq[0..1] seq;
	attribute EString[0..1] op;
}
class OrExp {
	reference Element[0..*] options;
}
class Element {
	reference EObject[0..1] val;
}
class Assign {
	attribute EString[0..1] name;
	attribute EString[0..1] op;
	reference TokenDefinition[0..1] val;
}
class TokenDefinition {
	attribute EString[0..1] name;
}
class Function {
	attribute EString[0..1] name;
}
class Layer {
	attribute EString[0..1] name;
}
class Rule {
	attribute EString[0..1] name;
	reference Seq[0..1] condition;
	reference TransferModel[0..1] thenPart;
	attribute EString[0..1] example;
	reference Layer[0..1] layer;
}
",7221,yes,no,no
63323,WebPages with their titles,"pattern webpageWithTitle(webPage : WebPage, title : EString) {
    WebPage.title(webPage, title);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/swml.ecore,"class WebApplication {
	attribute EString[0..1] name;
	reference Entity[0..*] entities;
	reference StaticPage[1..1] homePage;
}
class Entity {
	attribute EString[0..1] name;
	reference Attribute[0..*] attributes;
	reference Attribute[1..1] id;
	reference Relationship[0..*] relationships;
}
class Attribute {
	attribute EString[0..1] name;
	attribute DataType[1..1] dataType;
}
enum DataType {
	String;
	Float;
	Integer;
	Boolean;
}
class Relationship {
	attribute EString[0..1] role;
	attribute EInt[0..1] lowerBound;
	attribute EInt[0..1] upperBound;
	reference Entity[1..1] referencedEntity;
}
class WebPage {
	attribute EString[0..1] title;
	attribute EString[0..1] relativeUrl;
}
class StaticPage extends WebPage {
	reference Link[0..*] links;
}
class DynamicPage extends WebPage {
	reference Icon[1..1] icon;
	reference Entity[1..1] type;
}
class Link {
	attribute EString[0..1] href;
}
class Icon {
	attribute EByteArray[1..1] image;
}
class EntityPage extends DynamicPage {
}
class IndexPage extends DynamicPage {
}
",23232,yes,yes,yes
60717,JavaMethodInvocations that have an optional expression,"pattern methodInvocationWithOptionalExpression(invocation : JavaMethodInvocation) {
    JavaMethodInvocation.optionalExpression(invocation, _);
}",repo-ecore-all/data/eMoflon/kaleidoscope-core/com.kaleidoscope.core.aux.simplejava/model/Simplejava.ecore,"class JavaPackage {
	reference JavaCompilationUnit[0..*] cunits;
	attribute EString[0..1] name;
}
class JavaCompilationUnit {
	attribute EString[0..1] name;
	reference JavaImport[0..*] imports;
	reference JavaMethod[0..*] methods;
	attribute EString[0..1] fieldDeclarations;
}
class JavaImport {
	attribute EString[0..1] value;
	attribute EInt[0..1] index;
}
class JavaMethod {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
	attribute EString[0..1] modifier;
	attribute EString[0..1] throws;
	reference JavaVariableDeclaration[0..*] params;
	attribute EInt[0..1] index;
}
class JavaVariableDeclaration extends JavaExpression {
	attribute EString[0..1] type;
	attribute EString[0..1] name;
}
class JavaOpaqueMethod extends JavaMethod {
	attribute EString[0..1] body;
	attribute EString[0..1] parameters;
}
class JavaWorkflowMethod extends JavaMethod {
	reference JavaStatement[0..*] statements;
}
class JavaStatement {
	reference JavaStatement[0..1] next;
	reference JavaStatement[0..1] prev;
	reference JavaExpression[1..1] expr;
	attribute EBoolean[0..1] return;
}
class JavaUnknownStatement extends JavaStatement {
	attribute EString[0..1] body;
}
class JavaExpression {
	attribute EInt[0..1] index;
}
class JavaMethodInvocation extends JavaExpression {
	reference JavaExpression[0..*] arguments;
	attribute EString[0..1] name;
	attribute EBoolean[0..1] initialization;
	reference JavaExpression[0..1] optionalExpression;
}
class JavaAssignment extends JavaExpression {
	reference JavaExpression[1..1] rhs;
	reference JavaExpression[1..1] lhs;
}
class JavaLiteral extends JavaExpression {
	attribute EString[0..1] value;
}
class JavaName extends JavaExpression {
	attribute EString[0..1] identifier;
}
class JavaArrayInit extends JavaExpression {
	attribute EString[0..1] dimension;
	attribute EString[0..1] type;
}
",20626,yes,yes,yes
58215,Check if there are at least 10 flights in the model.,"pattern atLeast10Flights(){
    cnt == count find flight(_);
    check(cnt>=10);
}

//Auxiliary pattern
pattern flight(flight: Flight){
    Flight(flight);
}",repo-ecore-all/data/PatrickGhazal/ECSE439F18Proj/org.xtext.ecse439.project.airport/AirportDSL.ecore,"class Domainmodel {
	reference Airport[0..*] elements;
}
class Airport {
	attribute EString[0..1] name;
	reference Schedule[0..1] schedule;
	reference AllRunways[0..1] allRun;
	reference AllAirlines[0..1] allAir;
	reference AllFlights[0..1] allFli;
	reference AllTerminals[0..1] allTer;
}
class AllTerminals {
	reference Terminal[0..*] terminals;
}
class AllRunways {
	reference Runway[0..*] runways;
}
class AllAirlines {
}
class AllFlights {
	reference Flight[0..*] flights;
}
class Schedule {
	reference Date[0..1] date;
	reference FlGate[0..*] flGate;
}
class Flight {
	attribute EString[0..1] name;
	reference Time[0..1] time;
	attribute EInt[0..1] airplaneSize;
	attribute EInt[0..1] reqRunwayLg;
}
class FlGate {
	reference Flight[0..1] flight;
	reference Gate[0..1] gate;
	reference Time[0..1] time;
}
class Terminal {
	attribute EString[0..1] name;
	reference Runway[0..1] runway;
	reference Gate[0..*] gates;
}
class Runway {
	attribute EString[0..1] name;
	attribute EInt[0..1] length;
	attribute EString[0..1] used;
}
class Gate {
	attribute EString[0..1] name;
	attribute EInt[0..1] maxApSize;
}
class Date {
	attribute EInt[0..1] day;
	attribute EString[0..1] month;
	attribute EInt[0..1] year;
}
class Time {
	attribute EInt[0..1] hour;
	attribute EInt[0..1] minute;
}
",18124,yes,yes,yes
51984,Check if there are any NumberLiterals with a specific value.,"pattern numberLiteralWithValue(value: java String){
    find numberLiteralWithSpecificValue(_, value);
}

//Auxiliary pattern
pattern numberLiteralWithSpecificValue(numberLiteral: NumberLiteral, value: java String){
    NumberLiteral.value(numberLiteral, value);
}",repo-ecore-all/data/DevBoost/EMFText-Zoo/BreedingStation/Misc/org.emftext.language.n3_turtle/metamodel/n3_turtle.ecore,"class N3Doc {
	reference Statement[1..*] statements;
}
abstract class Statement {
}
class Directive extends Statement {
	reference Name[0..1] prefixName;
	reference Uriref[1..1] uriref;
}
class Triple extends Statement {
	reference Subject[1..1] subject;
	reference AbstractPredicateObject[1..*] predicateObjectList;
}
abstract class AbstractPredicateObject {
}
class PredicateObject extends AbstractPredicateObject {
	reference Verb[1..1] verb;
	reference Obj[1..*] objectList;
}
abstract class Verb {
}
abstract class Subject {
}
class Predicate extends Verb {
	reference Resource[1..1] resource;
}
abstract class Obj {
}
abstract class Literal extends Obj {
}
class DatatypeString extends Literal {
	reference QuotedString[1..1] type;
	reference Resource[1..1] resource;
}
class NumberLiteral extends Literal {
	attribute EString[1..1] value;
}
abstract class BooleanLiteral extends Literal {
}
class BTRUE extends BooleanLiteral {
}
class BFALSE extends BooleanLiteral {
}
abstract class Blank extends Subject, Obj {
}
class EmptyList extends Blank {
}
class PredicateObjectList extends Blank {
	reference AbstractPredicateObject[0..*] predicateObjects;
}
class ItemList {
	reference Obj[1..*] obj;
}
class Collection extends Blank {
	reference ItemList[0..1] itemList;
}
abstract class Resource extends Subject, Obj {
}
class NodeID extends Blank {
	reference Name[1..1] name;
}
class Qname extends Resource {
	reference Name[0..1] prefix;
	reference Name[0..1] name;
}
class IsA extends Verb {
}
class Uriref extends Resource {
	attribute EString[1..1] value;
}
class Name {
	attribute EString[1..1] value;
}
class QuotedString {
	attribute EString[1..1] value;
}
",11893,ok,ok,ok
60060,Loops that have at least two statements,"pattern loopWithMultipleStatements(loop: Loop, statement1: Statement, statement2: Statement) {
    Loop.statement(loop, statement1);
    Loop.statement(loop, statement2);
    statement1 != statement2;
}",repo-ecore-all/data/ZeeQ320/DVA436/projet/org.eclipse.projectMDE.project/model/behaviour.ecore,"abstract class Loop extends Statement {
	reference Statement[1..*] statement;
}
class forLoop extends Loop {
	reference Operator[1..1] iteration;
	reference Operator[1..1] conditionStop;
	reference Affectation[1..1] startValue;
}
abstract class Operator {
	reference Variable[1..1] element1;
	reference Variable[0..1] element2;
}
class additionOperator extends Operator {
}
class soustractionOperator extends Operator {
}
class multiplicationOperator extends Operator {
}
class divisionOperator extends Operator {
}
class equalOperator extends Operator {
}
class inferiorOperator extends Operator {
}
class superiorOperator extends Operator {
}
class inferiorOrEqualOperator extends Operator {
}
class superiorOrEqualOperator extends Operator {
}
class andOperator extends Operator {
}
class orOperator extends Operator {
}
class noOperator extends Operator {
}
abstract class Variable extends Statement {
	attribute EString[0..1] name;
}
class intVariable extends Variable {
	attribute EInt[0..1] value;
}
class doubleVariable extends Variable {
	attribute EDouble[0..1] value;
}
class boolVariable extends Variable {
	attribute EBoolean[0..1] value;
}
class charVariable extends Variable {
	attribute EChar[0..1] value;
}
class stringVariable extends Variable {
	attribute EString[0..1] value;
}
abstract class Conditionnal extends Statement {
	reference Statement[1..*] statement;
}
class ifConditionnal extends Conditionnal {
	reference Operator[1..1] condition;
	reference elseConditionnal[0..1] elseC;
}
class elseConditionnal extends Conditionnal {
}
abstract class Statement {
	attribute EInt[1..1] id;
}
abstract class Affectation extends Statement {
	reference Variable[1..1] receivingVariable;
}
class operationAffectation extends Affectation {
	reference Operator[1..1] receivedOperation;
}
class variableAffectation extends Affectation {
	reference Variable[1..1] receivedVariable;
}
class intAffectation extends Affectation {
	attribute EInt[1..1] receivedInt;
}
class doubleAffectation extends Affectation {
	attribute EDouble[1..1] receivedDouble;
}
class boolAffectation extends Affectation {
	attribute EBoolean[1..1] receivedBool;
}
class charAffectation extends Affectation {
	attribute EChar[1..1] receivedChar;
}
class stringAffectation extends Affectation {
	attribute EString[1..1] receivedString;
}
class writeConsole extends Statement {
	reference Variable[0..*] variable;
	reference Operator[0..*] operation;
}
",19969,yes,yes,yes
46962,Find all bookings that have a receipt creator associated with them or are not paid,"pattern receiptCreatorOrNotPaidBooking(booking: Booking){
    Booking.receiptCreator(booking, _);
} or {
    Booking.isPaid(booking, false);
}",repo-ecore-all/data/lotstrom/Hotel-Management-System/Mac Version/IMPL/newClasses.ecore,"class Customer extends Booker {
	attribute String[1..1] firstName;
	attribute String[1..1] lastName;
	attribute ELong[1..1] personalNum;
	attribute String[1..1] address;
	attribute Integer[1..1] zipCode;
	attribute String[1..1] city;
	attribute String[1..1] country;
	attribute ELong[1..1] phoneNum;
	attribute String[1..1] email;
	reference Booking[1..1] booking;
	attribute Integer[1..1] bookingNum;
	reference CreditCard[1..1] creditCard;
	attribute Integer[1..1] bookingCost;
}
class Booking extends RoomProvider, Biller, Booker, ServiceProvider, Validator, CustomerProvides {
	attribute String[1..1] checkInDate;
	attribute String[1..1] checkOutDate;
	attribute Integer[1..1] conformationNum;
	attribute Integer[1..1] cost;
	reference ReceiptCreator[1..1] receiptCreator;
	reference Database[1..1] databaseHandler;
	attribute String[1..1] roomType;
	attribute String[1..1] services;
	attribute Boolean[1..1] isPaid;
}
class ReceiptCreator extends Receipt {
}
abstract class Receipt {
}
class Database extends DB_interface {
}
abstract class DB_interface {
}
abstract class RoomProvider {
}
abstract class Biller {
}
abstract class Booker {
}
abstract class ServiceProvider {
}
abstract class Validator {
}
abstract class CustomerProvides {
}
class CreditCard {
	attribute String[1..1] creditCardNumber;
	attribute String[1..1] cvc;
	attribute Integer[1..1] month;
	attribute Integer[1..1] year;
	attribute String[1..1] firstName;
	attribute String[1..1] lastName;
}
class Guest extends Customer, GuestBiller, GuestInterface {
	attribute String[1..1] checkInDate;
	attribute String[1..1] checkOutDate;
	attribute Integer[1..1] roomNum;
	attribute Boolean[1..1] checkedIn;
	attribute Boolean[1..1] checkedOut;
	attribute String[1..1] addedServices;
	attribute Integer[1..1] extraDays;
	attribute Integer[1..1] cost;
	attribute Boolean[1..1] bookingPaid;
}
abstract class GuestBiller {
}
abstract class GuestInterface {
}
class RoomType {
	attribute String[1..1] type;
	attribute Integer[1..1] price;
}
class Room extends RoomType {
	attribute Integer[1..1] roomNum;
	attribute Boolean[1..1] status;
}
class InformationValidator extends Validator {
}
class ServiceHandler extends ServiceProvider, ServiceHandlerInterface {
	reference Service[1..1] service;
}
class Service extends ServiceType {
	attribute Integer[1..1] id;
	attribute Boolean[1..1] status;
}
class ServiceType {
	attribute String[1..1] type;
	attribute Integer[1..1] price;
}
abstract class ServiceHandlerInterface {
}
class Manager extends ManagerInterface, RoomHandlerInterface, ServiceHandlerInterface {
	attribute String[1..1] userName;
	attribute String[1..1] password;
	reference RoomHandler[1..1] roomHandler;
	reference ServiceHandler[1..1] serviceHandler;
}
class RoomHandler extends RoomProvider, RoomHandlerInterface, GuestInterface {
	reference Room[1..1] room;
	reference Database[1..1] database;
}
abstract class RoomHandlerInterface {
}
abstract class ManagerInterface {
}
class Billing extends Biller, CustomerProvides, GuestBiller {
	attribute Integer[1..1] totalCost;
	attribute Boolean[1..1] isPaid;
}
class BankComponent extends CustomerProvides, AdministratorProvides {
}
abstract class AdministratorProvides {
}
class LoginChecker extends ManagerInterface {
	reference Manager[1..1] manager;
}
",6871,yes,yes,yes
56925,Flor with a specific plaga nombre:,"pattern florWithPlagaNombre(flor: Flor, nombre: EString) {
    Flor.plaga(flor, plaga);
    Plaga.nombre(plaga, nombre);
}",repo-ecore-all/data/JZulRes/OCL-AGROCRTD/Agroc/model/agroc.ecore,"class CamaDeCultivo {
	attribute EInt[0..1] id;
	attribute EDouble[0..1] porcentajeDeHumedad;
	attribute EDouble[0..1] porcentajeDeHidratacion;
	attribute EDouble[0..1] extencion;
	reference Reporte[0..*] reporte;
	reference Flor[0..*] flor;
}
class SensorDeRiego {
	attribute EInt[0..1] id;
	attribute EFloat[0..1] cantidadDeAgua;
	attribute EFloat[0..1] cantidadDeSuministro;
	attribute EDate[0..1] fechaDeRiego;
	attribute EString[0..1] estado;
}
class Cultivo {
	attribute EString[0..1] ubicacion;
	attribute EString[0..1] descripcion;
	attribute EString[0..1] condicion;
	reference SensorDeRiego[0..*] sensorderiego;
	reference CamaDeCultivo[0..*] camadecultivo;
}
class Reporte {
	attribute EString[0..1] estado;
	attribute EDate[0..1] fecha;
	attribute EString[0..1] descripcion;
}
class Flor {
	attribute EInt[0..1] id;
	attribute EString[0..1] especie;
	attribute EString[0..1] estado;
	reference Plaga[0..*] plaga;
}
class Plaga {
	attribute EInt[0..1] id;
	attribute EString[0..1] nombre;
	attribute EString[0..1] tratamiento;
}
class Suelo {
	attribute EInt[0..1] id;
	attribute EString[0..1] ubicacion;
	attribute EString[0..1] descripcion;
	reference Cultivo[0..*] cultivo;
}
class Ruta {
	attribute EInt[0..1] id;
	attribute EString[0..1] ubicacion;
	attribute EFloat[0..1] duracion;
	reference Cultivo[0..*] cultivo;
}
class Suministro {
	attribute EInt[0..1] id;
	attribute EDate[0..1] fechaDeCaducidad;
	attribute EString[0..1] nombre;
	attribute EString[0..1] descripcion;
	attribute EFloat[0..1] precio;
}
class Abono {
	attribute EInt[0..1] id;
	attribute EString[0..1] descripcion;
	attribute EString[0..1] composicion;
	attribute EFloat[0..1] cantidad;
}
class Fertilizante {
	attribute EInt[0..1] id;
	attribute EString[0..1] descripcion;
	attribute EString[0..1] composicion;
	attribute EFloat[0..1] cantidad;
}
class Operario extends Empleado {
	attribute EInt[0..1] estado;
	reference Fertilizante[0..1] aplicaFertilizante;
	reference Abono[0..1] aplicaAbono;
	reference Ruta[0..1] RecorreRuta;
	reference Reporte[0..1] generaReporte;
}
class Supervisor extends Empleado {
	reference Plaga[0..1] ReportaPlaga;
	reference CamaDeCultivo[0..1] controlaCamadecultivo;
}
class Empleado {
	attribute EInt[0..1] codigoEmpleado;
	attribute EString[0..1] nombre;
	attribute EString[0..1] apellido;
	attribute EString[0..1] Horario;
}
class IngenieroAgronomo extends Empleado {
	reference Fertilizante[0..1] preparaFertilizante;
	reference Abono[0..1] preparaAbono;
	reference Ruta[0..1] PlanificaRuta;
	reference Suelo[0..1] AnalizaSuelo;
	reference Suministro[0..1] RegulaSuministro;
	reference SensorDeRiego[0..1] RegistraSensorderiego;
	reference Plaga[0..1] RegistraPlaga;
	reference Plaga[0..1] erradicaPlaga;
	reference Flor[0..1] RegistraFlor;
	reference Reporte[0..1] SupervisaReporte;
}
",16834,yes,ok,yes
63223,All capabilities that have a specified colour attribute,"pattern capabilitiesWithColour(capability: Capability){
    Capability.colour(capability, _);
}",repo-ecore-all/data/Frankablu/CATMOS/catmos_gui/workspace/CapabilityOverTime/model/CapabilityOverTime.ecore,"class CapabilityOverTime {
	reference TimePeriod[0..*] timePeriods;
}
class TimePeriod {
	attribute EString[0..1] name;
	attribute EString[0..1] startDate;
	attribute EString[0..1] endDate;
	reference OurObject[0..*] ourObjects;
}
class OurObject {
}
class Capability extends OurObject {
	attribute EString[0..1] name;
	attribute EBooleanObject[0..1] searchObjective;
	attribute EBooleanObject[0..1] standAlone;
	attribute EIntegerObject[0..1] reuse;
	attribute EString[0..1] startDate;
	attribute EString[0..1] endDate;
	attribute EFloatObject[0..1] status;
	attribute EString[0..1] colour;
	reference Measurement[0..1] accumulation;
	reference Measurement[0..*] measurements;
	reference Capability[0..*] decomposes;
	reference Capability[0..*] satisfiedBy;
	reference Capability[0..*] satisfies;
}
class Measurement {
	attribute EString[0..1] name;
	attribute EFloatObject[0..1] criticalValue;
	attribute EFloatObject[0..1] benchmarkValue;
	attribute EFloatObject[0..1] providedValue;
	reference QualitativeValue[0..*] criticalValues;
	reference QualitativeValue[0..*] benchmarkValues;
	reference QualitativeValue[0..*] providedValues;
	attribute EString[0..1] script;
}
class QualitativeValue {
	attribute EString[0..1] name;
}
",23132,no,yes,no
57096,Figures with properties containing a specific value,"pattern figureWithPropertyContainingValue(figure : J_Figure, property : J_Property, value : EString) {
    J_Figure.properties(figure, property);
    J_Property.value(property, propValue);
    check(propValue.contains(value));
}",repo-ecore-all/data/ygarba/mde4wsn/development/workspace(helios)/Poseidon/bin/models/poseidon-core.ecore,"class PoseidonCoreElement extends MetamodelElementWrapper {
}
class J_Property extends PoseidonCoreElement {
	attribute EString[0..1] value;
	attribute EString[0..1] name;
}
class J_Figure extends J_FigureContainer {
	attribute EString[0..1] id;
	attribute EString[0..1] recreator;
	attribute EString[0..1] anchor1Id;
	attribute EString[0..1] anchor2Id;
	attribute EString[0..1] containedName;
	attribute EString[0..1] text;
	attribute EString[0..1] virtualPoint;
	attribute EString[0..1] points;
	attribute EString[0..1] brOffset;
	attribute EString[0..1] tlOffset;
	attribute EString[0..1] show;
	attribute EString[0..1] autosized;
	attribute EString[0..1] icon;
	attribute EString[0..1] point;
	attribute EString[0..1] dimensions;
	attribute EString[0..1] suppressAttributes;
	attribute EString[0..1] suppressOperations;
	attribute EString[0..1] suppressContents;
	attribute EString[0..1] offset;
	attribute EString[0..1] min;
	attribute EString[0..1] accessibility;
	attribute EString[0..1] classifierScope;
	attribute EString[0..1] type;
	reference EObject[0..1] subject;
}
class J_FigureContainer extends PoseidonCoreElement {
	reference J_Figure[0..*] figures;
	reference J_Property[0..*] properties;
}
class J_Diagram extends J_FigureContainer {
	attribute EInt[0..1] lastFigureId;
	attribute EString[0..1] saveTime;
	attribute EString[0..1] savedBy;
	attribute EString[0..1] type;
}
class J_DiagramHolder extends PoseidonCoreElement {
	reference J_Diagram[0..*] diagram;
}
class PoseidonCoreRootElement extends PoseidonCoreElement {
}
abstract class MetamodelElementWrapper {
	attribute EString[0..1] __uuid;
	attribute EInt[0..1] j_deleted;
	reference J_DiagramHolder[0..1] j_diagramHolder;
	attribute EBoolean[0..1] __readOnly;
	attribute EString[0..1] __poseidonName;
	attribute EBoolean[0..1] __poseidonNamespace;
	reference EObject[0..*] __ownedMember;
	reference EObject[1..1] __source;
	reference EObject[1..1] __target;
	attribute EBoolean[0..1] __poseidonEdge;
	attribute EString[0..1] __poseidonRole;
}
",17005,ok,no,no
61644,Classes with their attributes,"pattern classWithAttributes(class : Class, attribute : Attribute) {
    Class.attribute(class, attribute);
}",repo-ecore-all/data/djhuertasg/spacescheduling_mdd/SpaceScheduling.ecore,"class Class {
	reference Method[0..*] method;
	reference Attribute[0..*] attribute;
	attribute EString[0..1] name;
}
class Relations {
	reference Class[0..*] source;
	reference Class[0..*] target;
	attribute EString[0..1] sourceCardinality;
	attribute EString[0..1] targetCardinality;
}
class ClassMetamodel {
	reference Class[1..*] class;
	reference Relations[0..*] relations;
}
class Composition extends Relations {
}
class Simple extends Relations {
}
class Agregation extends Relations {
}
class Heritage extends Relations {
}
class Attribute {
	reference Primitive_type[1..1] primitive_type;
	attribute EString[0..1] name;
}
class Method {
	reference Return_type[0..1] return_type;
	attribute EString[0..1] name;
	attribute EString[0..1] visibility;
}
class Return_type {
	reference Primitive_type[1..1] primitive_type;
}
class Primitive_type {
	attribute EIntegerObject[0..1] int;
	attribute EString[0..1] string;
	attribute EDate[0..1] datetime;
	attribute EBooleanObject[0..1] boolean;
}
class Space_Scheduling {
	reference ClassMetamodel[1..1] classmetamodel;
	reference SalilsJs[1..1] salilsjs;
	reference Configuration[1..*] configuration;
	reference Assets[0..*] assets;
}
class SalilsJs {
	reference Model[1..*] model;
	reference Controller[1..*] controller;
	reference View[1..*] view;
}
class Model {
	attribute EString[0..1] name;
	reference Attributes[1..*] attributes;
}
class View {
	attribute EString[0..1] name;
	reference Assets[0..*] call;
}
class Controller {
	reference Helpers[1..*] helpers;
	reference Actions[1..*] actions;
	reference Model[1..*] use;
	attribute EString[0..1] name;
}
class Attributes {
	attribute EString[0..1] name;
	attribute EType[0..1] type;
}
class DTO extends Model {
}
class ORM extends Model {
}
class Helpers {
	attribute EString[0..1] name;
}
class Actions {
	attribute EString[0..1] FriendlyName;
	attribute EString[0..1] Description;
	attribute EString[0..1] Inputs;
	attribute EString[0..1] Outputs;
	attribute EString[0..1] Function;
	reference View[1..1] redirect;
}
enum EType {
	String;
	Number;
	Boolean;
	Json;
	Ref;
}
class Pages extends View {
}
class Layout extends View {
	reference Pages[0..*] pages;
}
class Configuration {
	attribute EString[0..1] name;
}
class Routes extends Configuration {
}
class ModelConfig extends Configuration {
}
class DataBaseConfig extends Configuration {
}
class EmailConfig extends Configuration {
}
class NewEClass29 {
}
class Assets {
	reference Javascript[0..*] javascript;
	reference Styles[0..*] styles;
	reference Images[0..*] images;
}
class Images {
	attribute EString[0..1] name;
}
class Javascript {
	attribute EString[0..1] name;
}
class Styles {
	attribute EString[0..1] name;
}
class Pages extends Javascript {
}
class Dependences extends Javascript {
}
",21553,yes,yes,yes
53233,Applications that have at least two models with the same name,"pattern duplicateModelsInApplication(app : Application, model1 : Model, model2 : Model) {
    Application.models(app, model1);
    Application.models(app, model2);
    Model.name(model1, name);
    Model.name(model2, name);
    model1 != model2;
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/backbone.ecore,"class Application extends NamedElement {
	reference Model[0..*] models;
	reference Collection[0..*] collections;
	reference Router[1..1] router;
	reference View[0..*] views;
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
class Model extends NamedElement {
	reference Attribute[0..*] attributes;
	reference Reference[0..*] references;
	reference Operation[0..*] operations;
	reference Application[1..1] application;
}
class Attribute extends NamedElement {
	attribute EString[0..1] defaultValue;
	attribute CardinalityKind[1..1] cardinality;
}
class Reference extends NamedElement {
	reference Model[1..1] type;
	attribute CardinalityKind[1..1] cardinality;
}
class Operation extends NamedElement {
	reference Parameter[0..*] parameters;
}
class Parameter extends NamedElement {
}
class Collection extends NamedElement {
	reference Model[0..1] model;
	reference Application[1..1] application;
}
class Router extends NamedElement {
	reference RouterMapping[0..*] mappings;
	reference Application[1..1] application;
}
class RouterMapping {
	attribute EString[1..1] path;
	reference View[1..1] view;
}
class View extends NamedElement {
	reference Operation[0..*] operations;
	reference Application[1..1] application;
}
enum CardinalityKind {
	ONE;
	MANY;
}
",13142,yes,yes,yes
61085,Count the number of AddAuthSystemsOptions.,"pattern countAddAuthSystemsOptions(cnt: java Integer){
    cnt == count find addAuthSystemsOptions(_);
}

//Auxiliary pattern
pattern addAuthSystemsOptions(addAuthSystemsOptions: AddAuthSystemsOptions){
    AddAuthSystemsOptions(addAuthSystemsOptions);
}",repo-ecore-all/data/SysFera/vishnu/core/model/UMS_Data_CLI.ecore,"class AddUserOptions {
	attribute EString[1..1] firstname;
	attribute EString[1..1] lastname;
	attribute PrivilegeType[1..1] privilege;
	attribute EString[1..1] email;
}
class UpdateUserOptions {
	attribute EString[1..1] userId;
	attribute EString[0..1] firstname;
	attribute EString[0..1] lastname;
	attribute PrivilegeType[0..1] privilege;
	attribute EString[0..1] email;
	attribute StatusType[0..1] status;
}
class AddMachineOptions {
	attribute EString[1..1] name;
	attribute EString[1..1] site;
	attribute EString[1..1] language;
	attribute EString[1..1] sshPublicKeyFile;
	attribute EString[1..1] machineDescription;
}
class UpdateMachineOptions {
	attribute EString[1..1] machineId;
	attribute EString[0..1] name;
	attribute EString[0..1] site;
	attribute EString[0..1] machineDescription;
	attribute EString[0..1] language;
	attribute StatusType[0..1] status;
	attribute EString[0..1] sshPublicKeyFile;
}
class AddLocalAccountOptions {
	attribute EString[1..1] userId;
	attribute EString[1..1] machineId;
	attribute EString[1..1] acLogin;
	attribute EString[1..1] sshKeyPath;
	attribute EString[1..1] homeDirectory;
}
class AddAuthSystemsOptions {
	attribute EString[1..1] name;
	attribute EString[1..1] URI;
	attribute EString[1..1] authLogin;
	attribute EString[1..1] authPassword;
	attribute EncryptionMethod[1..1] userPasswordEncryption;
	attribute AuthType[1..1] type;
	attribute EString[0..1] ldapBase;
}
class UpdateAuthSystemsOptions {
	attribute EString[1..1] authSystemId;
	attribute EString[0..1] name;
	attribute EString[0..1] URI;
	attribute EString[0..1] authLogin;
	attribute EString[0..1] authPassword;
	attribute EncryptionMethod[0..1] userPasswordEncryption;
	attribute AuthType[0..1] type;
	attribute StatusType[0..1] status;
	attribute EString[0..1] ldapBase;
}
class UpdateLocalAuthAccOptions {
	attribute EString[1..1] authSystemId;
	attribute EString[0..1] userId;
	attribute EString[0..1] acLogin;
}
class SetSshKeyOptions {
	attribute EBoolean[0..1] addOption;
	attribute EBoolean[0..1] removeOption;
}
",20994,yes,yes,yes
47486,Find all rules with exactly 1 condition.,"pattern ruleWithOneCondition(rule: Rule) {
    cnt == count find conditionsOfRule(rule, _);
    check(cnt==1);
}

//Auxiliary pattern
pattern conditionsOfRule(rule: Rule, condition: Condition){
    Rule.condition(rule, condition);
}",repo-ecore-all/data/anestis27/External-DSL_NodeServer/Project/org.xtext.example.mydsl/model/generated/MyDsl.ecore,"class Model {
	reference Member[0..*] members;
}
class Member {
}
class Entity extends Member {
	attribute EString[0..1] name;
	reference IsServer[0..1] is;
	reference Attribute[0..*] attributes;
}
class IsServer {
	attribute EString[0..1] value;
}
class Attribute {
	attribute EString[0..1] name;
	reference ValueType[0..1] value;
}
class ValueType {
	reference ElementType[0..1] elementType;
}
class ElementType {
}
class EntityType extends ElementType {
	reference Entity[0..1] entity;
}
class BasicType extends ElementType {
}
class ArrayType extends ElementType {
	reference ArrayElement[0..*] arrayElements;
}
class ArrayElement {
	reference BasicType[0..1] value;
}
class Verb extends Member {
	attribute EString[0..1] verb;
	attribute EString[0..1] qa;
	reference Rule[0..*] rules;
}
class Rule {
	reference Condition[0..1] condition;
	reference ArrayType[0..1] url;
}
class Condition {
	reference Expression[0..1] expression;
}
class Expression {
}
class IntType extends BasicType {
	attribute EInt[0..1] value;
}
class StringType extends BasicType {
	attribute EString[0..1] value;
}
class BoolType extends BasicType {
	attribute EString[0..1] value;
}
class Or extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class And extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class Equality extends Expression {
	reference Expression[0..1] left;
	attribute EString[0..1] op;
	reference Expression[0..1] right;
}
class Comparison extends Expression {
	reference Expression[0..1] left;
	attribute EString[0..1] op;
	reference Expression[0..1] right;
}
class Plus extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class Minus extends Expression {
	reference Expression[0..1] left;
	reference Expression[0..1] right;
}
class MulOrDiv extends Expression {
	reference Expression[0..1] left;
	attribute EString[0..1] op;
	reference Expression[0..1] right;
}
class Not extends Expression {
	reference Expression[0..1] expression;
}
class IntConstant extends Expression {
	attribute EInt[0..1] value;
}
class StringConstant extends Expression {
	attribute EString[0..1] value;
}
class BoolConstant extends Expression {
	attribute EString[0..1] value;
}
class VariableConstant extends Expression {
	reference Attribute[0..1] value;
}
",7395,yes,yes,yes
53727,Retrieve all fields that are either of type 'int' or have a default value,"pattern intTypeOrDefaultValue(field: Field){
    Field.type(field, Type::int);
} or {
    Field.defaultValue(field, _);
}",repo-ecore-all/data/gourch/rds2sql/rds2sql/metamodels/genericSql.ecore,"abstract class NamedElement {
	attribute EString[0..1] name;
	attribute EString[0..1] comment;
}
enum Type {
	int;
	bigInt;
	boolean;
	byteArray;
	date;
	double;
	varchar;
	undefined;
}
class DataBase extends NamedElement {
	reference Table[1..*] tables;
}
class Table extends NamedElement {
	reference PrimaryKey[0..1] primaryKey;
	reference ForeignKey[0..*] foreignKeys;
	reference Field[1..*] fields;
	reference Constraint[0..*] constraints;
	reference DataBase[1..1] database;
}
class PrimaryKey extends NamedElement {
	reference Field[1..*] primaryFields;
	reference Table[0..1] table;
}
class ForeignKey extends NamedElement {
	reference Field[0..*] foreignFields;
	reference Table[0..1] table;
	reference PrimaryKey[1..1] refersTo;
}
class Field extends NamedElement {
	attribute EBoolean[0..1] notNull;
	attribute EBoolean[0..1] unique;
	attribute Type[0..1] type;
	attribute EBoolean[0..1] autoIcrement;
	reference Table[1..1] table;
	attribute EInt[0..1] size;
	attribute EString[0..1] defaultValue;
	attribute EString[0..1] specificType;
}
class Check extends Constraint {
	attribute EString[0..1] expression;
}
class Unique extends Constraint {
}
abstract class Constraint {
	reference Field[1..*] constrainedFields;
}
",13636,yes,yes,yes
51264,Check if there are any node tests with a name.,"pattern nodeTestWithName() {
    find nameTest(_);
}

//Auxiliary pattern
pattern nameTest(nodeTest: NodeTest){
    NameTest(nodeTest);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/XPath1.ecore,"abstract class LocatedElement {
	attribute String[0..1] location;
	attribute String[0..*] commentsBefore;
	attribute String[0..*] commentsAfter;
}
abstract class NamedElement extends LocatedElement {
	attribute String[1..1] name;
}
abstract class Expression extends LocatedElement {
}
class VariableExp extends Expression, NamedElement {
}
class PathExpression extends Expression {
	attribute Boolean[1..1] isAbsolute;
	reference Step[0..*] steps;
}
class Step extends LocatedElement {
	reference Axis[1..1] axis;
	reference NodeTest[1..1] nodeTest;
	reference Predicate[0..*] predicates;
}
class Predicate extends LocatedElement {
	reference Expression[1..1] expression;
}
class OperatorCallExp extends Expression, NamedElement {
	reference Expression[1..1] left;
	reference Expression[0..1] right;
}
class FunctionCallExp extends Expression, NamedElement {
	reference Expression[0..*] arguments;
}
abstract class LiteralExp extends Expression {
}
class IntegerExp extends LiteralExp {
	attribute Integer[1..1] symbol;
}
class StringExp extends LiteralExp {
	attribute String[1..1] symbol;
}
abstract class NodeTest extends LocatedElement {
}
class NameTest extends NodeTest, NamedElement {
}
class WildCardTest extends NodeTest {
}
class IsNodeTest extends NodeTest {
}
class IsTextTest extends NodeTest {
}
abstract class Axis extends LocatedElement {
}
class AncestorAxis extends Axis {
}
class AncestorOrSelfAxis extends Axis {
}
class AttributeAxis extends Axis {
}
class ChildAxis extends Axis {
}
class DescendantAxis extends Axis {
}
class DescendantOrSelfAxis extends Axis {
}
class FollowingAxis extends Axis {
}
class FollowingSiblingAxis extends Axis {
}
class NamespaceAxis extends Axis {
}
class ParentAxis extends Axis {
}
class PrecedingAxis extends Axis {
}
class PrecedingSiblingAxis extends Axis {
}
class SelfAxis extends Axis {
}
",11173,spec,spec,spec
57141,Feature types that are either optional or deprecated,"pattern optionalOrDeprecatedFeatureType(featureType: FeatureType) {
    FeatureType.optional(featureType, true);
} or {
    DeprecatableElement.deprecated(featureType, true);
}",repo-ecore-all/data/Yakindu/statecharts/plugins/org.yakindu.sct.model.sgen/model/emf/sgen.ecore,"class GeneratorModel {
	reference GeneratorEntry[0..*] entries;
	attribute EString[0..1] generatorId;
	reference Property[0..*] properties;
}
class GeneratorConfiguration {
	reference FeatureConfiguration[0..*] configurations;
}
class FeatureType extends NamedElement, DeprecatableElement {
	reference FeatureParameter[0..*] parameters;
	reference FeatureTypeLibrary[1..1] library;
	attribute EBoolean[0..1] optional;
}
class FeatureParameter extends NamedElement, DeprecatableElement {
	reference FeatureType[0..1] featureType;
	attribute EBoolean[0..1] optional;
	attribute ParameterTypes[0..1] parameterType;
}
class FeatureConfiguration {
	reference FeatureType[0..1] type;
	reference FeatureParameterValue[0..*] parameterValues;
}
class GeneratorEntry {
	reference EObject[0..1] elementRef;
	reference FeatureConfiguration[0..*] features;
	attribute EString[0..1] contentType;
}
class FeatureParameterValue {
	reference FeatureParameter[0..1] parameter;
	reference FeatureConfiguration[0..1] featureConfiguration;
	reference Expression[0..1] expression;
}
class FeatureTypeLibrary {
	reference FeatureType[0..*] types;
	attribute EString[0..1] name;
}
enum ParameterTypes {
	STRING;
	FLOAT;
	BOOLEAN;
	INTEGER;
}
class DeprecatableElement {
	attribute EBoolean[1..1] deprecated;
	attribute EString[0..1] comment;
}
",17050,yes,yes,yes
43330,Permissions with their associated operations,"pattern permissionWithOperations(permission : Permission, operation : Operation) {
    Permission.operations(permission, operation);
}",repo-ecore-all/data/AmeniBF/GemRBAC-model/GemRBAC-Ecore/model/GemRBAC.ecore,"class User {
	attribute EString[0..1] idUser;
	reference Role[1..*] roles;
	reference Session[0..*] sessions;
	reference Delegation[0..*] delegation;
	reference Delegation[0..*] recieveddelegation;
	reference Delegation[0..*] revocation;
	reference History[0..*] user;
	reference Role[0..*] delegatedRoles;
	reference RBACContext[0..1] userContext;
	reference History[0..*] userLog;
}
class Role {
	attribute EString[0..1] idRole;
	reference User[1..*] users;
	attribute EBoolean[0..1] isDependent;
	attribute EBoolean[0..1] isStrong;
	attribute EBoolean[0..1] isCascading;
	reference Session[0..*] sessionsA;
	reference Session[0..*] sessionsE;
	reference Permission[1..*] permissions;
	reference Role[0..*] juniors;
	reference Role[0..*] seniors;
	reference User[0..*] user;
	reference Delegation[0..*] delegation;
	reference RBACContext[0..*] roleContext;
	reference History[0..*] logRole;
}
class Session {
	attribute EString[0..1] idSession;
	reference Role[0..*] activeRoles;
	reference Role[0..*] enabledRoles;
	reference User[1..1] user;
}
class Permission {
	reference Role[1..*] roles;
	reference Operation[1..*] operations;
	attribute EString[0..1] idPermission;
	reference Object[1..1] object;
	reference Delegation[0..*] delegation;
	reference History[0..*] logPermission;
	reference RBACContext[0..*] permissionContext;
}
class Operation {
	attribute EString[0..1] idOperation;
	reference Permission[1..*] permissions;
	reference History[0..*] logOperation;
}
class Object {
	attribute EString[0..1] idObject;
	reference Permission[1..*] permissions;
	reference History[0..*] logObject;
}
abstract class RBACContext {
	reference History[0..*] logContext;
	reference Permission[0..1] permission;
	attribute EString[0..1] idContext;
}
class TemporalContext extends RBACContext {
	attribute EDate[0..1] time;
}
class SpatialContext extends RBACContext {
	attribute EString[0..1] location;
}
class Delegation {
	attribute EString[0..1] idDelegation;
	attribute EBoolean[0..1] isRevoked;
	attribute delegationType[0..1] isTransfer;
	attribute EBoolean[0..1] isTotal;
	attribute EDate[0..1] startDate;
	attribute EDate[0..1] endDate;
	reference User[1..1] delegatorUser;
	reference User[1..1] delegateUser;
	reference User[0..1] revokingUser;
	reference Delegation[0..*] delegatedDelegation;
	reference Permission[1..*] delegatedPermissions;
	attribute EInt[0..1] maxDepth;
	reference Role[1..1] delegatedRole;
}
class History {
	attribute EString[0..1] idLog;
	reference Role[1..1] role;
	reference Object[1..1] object;
	reference Operation[1..1] operation;
	reference Permission[1..1] permission;
	reference RBACContext[1..2] context;
	reference User[1..1] user;
}
class RBACUtility {
	attribute EInt[0..1] maxPermission;
	attribute EInt[0..1] maxActiveRole;
	attribute EInt[0..1] maxRole;
	reference Operation[0..*] businessTaskList;
	reference Permission[0..*] boundedPermissions;
}
class Root {
	reference RBACUtility[0..1] sys;
	reference Object[0..*] Obj;
	reference Operation[0..*] op;
	reference RBACContext[0..*] c;
	reference Permission[0..*] p;
	reference Role[0..*] r;
	reference Session[0..*] s;
	reference User[0..*] u;
	reference Delegation[0..*] d;
	reference History[0..*] log;
}
enum delegationType {
	grant;
	strong;
	weakStatic;
	weakDynamic;
}
",3239,yes,yes,yes
43117,All SEIntegerCalculationExpressions with the ADD operator,"pattern addCalculationExpression(expression: SEIntegerCalculationExpression){
    SEIntegerCalculationExpression.operator(expression, SEIntegerCalculationOperator::ADD);
}",repo-ecore-all/data/manuelleduc/sle18_artifact/iot/simpleexpressions.model/model/simpleexpressions.ecore,"abstract class SEIntegerExpression extends SEExpression {
	reference SEIntegerVariable[0..1] operand2;
	reference SEIntegerVariable[0..1] operand1;
}
class SEIntegerCalculationExpression extends SEIntegerExpression {
	reference SEIntegerVariable[1..1] assignee;
	attribute SEIntegerCalculationOperator[1..1] operator;
}
class SEIntegerComparisonExpression extends SEIntegerExpression {
	reference SEBooleanVariable[1..1] assignee;
	attribute SEIntegerComparisonOperator[1..1] operator;
}
class SEBooleanValue extends SEValue {
	attribute EBoolean[1..1] value;
}
class SEIntegerValue extends SEValue {
	attribute EInt[1..1] value;
}
class SEBooleanBinaryExpression extends SEBooleanExpression {
	reference SEBooleanVariable[1..1] operand1;
	reference SEBooleanVariable[1..1] operand2;
	attribute SEBooleanBinaryOperator[1..1] operator;
}
abstract class SEValue extends SEExpression {
}
class SEBooleanVariable extends SEVariable {
}
abstract class SEExpression {
}
class SEIntegerVariable extends SEVariable {
}
class SEBooleanUnaryExpression extends SEBooleanExpression {
	reference SEBooleanVariable[1..1] operand;
	attribute SEBooleanUnaryOperator[1..1] operator;
}
abstract class SEBooleanExpression extends SEExpression {
	reference SEBooleanVariable[1..1] assignee;
}
enum SEIntegerCalculationOperator {
	ADD;
	SUBRACT;
}
enum SEIntegerComparisonOperator {
	SMALLER;
	SMALLER_EQUALS;
	EQUALS;
	GREATER_EQUALS;
	GREATER;
}
enum SEBooleanUnaryOperator {
	NOT;
}
enum SEBooleanBinaryOperator {
	AND;
	OR;
}
abstract class SEVariable extends SEExpression {
	reference SEValue[0..1] currentValue;
	attribute EString[0..1] name;
	reference SEValue[0..1] initialValue;
}
",3026,yes,yes,yes
59318,Graph configurations with edges having a specific line width,"pattern graphConfWithEdgeLineWidth(graphConf : DiagramGraphConf, edge : EdgeGraphConf, width : EInt) {
    DiagramGraphConf.edge(graphConf, edge);
    AbstractGraphConf.lineWidth(edge, width);
}",repo-ecore-all/data/bmaggi/Topcased/plugins/modeler/org.topcased.modeler.graphconf/model/graphconf.ecore,"abstract class AbstractGraphConf {
	attribute EString[0..1] presentation;
	attribute Color[0..1] defaultForegroundColor;
	attribute Font[0..1] defaultFont;
	attribute EInt[0..1] lineWidth;
	attribute LineStyle[0..1] lineStyle;
	reference Bridge[1..1] bridge;
	reference Constraint[0..*] constraint;
}
class DiagramGraphConf {
	attribute EString[0..1] id;
	reference NodeGraphConf[0..*] node;
	reference EdgeGraphConf[0..*] edge;
	attribute Color[0..1] defaultBackgroundColor;
	attribute Color[0..1] defaultForegroundColor;
	attribute Font[0..1] defaultFont;
}
class NodeGraphConf extends AbstractGraphConf {
	attribute EInt[0..1] defaultWidth;
	attribute EInt[0..1] defaultHeight;
	attribute EInt[0..1] minimumWidth;
	attribute EInt[0..1] minimumHeight;
	attribute EInt[0..1] maximumWidth;
	attribute EInt[0..1] maximumHeight;
	attribute EBoolean[0..1] isWidthResizable;
	attribute EBoolean[0..1] isHeightResizable;
	attribute Color[0..1] defaultBackgroundColor;
}
class EdgeGraphConf extends AbstractGraphConf {
	attribute RouterType[0..1] defaultRouter;
}
enum LineStyle {
	SOLID;
	DASH;
	DOT;
	DASHDOT;
	DASHDOTDOT;
	CUSTOM;
}
enum RouterType {
	ObliqueRouter;
	RectilinearRouter;
	TreeRouter;
}
abstract class Bridge {
}
class EMFBridge extends Bridge {
	reference EClass[1..1] type;
}
class StringBridge extends Bridge {
	attribute EString[1..1] type;
}
class Constraint {
	attribute EString[1..1] language;
	attribute EString[1..1] rule;
}
",19227,ok,ok,ok
50673,Give me all preconditions with the same conditional or same condition,"pattern sameConditionalOrCondition(precondition1: Precondition, precondition2: Precondition){
    Precondition.conditional(precondition1,cond);
    Precondition.conditional(precondition2,cond);
} or {
    Precondition.condition(precondition1,condition);
    Precondition.condition(precondition2,condition);
}",repo-ecore-all/data/Tim-S/ReqLNG/de.schneidertim.requirements.nlp/model/generated/ReqLNG.ecore,"class RequirementDocument {
	reference Entity[0..*] entities;
	reference Requirement[0..*] requirement;
	reference Glossary[0..1] glossary;
}
class Entity {
	attribute EString[0..1] name;
	reference Description[0..1] description;
}
class Actor extends Entity {
}
class System extends Entity {
}
class Description {
	reference SentenceWithReferences[0..*] text;
}
class SentenceWithReferences {
	reference TextWithReferences[0..1] textWithReferences;
	attribute EString[0..1] punctuation;
}
class TextWithReferences {
	reference Entity[0..*] onlyRefs;
	reference Entity[0..*] refBefore;
	attribute EString[0..*] text;
	reference ReferenceCombination[0..*] after;
	reference Entity[0..*] finalRef;
}
class ReferenceCombination {
	reference Entity[0..*] refs;
	attribute EString[0..*] text;
}
class Requirement {
	reference System[0..1] system;
	attribute Liability[0..1] liability;
	reference RequirementEnd[0..1] end;
}
class ConditionalRequirement extends Requirement {
	reference Precondition[0..1] condition;
}
class UnconditionalRequirement extends Requirement {
	attribute EString[0..1] the;
}
class Precondition {
	attribute EString[0..1] conditional;
	reference TextWithReferences[0..1] condition;
}
enum Liability {
	shall;
	should;
	will;
}
class ActorInteraction {
	attribute EString[0..1] provide;
	attribute EString[0..1] the1;
	reference Actor[0..1] actor;
	attribute EString[0..1] with;
	attribute EString[0..1] the2;
	attribute EString[0..1] ability;
	attribute EString[0..1] to;
}
class RequirementEnd {
	reference ActorInteraction[0..1] ai;
	reference TextWithConceptsOrSynonyms[0..1] objectWithDetails;
}
class TextWithConceptsOrSynonyms {
	reference ConceptOrSynonym[0..*] onlyRefs;
	reference ConceptOrSynonym[0..*] refBefore;
	attribute EString[0..*] text;
	reference ConceptCombination[0..*] after;
	reference ConceptOrSynonym[0..*] finalRef;
}
class ConceptCombination {
	reference ConceptOrSynonym[0..*] concepts;
	attribute EString[0..*] text;
}
class Glossary {
	reference ConceptOrSynonym[0..*] concepts;
}
class ConceptOrSynonym {
	attribute EString[0..1] name;
}
class Function extends ConceptOrSynonym {
	reference FunctionSynonym[0..*] synonyms;
	reference SentenceWithReferences[0..*] description;
}
class DomainObject extends ConceptOrSynonym {
	reference DomainObjectSynonym[0..*] synonyms;
	reference SentenceWithReferences[0..*] description;
}
class FunctionSynonym extends ConceptOrSynonym {
}
class DomainObjectSynonym extends ConceptOrSynonym {
}
",10582,no,no,no
56421,Get the number of ListofEntities.,"pattern countListofEntities(cnt: java Integer){
    cnt == count find listOfEntities(_);
}

//Auxiliary pattern
pattern listOfEntities(listOfEntities: ListofEntities){
    ListofEntities(listOfEntities);
}",repo-ecore-all/data/feroshjacob/research/cs.ua.edu.segroup.mapredoop/bin/cs/ua/edu/se/MapRedoop.ecore,"class MapRedoop {
	reference Declaration[0..1] declaration;
	reference Content[0..*] content;
}
class Content {
	reference ListofEntities[0..1] entities;
	reference MRBlock[0..1] mrBlocks;
}
class ListofEntities {
	reference Entity[0..*] entities;
}
class MRBlock {
	attribute EString[0..1] loop;
	reference Mapper[0..1] mapper;
	reference Reducer[0..1] reducer;
}
class Declaration {
	attribute EString[0..1] name;
	attribute EString[0..1] superName;
}
class Mapper {
	reference Argument[0..1] inkey;
	reference Argument[0..1] invalue;
	attribute EString[0..1] outKeyType;
	attribute EString[0..1] outValueType;
	reference Block[0..1] text;
}
class Argument {
	reference Type[0..1] type;
	attribute EString[0..1] argname;
}
class ListofArgument {
	reference Type[0..1] type;
	attribute EString[0..1] argname;
}
class Reducer {
	attribute EString[0..1] inkey;
	attribute EString[0..1] invalue;
	attribute EString[0..1] outKeyType;
	attribute EString[0..1] outValueType;
	reference Block[0..1] text;
}
class Type {
	attribute EString[0..1] type;
	attribute EString[0..1] name;
}
class Entity {
	attribute EString[0..1] name;
	reference Entity[0..1] superType;
	reference Feature[0..*] features;
}
class Feature {
	reference TypeRef[0..1] type;
	attribute EString[0..1] name;
	reference ReadorWrite[0..1] readorWrite;
}
class ReadorWrite {
	attribute EString[0..1] token;
	attribute EString[0..1] readval;
	attribute EString[0..1] writeval;
}
class TypeRef {
	reference Type[0..1] referenced;
	attribute EBoolean[0..1] multi;
}
class Block {
	attribute EString[0..1] block;
	reference JavaFunction[0..*] javafunctions;
}
class JavaFunction {
	attribute EString[0..1] timeofCall;
	attribute EString[0..1] paramname;
}
",16330,yes,yes,yes
47253,Find the AbstractGroups with the highest number of components among all groups.,"pattern groupWithMostComponents(group: AbstractGroup, maxcount: java Integer) {
    maxcount == max find countComponentsInGroup(group, #);
    find countComponentsInGroup(group, current);
    current == maxcount;
}	

//auxiliary pattern
pattern countComponentsInGroup(group : AbstractGroup, cnt: java Integer) {
    cnt == count find componentsInGroup(group, _);
}

//auxiliary pattern
pattern componentsInGroup(group: AbstractGroup, component: AbstractComponent){
    AbstractGroup.components(group, component);
}",repo-ecore-all/data/fmselab/msl/org.xtext.msl/model/generated/MSL.ecore,"class Specification {
	reference Import[0..*] imports;
	reference AbstractPattern[0..1] absPattern;
	reference Pattern[0..*] pattern;
	reference Configuration[0..1] configuration;
}
class Import {
	reference AbstractPattern[0..1] importedNamespace;
}
class AbstractPattern {
	attribute EString[0..1] name;
	reference AbstractSystem[0..*] managedSystems;
	reference AbstractGroup[0..*] abstractGroups;
	reference AbstractInteraction[0..*] interactions;
}
class AbstractSystem {
	attribute EString[0..1] name;
}
class AbstractComponent {
	attribute EString[0..1] name;
}
class GroupDef {
	reference AbstractGroup[0..1] grp;
	attribute EString[0..1] mult;
}
class AbstractGroup {
	attribute EString[0..1] name;
	reference AbstractSystem[0..*] manSys;
	reference GroupDef[0..*] manGrp;
	reference AbstractComponent[0..*] components;
}
class AbstractInteraction {
	reference AbstractComponentName[0..1] start;
	reference AbstractComponentName[0..1] end;
	attribute EString[0..1] low;
	attribute EString[0..1] high;
}
class AbstractComponentName {
	reference AbstractComponent[0..1] type;
}
class SystemBinding {
	attribute EString[0..1] name;
	reference AbstractSystem[0..1] absSys;
}
class GroupBinding {
	attribute EString[0..1] name;
	reference AbstractGroup[0..1] absGroup;
}
class Pattern {
	attribute EString[0..1] name;
	reference AbstractPattern[0..1] absPattern;
	reference SystemBinding[0..*] managedSystems;
	reference GroupBinding[0..*] groups;
}
class Configuration {
	attribute EString[0..1] name;
	reference Pattern[0..*] pattern;
	reference ConcreteSystem[0..*] concreteSystems;
	reference ConcreteGroup[0..*] concreteGroups;
	reference Interaction[0..*] concreteInteractions;
}
class ConcreteSystem {
	attribute EString[0..1] name;
	reference SystemBinding[0..*] bindings;
}
class ConcreteGroup {
	attribute EString[0..1] name;
	reference GroupBinding[0..*] abstractGroups;
	reference ConcreteSystem[0..*] manSys;
	reference ConcreteGroup[0..*] manGrp;
	reference ComponentInstance[0..*] components;
}
class ParamValue {
	attribute EString[0..1] nameParam;
	attribute EString[0..1] valParam;
	attribute TimeUnitKind[0..1] unit;
}
class ComponentInstance {
	attribute EString[0..1] name;
	attribute EString[0..1] type;
	reference ParamValue[0..*] paramValues;
}
class Interaction {
	reference ComponentName[0..1] start;
	reference ComponentName[0..1] end;
}
class ComponentName {
	reference ComponentInstance[0..1] component;
}
enum TimeUnitKind {
	SECOND;
	MSECOND;
	USECOND;
	NSECOND;
	MINUTE;
	HOUR;
	DAY;
}
",7162,yes,yes,yes
52386,All actions that have both leftMotor and rightMotor attributes set to the same value,"pattern sameValueMotorAction(action: Action){
    Motor.leftMotor(action, value);
    Motor.rightMotor(action, value);
}",repo-ecore-all/data/akki55/useme/examples/gyro/org.gyro.metamodel/model/gyro.ecore,"class GyroSpecification {
	attribute EString[1..1] name;
	reference Node[0..*] nodes;
	reference Child[0..*] child;
	reference Sibling[0..*] next;
}
abstract class Node {
	attribute EString[1..1] name;
}
class Child {
	reference Behavior[0..*] source;
	reference Node[0..*] target;
}
class Sibling {
	reference Node[0..*] source;
	reference Node[0..*] target;
}
abstract class Behavior extends Node {
}
class Priority extends Behavior {
}
class Parallel extends Behavior {
}
class Sequential extends Behavior {
}
class StatusChange extends Behavior {
	attribute SuccessState[0..1] changeSuccess;
	attribute FailureState[0..1] changeFailure;
	attribute RunningState[0..1] changeRunning;
}
abstract class Action extends Node {
}
abstract class Condition extends Action {
}
class Distance extends Condition {
	attribute EInt[0..1] value;
	attribute DistanceKind[0..1] kind;
}
class Bumpers extends Condition {
	attribute BumperKind[0..1] bumperKind;
}
class Waiting extends Condition {
	attribute EInt[0..1] time;
}
abstract class Actuate extends Action {
}
class Motor extends Actuate {
	attribute EInt[0..1] leftMotor;
	attribute EInt[0..1] rightMotor;
}
class Servo extends Actuate {
	attribute EInt[0..1] minimalPosition;
	attribute EInt[0..1] maximalPosition;
	attribute EInt[0..1] step;
}
class LED extends Actuate {
	attribute LightStatus[0..1] status;
}
enum LightStatus {
	On;
	Off;
}
enum SuccessState {
	Success;
	Failure;
	Running;
}
enum FailureState {
	Failure;
	Success;
	Running;
}
enum RunningState {
	Success;
	Failure;
	Running;
}
enum BumperKind {
	Left;
	Right;
}
enum DistanceKind {
	Minor;
	Major;
}
",12295,yes,yes,yes
62765,Classes with at least 2 supertypes.,"pattern classWith2OrMoreSupertypes(class: Class) {
    cnt == count find supertypesInClass(class, _);
    check(cnt>=2);
}

//Auxiliary pattern
pattern supertypesInClass(class: Class, supertype: Class){
    Class.supertypes(class, supertype);
}",repo-ecore-all/data/AlFranzis/SmartMatcher/at.ac.tuwien.big.smartmatcher.ui.gmf/model/sm_mm_1.ecore,"class MappingModel {
	reference Class[0..*] classes;
	reference Operator[0..*] operators;
	reference Reference[0..*] references;
}
class Class extends Element {
	reference Attribute[0..*] attributes;
	attribute EString[0..1] name;
	reference Class[0..*] supertypes;
}
class Attribute extends Element {
	attribute EString[1..1] name;
	attribute EString[1..1] type;
	reference Class[1..1] container;
}
abstract class Operator {
	attribute EString[0..1] name;
	reference ContextOperator[0..*] parents;
	reference Element[1..*] lhsRoles;
	reference Element[1..*] rhsRoles;
	reference Element[2..*] roles;
}
class C2C extends ContextOperator {
	reference Class[0..1] lhs;
	reference Class[0..1] rhs;
}
class A2A extends Operator {
	reference Attribute[1..1] lhs;
	reference Attribute[1..1] rhs;
}
class Reference extends Element {
	attribute EString[1..1] name;
	reference Class[1..1] source;
	reference Class[1..1] target;
}
class R2R extends Operator {
	reference Reference[1..1] lhs;
	reference Reference[1..1] rhs;
}
class A2C extends ContextOperator {
	reference Attribute[1..1] lhsAttribute;
	reference Class[1..1] rhsClass;
	reference Reference[1..1] rhsReference;
	reference Attribute[1..1] rhsAttribute;
}
abstract class Element {
	attribute EBoolean[1..1] lhs;
	attribute EBoolean[1..1] rhs;
}
abstract class ContextOperator extends Operator {
	reference Operator[0..*] contextMappings;
}
class R2A extends Operator {
	reference Reference[1..1] lhsReference;
	reference Attribute[1..1] rhsAttribute1;
	reference Attribute[1..1] rhsAttribute2;
}
",22674,yes,yes,yes
43096,SEBooleanBinaryExpressions with their operands,"pattern booleanBinaryExpressionWithOperands(binaryExpression : SEBooleanBinaryExpression, operand1 : SEBooleanVariable, operand2 : SEBooleanVariable) {
    SEBooleanBinaryExpression.operand1(binaryExpression, operand1);
    SEBooleanBinaryExpression.operand2(binaryExpression, operand2);
}",repo-ecore-all/data/manuelleduc/sle18_artifact/iot/simpleexpressions.model/model/simpleexpressions.ecore,"abstract class SEIntegerExpression extends SEExpression {
	reference SEIntegerVariable[0..1] operand2;
	reference SEIntegerVariable[0..1] operand1;
}
class SEIntegerCalculationExpression extends SEIntegerExpression {
	reference SEIntegerVariable[1..1] assignee;
	attribute SEIntegerCalculationOperator[1..1] operator;
}
class SEIntegerComparisonExpression extends SEIntegerExpression {
	reference SEBooleanVariable[1..1] assignee;
	attribute SEIntegerComparisonOperator[1..1] operator;
}
class SEBooleanValue extends SEValue {
	attribute EBoolean[1..1] value;
}
class SEIntegerValue extends SEValue {
	attribute EInt[1..1] value;
}
class SEBooleanBinaryExpression extends SEBooleanExpression {
	reference SEBooleanVariable[1..1] operand1;
	reference SEBooleanVariable[1..1] operand2;
	attribute SEBooleanBinaryOperator[1..1] operator;
}
abstract class SEValue extends SEExpression {
}
class SEBooleanVariable extends SEVariable {
}
abstract class SEExpression {
}
class SEIntegerVariable extends SEVariable {
}
class SEBooleanUnaryExpression extends SEBooleanExpression {
	reference SEBooleanVariable[1..1] operand;
	attribute SEBooleanUnaryOperator[1..1] operator;
}
abstract class SEBooleanExpression extends SEExpression {
	reference SEBooleanVariable[1..1] assignee;
}
enum SEIntegerCalculationOperator {
	ADD;
	SUBRACT;
}
enum SEIntegerComparisonOperator {
	SMALLER;
	SMALLER_EQUALS;
	EQUALS;
	GREATER_EQUALS;
	GREATER;
}
enum SEBooleanUnaryOperator {
	NOT;
}
enum SEBooleanBinaryOperator {
	AND;
	OR;
}
abstract class SEVariable extends SEExpression {
	reference SEValue[0..1] currentValue;
	attribute EString[0..1] name;
	reference SEValue[0..1] initialValue;
}
",3005,yes,yes,yes
60566,Servicios with a specific path,"pattern servicioWithPath(servicio : Servicio) {
    Servicio.path(servicio, ""specificPath"");
}",repo-ecore-all/data/ifgs1/Automatizacion-Catalogos-Catalina/PrimeraInstancia/Arquitectura/model/arquitectura.ecore,"class RootSistema {
	reference CapaPresentacion[1..*] presentaciones;
	reference CapaLogicaNegocio[1..1] capaLogicaNegocio;
	reference CapaServicio[1..1] capaServicio;
	reference CapaAccesoDatos[1..1] capaAccesoDatos;
	reference CapaPersistencia[1..1] capaPersistencia;
}
class CapaPresentacion {
	reference Vista[1..*] vistas;
	reference Controlador[1..*] controladores;
	reference ComunicacionHttp[1..*] comunicacionesHttp;
	reference EntidadPresentacion[1..*] entidades;
	attribute Tecnologia[0..1] tecnologia;
	attribute EBoolean[0..1] barraBusqueda;
}
class CapaLogicaNegocio {
	reference InterfaceNegocio[1..*] interfaces;
	reference BeanNegocio[1..*] beans;
	reference JsonDTO[1..*] jsonsDTO;
	reference Mapper[1..*] mappers;
}
class CapaPersistencia {
	reference EntidadPersistencia[1..*] entidades;
	reference Insert[1..*] inserts;
}
class CapaServicio {
	reference Servicio[1..*] servicios;
}
class CapaAccesoDatos {
	reference InterfaceDAO[1..*] interfaces;
	reference BeanDAO[1..*] beans;
}
class Vista {
	reference Letra[1..1] letra;
	attribute EString[0..1] colorFondo;
	attribute EString[0..1] titulo;
}
class Controlador {
	attribute EString[0..1] nombre;
}
class ComunicacionHttp {
	attribute EString[0..1] url;
	attribute EString[0..1] nombre;
}
class EntidadPresentacion {
	reference Atributo[1..*] atributos;
	attribute EString[0..1] nombre;
}
class Atributo {
	attribute EString[0..1] nombre;
	attribute EString[0..1] tipoDato;
}
class Servicio {
	attribute EString[0..1] path;
	reference Metodo[1..*] metodos;
}
class InterfaceNegocio {
	reference Metodo[1..*] metodos;
	attribute EString[0..1] nombre;
}
class BeanNegocio {
	reference InterfaceNegocio[1..1] implementa;
	attribute EString[0..1] nombre;
}
class JsonDTO {
	attribute EString[0..1] nombre;
	reference Atributo[1..*] atributos;
}
class InterfaceDAO {
	reference Metodo[1..*] metodos;
	attribute EString[0..1] nombre;
}
class BeanDAO {
	reference InterfaceDAO[1..1] implementa;
	attribute EString[0..1] nombre;
}
class EntidadPersistencia {
	reference Atributo[1..*] atributos;
	attribute EString[0..1] nombre;
}
class Insert {
	attribute EString[0..1] table;
	attribute EString[0..1] values;
}
enum Tecnologia {
	android;
	iOS;
	web;
}
class Letra {
	attribute EString[0..1] color;
	attribute EString[0..1] fuente;
	attribute EString[0..1] tamano;
}
class Metodo {
	attribute EString[0..1] path;
	attribute EString[0..1] tipoRetorno;
	attribute EString[0..1] argumentos;
}
class Mapper {
	attribute EString[0..1] nombre;
	reference Metodo[1..*] metodos;
}
",20475,no,yes,yes
62707,Find all RTDs with more than 1 base and at least 2 items.,"pattern rtdWithMultipleBasesAndItems(rtd: RTD) {
    cnt1 == count find basesInRTD(rtd, _);
    cnt2 == count find itemsInRTD(rtd, _);
    check(cnt1>1 && cnt2>=2);
}

//Auxiliary pattern
pattern basesInRTD(rtd: RTD, base: RTD){
    RTD.bases(rtd, base);
}

//Auxiliary pattern
pattern itemsInRTD(rtd: RTD, item: RTDItem){
    RTD.items(rtd, item);
}",repo-ecore-all/data/lukashaertel/xtext-technocat/eu.metatools.technocat/model/generated/TechnoCat.ecore,"class TechnologyCatalog {
	attribute EString[0..1] name;
	reference Import[0..*] imports;
	reference ETD[0..*] entityTypes;
	reference RTD[0..*] relationTypes;
	reference ED[0..*] entities;
	reference RD[0..*] relations;
}
class Element {
}
class Import extends Element {
	reference TechnologyCatalog[0..1] ref;
}
class ModelElement extends Element {
}
class DefinitionElement extends ModelElement {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class InstanceElement extends ModelElement {
}
class ETD extends DefinitionElement {
	reference ETD[0..*] bases;
}
class RTD extends DefinitionElement {
	reference RTD[0..*] bases;
	reference RTDItem[0..*] items;
}
class RTDItem {
	reference ETD[0..1] domain;
	reference ETD[0..1] codomain;
	attribute EString[0..1] value;
}
class ED extends InstanceElement {
	reference ETD[0..1] type;
	reference EDItem[0..*] items;
}
class EDItem {
	attribute EString[0..1] name;
	attribute EString[0..1] value;
}
class RD extends InstanceElement {
	reference EDItem[0..1] left;
	reference RTD[0..1] relation;
	reference EDItem[0..1] right;
	attribute EString[0..1] value;
}
",22616,yes,yes,yes
50213,Interfaces that are provided but not required,"pattern providedButNotRequired(interface: Interface) {
    Interface.type(interface, InterfaceType::PROVIDED);
    neg find requiredInterface(interface);
}

//auxiliary pattern
pattern requiredInterface(interface: Interface) {
    Interface.type(interface, InterfaceType::REQUIRED);
}",repo-ecore-all/data/masters-info-nantes/compoNantes/codeProjet/org.xtext.example.compoNantes/model/generated/CompoNantes.ecore,"class Model {
	reference Component[0..*] components;
}
class Component {
	attribute EString[0..1] name;
	reference Port[0..*] ports;
	reference Interface[0..*] interfaces;
	reference Component[0..*] components;
	reference Connector[0..*] connectors;
	reference Dependency[0..*] dependencies;
}
class Port {
	attribute EString[0..1] name;
}
class Interface {
	attribute InterfaceType[0..1] type;
	attribute EString[0..1] name;
	reference Port[0..1] port;
}
class Connector {
	attribute ConnectorType[0..1] type;
	attribute EString[0..1] name;
	reference Interface[0..1] int_from;
	reference Interface[0..1] int_to;
}
class Dependency {
	attribute DependencyType[0..1] type;
	attribute EString[0..1] name;
	reference Interface[0..1] component_from;
	reference Interface[0..1] component_to;
}
enum InterfaceType {
	REQUIRED;
	PROVIDED;
}
enum ConnectorType {
	ASSEMBLY;
	DELEGATION;
}
enum DependencyType {
	USAGE;
	ASSOCIATION;
}
",10122,spec,spec,spec
63469,"All session actions with scanned items where the barcode contains the substring ""ABC""","pattern sessionActionWithScannedItemBarcodeContainingABC(sessionAction: SessionAction, scannedItem: ScannedItem){
    SessionAction.scannedItems(sessionAction, scannedItem);
    ScannedItem.barcode(scannedItem, barcode);
    check(barcode.contains(""ABC""));
}",repo-ecore-all/data/dydboy/iot-web-usage-and-ecommerce/workspace/eCommerce/MadisonIslandModels/metamodels/RealUsageData.ecore,"class Dataset {
	attribute EInt[0..1] ID;
	attribute EString[0..1] name;
	reference Data[0..*] data;
}
abstract class Data {
	attribute EInt[0..1] ID;
	attribute EString[0..1] name;
	attribute EInt[0..1] userID;
	attribute EDate[0..1] date;
}
class WebData extends Data {
	attribute EString[0..1] viewContainer;
	attribute EString[0..1] viewComponent;
	attribute EString[0..1] eventType;
	attribute EString[0..1] parameterBindingGroup;
	attribute EString[0..1] logEntry;
}
abstract class IoTData extends Data {
	attribute EInt[0..1] storeId;
	attribute EString[0..1] storeLabel;
	attribute EString[0..1] sessionId;
	attribute EInt[0..1] sessionDuration;
}
class ProximityData extends IoTData {
	reference SessionRegion[0..*] sessionRegions;
}
class SessionRegion {
	attribute EInt[0..1] regionId;
	attribute EString[0..1] regionLabel;
	attribute EInt[0..1] detectionCount;
	attribute EInt[0..1] maxSecondsInRegion;
	attribute ProximityType[0..1] maxProximity;
	attribute EDate[0..1] firstDetectionTimeStamp;
	attribute EDate[0..1] lastDetectionTimeStamp;
	reference Beacon[1..1] beaconData;
}
enum ProximityType {
	unknown;
	far;
	near;
	immediate;
}
class Beacon {
	attribute EString[0..1] uuid;
	attribute EInt[0..1] majorId;
	attribute EInt[0..1] minorId;
}
class ActionData extends IoTData {
	reference SessionAction[0..*] sessionActions;
}
class SessionAction {
	attribute EString[0..1] userAgent;
	reference ScannedItem[0..*] scannedItems;
}
class ScannedItem {
	attribute EString[0..1] barcode;
	attribute EString[0..1] name;
	attribute EString[0..1] sku;
}
",23378,yes,yes,yes
57456,Tables with columns that have unique indexes,"pattern tableWithUniqueIndexedColumns(table : Table, column : Column, index : Index) {
    Table.columns(table, column);
    Index.elements(index, indexElement);
    IndexElement.column(indexElement, column);
    Index.unique(index, true);
}",repo-ecore-all/data/ObeoNetwork/Database-Designer/plugins/org.obeonetwork.dsl.database/model/database.ecore,"abstract class NamedElement extends DatabaseElement {
	attribute EString[1..1] name;
}
class DataBase extends TableContainer, TypesLibraryUser {
	attribute EString[0..1] url;
	reference Schema[0..*] schemas;
	reference UserDefinedTypesLibrary[0..*] defines;
}
abstract class AbstractTable extends NamedElement {
	reference Column[0..*] columns;
	reference TableContainer[1..1] owner;
}
class Column extends NamedElement {
	attribute EBoolean[1..1] nullable;
	attribute EString[0..1] defaultValue;
	reference Index[0..*] indexes;
	reference IndexElement[0..*] indexElements;
	reference PrimaryKey[0..1] primaryKey;
	reference ForeignKey[0..*] foreignKeys;
	reference ForeignKeyElement[0..*] foreignKeyElements;
	reference Type[1..1] type;
	reference Sequence[0..1] sequence;
	reference AbstractTable[1..1] owner;
	attribute EBoolean[0..1] autoincrement;
	attribute EBoolean[0..1] inPrimaryKey;
	attribute EBoolean[0..1] inForeignKey;
	attribute EBoolean[0..1] unique;
}
class Index extends NamedElement {
	attribute EString[0..1] qualifier;
	reference IndexElement[0..*] elements;
	attribute EBoolean[0..1] unique;
	attribute EInt[0..1] cardinality;
	attribute EString[0..1] indexType;
	reference Table[1..1] owner;
}
class View extends AbstractTable {
	attribute EString[0..1] query;
}
class Table extends AbstractTable {
	reference PrimaryKey[0..1] primaryKey;
	reference ForeignKey[0..*] foreignKeys;
	reference Constraint[0..*] constraints;
	reference Index[0..*] indexes;
}
class PrimaryKey extends NamedElement {
	reference Column[0..*] columns;
	reference Table[1..1] owner;
}
class ForeignKey extends NamedElement {
	reference ForeignKeyElement[0..*] elements;
	reference Table[1..1] owner;
	reference Table[0..1] target;
}
class ForeignKeyElement extends DatabaseElement {
	reference Column[0..1] fkColumn;
	reference Column[0..1] pkColumn;
}
class IndexElement extends DatabaseElement {
	reference Column[0..1] column;
	attribute EBoolean[0..1] asc;
}
class Constraint extends NamedElement {
	attribute EString[0..1] expression;
	reference Table[1..1] owner;
}
abstract class DatabaseElement {
	attribute EString[0..1] ID;
	attribute EString[0..1] comments;
}
class Schema extends TableContainer {
}
class Sequence extends NamedElement {
	attribute EInt[0..1] start;
	attribute EInt[0..1] increment;
	attribute EInt[0..1] minValue;
	attribute EInt[0..1] maxValue;
}
abstract class TableContainer extends NamedElement {
	reference AbstractTable[0..*] tables;
	reference Sequence[0..*] sequences;
}
",17365,ok,spec,ok
58219,Terminals with gates assigned to flights with airplane size less than 150.,"pattern terminalsWithGatesForSmallAirplanes(terminal: Terminal){
    find gatesForSmallAirplanes(terminal, _);
}

//Auxiliary pattern
pattern gatesForSmallAirplanes(terminal: Terminal, gate: Gate){
    Terminal.gates(terminal, gate);
    FlGate.flight(_, flight);
    Flight.airplaneSize(flight, size);
    check(size < 150);
}",repo-ecore-all/data/PatrickGhazal/ECSE439F18Proj/org.xtext.ecse439.project.airport/AirportDSL.ecore,"class Domainmodel {
	reference Airport[0..*] elements;
}
class Airport {
	attribute EString[0..1] name;
	reference Schedule[0..1] schedule;
	reference AllRunways[0..1] allRun;
	reference AllAirlines[0..1] allAir;
	reference AllFlights[0..1] allFli;
	reference AllTerminals[0..1] allTer;
}
class AllTerminals {
	reference Terminal[0..*] terminals;
}
class AllRunways {
	reference Runway[0..*] runways;
}
class AllAirlines {
}
class AllFlights {
	reference Flight[0..*] flights;
}
class Schedule {
	reference Date[0..1] date;
	reference FlGate[0..*] flGate;
}
class Flight {
	attribute EString[0..1] name;
	reference Time[0..1] time;
	attribute EInt[0..1] airplaneSize;
	attribute EInt[0..1] reqRunwayLg;
}
class FlGate {
	reference Flight[0..1] flight;
	reference Gate[0..1] gate;
	reference Time[0..1] time;
}
class Terminal {
	attribute EString[0..1] name;
	reference Runway[0..1] runway;
	reference Gate[0..*] gates;
}
class Runway {
	attribute EString[0..1] name;
	attribute EInt[0..1] length;
	attribute EString[0..1] used;
}
class Gate {
	attribute EString[0..1] name;
	attribute EInt[0..1] maxApSize;
}
class Date {
	attribute EInt[0..1] day;
	attribute EString[0..1] month;
	attribute EInt[0..1] year;
}
class Time {
	attribute EInt[0..1] hour;
	attribute EInt[0..1] minute;
}
",18128,no,no,no
60053,Loops that have no statements,"pattern noStatementInLoop(loop: Loop) {
    neg find StatementInLoop(loop, _);
}

//auxiliary pattern
pattern StatementInLoop(loop: Loop, statement: Statement) {
    Loop.statement(loop, statement);
}",repo-ecore-all/data/ZeeQ320/DVA436/projet/org.eclipse.projectMDE.project/model/behaviour.ecore,"abstract class Loop extends Statement {
	reference Statement[1..*] statement;
}
class forLoop extends Loop {
	reference Operator[1..1] iteration;
	reference Operator[1..1] conditionStop;
	reference Affectation[1..1] startValue;
}
abstract class Operator {
	reference Variable[1..1] element1;
	reference Variable[0..1] element2;
}
class additionOperator extends Operator {
}
class soustractionOperator extends Operator {
}
class multiplicationOperator extends Operator {
}
class divisionOperator extends Operator {
}
class equalOperator extends Operator {
}
class inferiorOperator extends Operator {
}
class superiorOperator extends Operator {
}
class inferiorOrEqualOperator extends Operator {
}
class superiorOrEqualOperator extends Operator {
}
class andOperator extends Operator {
}
class orOperator extends Operator {
}
class noOperator extends Operator {
}
abstract class Variable extends Statement {
	attribute EString[0..1] name;
}
class intVariable extends Variable {
	attribute EInt[0..1] value;
}
class doubleVariable extends Variable {
	attribute EDouble[0..1] value;
}
class boolVariable extends Variable {
	attribute EBoolean[0..1] value;
}
class charVariable extends Variable {
	attribute EChar[0..1] value;
}
class stringVariable extends Variable {
	attribute EString[0..1] value;
}
abstract class Conditionnal extends Statement {
	reference Statement[1..*] statement;
}
class ifConditionnal extends Conditionnal {
	reference Operator[1..1] condition;
	reference elseConditionnal[0..1] elseC;
}
class elseConditionnal extends Conditionnal {
}
abstract class Statement {
	attribute EInt[1..1] id;
}
abstract class Affectation extends Statement {
	reference Variable[1..1] receivingVariable;
}
class operationAffectation extends Affectation {
	reference Operator[1..1] receivedOperation;
}
class variableAffectation extends Affectation {
	reference Variable[1..1] receivedVariable;
}
class intAffectation extends Affectation {
	attribute EInt[1..1] receivedInt;
}
class doubleAffectation extends Affectation {
	attribute EDouble[1..1] receivedDouble;
}
class boolAffectation extends Affectation {
	attribute EBoolean[1..1] receivedBool;
}
class charAffectation extends Affectation {
	attribute EChar[1..1] receivedChar;
}
class stringAffectation extends Affectation {
	attribute EString[1..1] receivedString;
}
class writeConsole extends Statement {
	reference Variable[0..*] variable;
	reference Operator[0..*] operation;
}
",19962,yes,yes,yes
62986,"All libraries with a librarian whose name starts with ""A"":","pattern libraryWithLibrarianStartingWithA(library: Library, librarian: Librarian){
    Library.librarian(library, librarian);
    Librarian.name(librarian, name);
    check(name.startsWith(""A""));
}",repo-ecore-all/data/sdirix/org.eclipse.emf.ecp.core/tests/org.eclipse.emf.ecp.view.validation.test/model/test.ecore,"class Library {
	attribute EString[0..1] name;
	reference Writer[1..*] writers;
	reference Book[0..*] books;
	reference Librarian[0..1] librarian;
	attribute PhoneNumber[0..1] phoneNumber;
}
class Writer {
	attribute EString[0..1] firstName;
	attribute EString[0..1] lastName;
	attribute EString[0..1] EMail;
	attribute EDate[0..1] BirthDate;
	reference Book[0..*] books;
	attribute EBoolean[0..1] Pseudonym;
	reference Library[0..1] library;
	attribute MinLengthOf3[0..1] initials;
	attribute StrictMinLengthOf3[0..1] title;
}
class Book {
	attribute EString[0..1] title;
	attribute EInt[0..1] pages;
	reference Writer[0..1] writers;
}
class Librarian {
	attribute EString[0..1] name;
}
class Computer {
	reference Mainboard[0..1] mainboard;
	attribute EString[1..1] name;
	reference PowerBlock[0..1] powerBlock;
	attribute Color[0..*] colors;
}
class Mainboard {
	attribute EString[1..1] name;
}
class PowerBlock {
	attribute EString[1..1] name;
}
class Container {
	reference Content[0..*] contents;
}
class Content {
	attribute EString[0..1] uniqueAttribute;
	attribute EString[0..1] secondAttribute;
}
class TableWithMultiplicity {
	reference TableContent[1..*] content;
}
abstract class TableContent {
}
class TableContentWithoutValidation extends TableContent {
	attribute EString[0..1] name;
	attribute EInt[0..1] weight;
}
class TableContentWithValidation extends TableContent {
	attribute EString[1..1] name;
	attribute EInt[0..1] weight;
}
class TableWithoutMultiplicity {
	reference TableContent[0..*] content;
}
class TableWithUnique {
	reference TableContent[0..*] content;
}
class TableContentWithInnerChild2 extends TableContent {
	reference TableContent[0..1] innerChild;
}
class TableContentWithInnerChild extends TableContent {
	reference TableContent[0..1] innerChild;
	attribute EString[0..1] stuff;
}
class TableWithoutMultiplicityConcrete {
	reference TableContentWithInnerChild[0..*] content;
}
class Referencer {
	reference Computer[0..1] referencedContent;
}
class CrossReferenceContainer {
	reference CrossReferenceContent[0..*] contents;
	reference CrossReferenceContent[0..1] singleContent;
}
class CrossReferenceContent {
	reference CrossReferenceContainer[0..1] parent;
	reference CrossReferenceContainer[0..1] singleParent;
}
class Person {
	attribute StringWithMaxLength8[0..1] firstName;
	attribute Gender[0..1] gender;
	attribute OnlyCapitals[0..1] lastName;
	attribute CustomDataType[0..1] custom;
	attribute Age[0..1] age;
}
enum Gender {
	Male;
	Female;
	Both;
}
enum Color {
	Red;
	Green;
	Blue;
}
",22895,ok,yes,ok
51259,Axis elements with no located elements associated with them,"pattern axisWithoutLocatedElement(axis : Axis) {
    Axis(axis);
    neg find hasLocatedElement(axis);
}

//auxiliary pattern
pattern hasLocatedElement(axis : Axis) {
    LocatedElement.location(axis, _);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/XPath1.ecore,"abstract class LocatedElement {
	attribute String[0..1] location;
	attribute String[0..*] commentsBefore;
	attribute String[0..*] commentsAfter;
}
abstract class NamedElement extends LocatedElement {
	attribute String[1..1] name;
}
abstract class Expression extends LocatedElement {
}
class VariableExp extends Expression, NamedElement {
}
class PathExpression extends Expression {
	attribute Boolean[1..1] isAbsolute;
	reference Step[0..*] steps;
}
class Step extends LocatedElement {
	reference Axis[1..1] axis;
	reference NodeTest[1..1] nodeTest;
	reference Predicate[0..*] predicates;
}
class Predicate extends LocatedElement {
	reference Expression[1..1] expression;
}
class OperatorCallExp extends Expression, NamedElement {
	reference Expression[1..1] left;
	reference Expression[0..1] right;
}
class FunctionCallExp extends Expression, NamedElement {
	reference Expression[0..*] arguments;
}
abstract class LiteralExp extends Expression {
}
class IntegerExp extends LiteralExp {
	attribute Integer[1..1] symbol;
}
class StringExp extends LiteralExp {
	attribute String[1..1] symbol;
}
abstract class NodeTest extends LocatedElement {
}
class NameTest extends NodeTest, NamedElement {
}
class WildCardTest extends NodeTest {
}
class IsNodeTest extends NodeTest {
}
class IsTextTest extends NodeTest {
}
abstract class Axis extends LocatedElement {
}
class AncestorAxis extends Axis {
}
class AncestorOrSelfAxis extends Axis {
}
class AttributeAxis extends Axis {
}
class ChildAxis extends Axis {
}
class DescendantAxis extends Axis {
}
class DescendantOrSelfAxis extends Axis {
}
class FollowingAxis extends Axis {
}
class FollowingSiblingAxis extends Axis {
}
class NamespaceAxis extends Axis {
}
class ParentAxis extends Axis {
}
class PrecedingAxis extends Axis {
}
class PrecedingSiblingAxis extends Axis {
}
class SelfAxis extends Axis {
}
",11168,spec,spec,spec
55290,Retrieve all QueryDesc building block descriptors or StepDesc building block descriptors,"pattern queryOrStepDesc(descriptor: BuildingBlockDesc){
    QueryDesc(descriptor);
} or {
    StepDesc(descriptor);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/descriptor.ecore,"class DescriptorLibrary extends NamedElement {
	reference Classifier[0..*] buildingBlocks;
}
class TriggerDesc extends BuildingBlockDesc {
}
class ConditionDesc extends BuildingBlockDesc {
}
class ConditionalStepDesc extends StepDesc {
}
class DomainObjectDesc extends Classifier {
	attribute EString[0..1] contentURI;
	attribute EString[0..1] projection;
	attribute EString[0..1] selection;
	attribute EString[0..1] selectionArgs;
	attribute EString[0..1] sortOrder;
}
class QueryDesc extends BuildingBlockDesc {
}
abstract class BuildingBlockDesc extends Classifier {
	reference Property[0..*] properties;
	attribute EString[0..1] iconUrl;
}
class Property extends NamedElement {
	attribute EBoolean[1..1] canReferToOther;
	attribute EBoolean[1..1] canBeReferedTo;
	attribute EBoolean[0..1] isResultValue;
	reference Value[0..*] allowedValues;
	reference Classifier[1..1] dataType;
	attribute EInt[0..1] lowerBound;
	attribute EInt[0..1] upperBound;
}
class Value {
	attribute EString[1..1] name;
}
class StepDesc extends BuildingBlockDesc {
}
abstract class Classifier extends NamedElement {
}
class NamedElement {
	attribute EString[0..1] name;
	attribute EString[0..1] userFriendlyName;
	attribute EString[0..1] description;
}
class DataType extends Classifier {
}
",15199,yes,yes,yes
51563,Machines with the highest serial number.,"pattern machineWithHighestSerial(machine: Machine, maxSerial: java Integer) {
    maxSerial == max find serialNumber(_, #);
    find serialNumber(machine, current);
    current == maxSerial;
}	

//auxiliary pattern
pattern serialNumber(machine : Machine, serial: EInt) {
    Machine.serialno(machine, serial);
}",repo-ecore-all/data/MDEGroup/MDEProfiler/tools/totem.trm.reduce/transformation/metamodel/Factory.ecore,"class Factory {
	attribute EString[1..1] name;
	attribute EString[0..1] author;
	reference Machine[1..*] machines;
	reference Operator[0..*] operators;
}
abstract class Machine {
	reference Operator[0..1] operatedBy;
	attribute EInt[1..1] serialno;
	reference Factory[1..1] factory;
}
abstract class Processor extends Machine, Breakable {
	reference Part[0..*] parts;
}
class Part {
	attribute EBigInteger[1..1] timeStamp;
}
class Assembler extends Processor {
	attribute EBigDecimal[1..1] rate;
	attribute EBoolean[1..1] priority;
}
class Packager extends Processor {
	attribute EBigInteger[1..1] numFinished;
}
abstract class Checker extends Machine {
}
class AssembledChecker extends Checker {
	reference Assembler[1..1] checks;
}
class PackagedChecker extends Checker {
	reference Packager[0..*] checks;
}
abstract class Breakable {
	attribute BreakStates[1..1] state;
}
enum BreakStates {
	off;
	on;
	underRepair;
	broken;
}
class Operator extends Breakable {
	attribute EString[1..1] name;
	reference Factory[1..1] factory;
}
",11472,yes,yes,yes
49752,Columns that are part of a column family and have a specific type,"pattern columnWithTypeInColumnFamily(column : Column, cf : ColumnFamily, type : Type) {
    Column.columnFamily(column, cf);
    Column.type(column, type);
}",repo-ecore-all/data/alfonsodelavega/mortadelo/es.unican.istr.mortadelo.columnFamilyDataModel/model/columnFamilyDataModel.ecore,"class ColumnFamilyDataModel {
	reference Table[0..*] tables;
}
class ColumnFamily {
	attribute EString[1..1] name;
}
class Table {
	attribute EString[1..1] name;
	reference ColumnFamily[1..*] columnFamilies;
	reference Column[0..*] columns;
	reference PartitionKey[1..*] partitionKeys;
	reference ClusteringKey[0..*] clusteringKeys;
}
class Column {
	attribute EString[1..1] name;
	reference Type[0..1] type;
	reference ColumnFamily[0..1] columnFamily;
}
abstract class Type {
}
class SimpleType extends Type {
	attribute PrimitiveType[1..1] type;
}
abstract class Collection extends Type {
	attribute PrimitiveType[1..1] type;
}
class List extends Collection {
}
class Set extends Collection {
}
class Map extends Collection {
	attribute PrimitiveType[1..1] keyType;
}
class Tuple extends Type {
	attribute PrimitiveType[0..*] types;
}
class UserDefinedType extends Type {
	attribute EString[1..1] name;
	reference Field[0..*] fields;
}
class Field {
	attribute EString[1..1] name;
	reference Type[1..1] type;
}
abstract class Key {
	reference Column[1..1] column;
}
class PartitionKey extends Key {
}
class ClusteringKey extends Key {
}
enum PrimitiveType {
	INT;
	FLOAT;
	TEXT;
	DATE;
	TIMESTAMP;
	ID;
	BOOLEAN;
}
",9661,ok,ok,ok
51087,Methods with more than 5 statements in their body.,"pattern methodWithMoreThan5Statements(method: MethodDeclaration){
    cnt == count find statementsInMethod(method, _);
    check(cnt>5);
}

//Auxiliary pattern
pattern statementsInMethod(method: MethodDeclaration, statement: Statement){
    MethodDeclaration.body(method, statement);
}",repo-ecore-all/data/FURCAS-dev/FURCAS/DSLEngineering/com.sap.furcas.test/scenarioFixtures/MiniJava.ecore,"class CompilationUnit {
	reference ClassDeclaration[1..1] containedClass;
	reference ClassImport[0..*] imports;
	reference Package[0..1] package_;
}
class ClassImport {
	reference ClassDeclaration[1..1] importedClass;
}
class ClassDeclaration extends NamedElement {
	reference MemberDeclaration[0..*] members;
	attribute Visibility[0..1] visibility;
	reference CompilationUnit[0..1] compilationUnit;
}
class Package extends NamedElement {
	reference CompilationUnit[0..*] compilationUnits;
}
class FieldDeclaration extends MemberDeclaration {
}
abstract class MemberDeclaration extends TypedElement {
	reference ClassDeclaration[0..1] owningClass;
	reference Parameter[0..*] parameters;
	attribute Visibility[0..1] visibility;
}
class MethodDeclaration extends MemberDeclaration {
	reference Statement[0..*] body;
}
abstract class NamedElement {
	attribute EString[1..1] name;
}
enum Visibility {
	private;
	public;
	protected;
}
class Parameter extends TypedElement {
	reference MemberDeclaration[0..1] owningDeclaration;
}
abstract class TypedElement extends NamedElement {
	reference ClassDeclaration[1..1] type;
}
class Statement {
}
",10996,yes,yes,yes
50402,All operations that contain EvaluatePairs,"pattern operationsWithEvaluatePairs(operation: operation, evaluatePair: EvaluatePair){
    Evaluate(operation);
    Evaluate.contain(operation, evaluatePair);
}",repo-ecore-all/data/ArthurHuo/metamodel-mcda/Demo1/metamodel/demo1.ecore,"class Task {
	reference operation[0..*] haveOperation;
	reference OptionType[1..1] defineType;
	reference option[0..*] haveOption;
	attribute EString[1..1] name;
	attribute EString[1..1] description;
}
abstract class operation {
}
class Filter extends operation {
	attribute EString[1..1] target;
	attribute EString[1..1] op;
	attribute EString[1..1] criteriaName;
	reference option[1..1] filter;
}
class Analyze extends operation {
	attribute EString[1..1] method;
}
class Evaluate extends operation {
	reference EvaluatePair[0..*] contain;
	attribute EString[1..1] criteriaName;
}
class File extends operation {
	attribute EString[1..1] URL;
	reference option[0..*] import;
}
class OptionType {
	reference ComparisonMatrix[1..1] compareWeight;
	attribute EString[1..1] name;
	reference Criteria[0..*] defineCriteria;
}
class option {
	attribute EString[1..1] name;
	attribute EString[0..*] attribute;
	reference OptionType[1..1] instanceof;
	attribute EString[0..1] description;
}
class ComparisonMatrix {
	reference ComparisonPair[0..*] makeupof;
}
class EvaluatePair {
	attribute EString[1..1] name;
	attribute EString[1..1] value;
}
class Criteria {
	attribute EString[1..1] name;
}
class ComparisonPair {
	attribute EString[1..1] Criteria1;
	attribute EString[1..1] Criteria2;
	attribute EString[1..1] value;
}
",10311,yes,ok,ok
56021,SysMailConfigs with multiple MailInfos,"pattern sysMailConfigWithMultipleMailInfos(sysMailConfig : SysMailConfig, mailInfo1 : MailInfo, mailInfo2 : MailInfo) {
    SysMailConfig.mailInfo(sysMailConfig, mailInfo1);
    SysMailConfig.mailInfo(sysMailConfig, mailInfo2);
    mailInfo1 != mailInfo2;
}",repo-ecore-all/data/FoxBPM/FoxBPM-Designer/org.foxbpm.model.config/model/foxbpmconfig.ecore,"class FoxBPMConfig {
	attribute EString[0..1] version;
	reference ResourcePathConfig[0..1] resourcePathConfig;
	reference SysMailConfig[0..1] sysMailConfig;
	reference ConnectionManagementConfig[0..1] connectionManagementConfig;
}
class SysMailConfig {
	reference MailInfo[0..*] mailInfo;
	attribute EString[1..1] selected;
}
class ConnectionManagementConfig {
	attribute EString[1..1] selected;
	reference ConnectionManagement[0..*] connectionManagement;
}
class ConnectionManagement {
	attribute EString[1..1] id;
	attribute EString[0..1] name;
	attribute EString[1..1] classImpl;
}
class ResourcePathConfig {
	reference ResourcePath[0..*] resourcePath;
}
class ResourcePath {
	attribute EString[1..1] id;
	attribute EString[0..1] name;
	attribute EString[0..1] src;
	attribute EString[0..1] physicalPath;
	attribute EString[0..1] virtualPath;
	attribute EString[0..1] projectName;
}
class MailInfo {
	attribute EString[1..1] mailAddress;
	attribute EString[1..1] mailName;
	attribute EString[1..1] smtpHost;
	attribute EString[1..1] smtpPort;
	attribute EString[1..1] userName;
	attribute EString[1..1] password;
}
",15930,ok,yes,ok
62841,Text entries with their labels,"pattern textEntryWithLabel(textEntry : TextEntry, label : EString) {
    TextEntry.label(textEntry, label);
}",repo-ecore-all/data/MDEGroup/QMM-COMLAN-data/validation-subjects/metamodels/widget.ecore,"abstract class Widget {
	attribute EString[0..1] name;
	reference Composite[0..1] parent;
	reference LayoutData[0..1] layoutData;
}
class TextEntry extends Widget {
	attribute EString[0..1] label;
}
class RadioButton extends Widget {
	attribute EInt[0..1] group;
	attribute EString[0..1] label;
}
class Composite extends Widget {
	reference Widget[0..*] children;
	reference Layout[0..1] layout;
}
class Spin extends Widget {
	attribute EString[0..1] label;
	attribute EInt[0..1] maximum;
	attribute EInt[0..1] minimum;
}
class CheckBox extends Widget {
	attribute EString[0..1] label;
	attribute EBoolean[0..1] initialState;
}
abstract class Layout {
}
abstract class LayoutData {
	reference Widget[1..1] widget;
}
class GridLayout extends Layout {
	attribute EInt[0..1] columns;
	attribute EBoolean[0..1] equalColumns;
	reference GridData[0..*] data;
}
class GridData extends LayoutData {
	attribute EInt[0..1] hSpan;
	attribute EInt[0..1] vSpan;
	attribute EBoolean[0..1] hGrab;
	attribute EBoolean[0..1] vGrab;
	attribute Alignment[0..1] hAlign;
	attribute Alignment[0..1] vAlign;
}
enum Alignment {
	LEFT;
	CENTER;
	RIGHT;
	FILL;
	TOP;
	BOTTOM;
}
class FormLayout extends Layout {
	reference FormData[0..*] data;
}
class FormData extends LayoutData {
	reference Attachment[0..1] left;
	reference Attachment[0..1] right;
	reference Attachment[0..1] top;
	reference Attachment[0..1] bottom;
}
class Attachment {
	reference Widget[0..1] control;
	attribute EInt[0..1] offset;
	attribute Alignment[0..1] align;
}
class Group extends Composite {
	attribute EString[0..1] label;
}
class Combo extends Widget {
	attribute EString[0..1] label;
}
class FillLayout extends Layout {
	attribute EBoolean[0..1] vertical;
}
",22750,yes,yes,yes
40821,Videos with their paths and corresponding transforms,"pattern videoWithTransform(video : Video, path : EString, transform : Transform) {
    Video.path(video, path);
    Transform.input(transform, video);
}",repo-ecore-all/data/faster-testing-lol/ffmpeg-transcoding-language/ftl/model/ftl.ecore,"class Program {
	reference Transform[0..*] transforms;
}
class Transform {
	reference Instruction[0..*] instruction;
	attribute EString[0..1] output;
	reference Input[1..*] input;
}
abstract class Instruction {
}
class Sepia extends Instruction {
}
class Blur extends Instruction {
	attribute EInt[0..1] radius;
}
class Fps extends Instruction {
	attribute EInt[0..1] value;
}
class Grayscale extends Instruction {
}
class Reverse extends Instruction {
}
class Scale extends Instruction {
	attribute EFloat[1..1] factor;
}
class Sharpen extends Instruction {
}
abstract class Input {
	attribute EString[1..10] path;
}
class Video extends Input {
}
class Audio extends Input {
}
class Negate extends Instruction {
}
class Echo extends Instruction {
	attribute EInt[0..1] delay;
}
class Mix extends Instruction {
}
class Start extends Instruction {
	attribute EFloat[0..1] time;
}
class End extends Instruction {
	attribute EFloat[0..1] time;
}
class Concat extends Instruction {
}
",730,yes,spec,spec
64024,Find all Jo Geniuses that have a Jklm reference and at least 2 Smarties.,"pattern joGeniusWithJklmAnd2OrMoreSmarties(jo: Jo) {
    Jo.jo_jklms(jo, jklm);
    cnt == count find smartiesInGenius(jo, _);
    check(cnt >= 2);
}

//Auxiliary pattern
pattern smartiesInGenius(genius: Genius, smarty: Smarty){
    Genius.smarties(genius, smarty);
}",repo-ecore-all/data/francoispfister/diagraph/org.isoe.fwk.megamodel.deploy/repository-bundle/visualinheritance.ecore,"abstract class Azerty extends Top {
	attribute EString[0..1] name;
	reference Goof[0..1] goof;
}
class Gloubi extends Azerty {
	reference Qwerty[0..*] qwerties;
}
class Zoo extends Azerty {
}
class Glorb extends Azerty {
}
class Qwerty extends Top {
}
abstract class Top {
	attribute EString[0..1] barbaz;
}
class Test {
	reference Azerty[0..*] azerties;
	reference Goof[0..*] goofs;
	reference Jklm[0..*] jklms;
	reference Zorglub[0..*] zorglubs;
	reference Amigo[0..*] amigos;
	reference Genius[0..*] geniuses;
}
class Goof {
	attribute EString[0..1] name;
}
class Jklm extends Top {
	reference Wxcv[0..*] wxcvs234;
}
class Wxcv extends Top {
}
class Zorglub {
	reference Boulga[0..*] boulgas456;
	attribute EString[0..1] name;
}
class Boulga extends Top {
}
class Hola extends Top {
}
class Amigo extends Top {
	reference Hola[0..*] holas;
	reference Tchao[0..*] tchaos;
}
class Tchao extends Top {
}
class Genius extends Top {
	attribute EString[0..1] value;
	reference Tchao[0..1] tchao;
	reference Smarty[0..*] smarties;
	reference Clever[0..*] cleverz;
}
class Jo extends Genius {
	reference Jklm[0..1] jo_jklms;
}
class Jack extends Genius {
}
class Jim extends Genius {
}
class Smarty extends Top {
}
class Clever extends Top {
}
",23933,yes,ok,ok
50591,Publications that have more than 3 authors,"pattern publicationWithMultipleAuthors(publication : Publication) {
    Publication.authors(publication, author1);
    Publication.authors(publication, author2);
    Publication.authors(publication, author3);
    Publication.authors(publication, author4);
    author1 != author2;
    author1 != author3;
    author1 != author4;
    author2 != author3;
    author2 != author4;
    author3 != author4;
}",ecore555/058_001_058_sistedesMM--963133257.ecore,"class Person {
	attribute EString[0..1] name;
	attribute EString[0..1] surname;
	attribute EString[0..1] email;
	reference University[1..*] university;
	reference Publication[0..*] publications;
	attribute EString[0..1] nationality;
}
class Edition {
	attribute EInt[0..1] year;
	attribute EString[0..1] location;
}
class University {
	attribute EString[0..1] name;
	attribute EString[0..1] city;
	attribute EString[0..1] provinceOrState;
	attribute EString[0..1] country;
}
abstract class Publication {
	reference Person[1..*] authors;
}
class Article extends Publication {
	attribute EString[0..1] title;
	attribute EInt[0..1] fromPage;
	attribute EInt[0..1] toPage;
	attribute EInt[0..*] number;
	attribute EString[0..1] volume;
	attribute EString[0..1] month;
	attribute EInt[0..1] year;
	reference Journal[0..1] journal;
}
class InProceedings extends Publication {
	attribute EString[0..1] title;
	attribute EString[0..1] bookTitle;
	attribute EInt[0..1] year;
	attribute EString[0..1] fromPage;
	attribute EString[0..1] toPage;
	attribute EString[0..1] month;
	reference Publisher[0..1] publisher;
	reference Editor[0..*] editors;
}
class Journal {
	attribute EString[0..1] name;
	reference Article[0..1] articles;
	attribute EBoolean[0..1] jcrIndexed;
	attribute EString[0..1] acronym;
}
class Book extends Publication {
	attribute EString[0..1] title;
	attribute EInt[0..1] year;
	attribute EString[0..1] month;
	attribute EString[0..1] volume;
	attribute EString[0..1] series;
	attribute EInt[0..1] edition;
	attribute EString[0..1] isbn;
	reference Publisher[0..1] publisher;
}
class Publisher {
	attribute EString[0..1] name;
	attribute EString[0..1] address;
}
class Editor {
	attribute EString[0..1] name;
}
class SistedesMember extends Person {
	reference Edition[0..*] attendedTo;
}
",10500,ok,ok,ok
47097,SearchBoxes that do not have a width defined,"pattern searchBoxWithoutWidth(searchBox : SearchBox) {
    SearchBox(searchBox);
    neg find hasWidth(searchBox);
}

//auxiliary pattern
pattern hasWidth(widget : Widget) {
    Widget.width(widget, _);
}",repo-ecore-all/data/pitch-sands/Website/de.tu_bs.cs.isf.mbse.website/model/Website.ecore,"class Website {
	attribute EString[0..1] name;
	reference Widget[0..*] widgets;
}
class Widget {
	attribute EString[0..1] name;
	attribute EInt[0..1] row;
	attribute EDouble[0..1] width;
	attribute EDouble[0..1] height;
	attribute EInt[0..1] column;
	reference Square[1..1] square;
}
class TextBox extends Widget {
	attribute EString[0..1] content;
}
class ImageBox extends Widget {
	attribute EString[0..1] source;
}
class ButtonBox extends Widget {
	attribute EString[0..1] content;
	attribute EString[0..1] link;
}
class SearchBox extends Widget {
}
class MenuitemBox extends Widget {
	attribute EString[0..1] content;
	attribute EString[0..1] link;
}
class Board {
	reference Square[64..64] squares;
	reference Widget[0..64] widgets;
}
class Square {
	attribute EInt[0..1] index;
	attribute Files[0..1] file;
	attribute Ranks[0..1] rank;
	attribute Color[0..1] color;
	reference Widget[0..1] widget;
}
enum Files {
	none;
	A;
	B;
	C;
	D;
	E;
	F;
	G;
	H;
}
enum Ranks {
	none;
	A;
	B;
	C;
	D;
	E;
	F;
	G;
	H;
}
enum Color {
	white;
	blue;
	none;
}
",7006,yes,ok,ok
59121,Find all KMethods that have abstract attribute set to true or have parameters,"pattern abstractMethodOrWithParameters(method: KMethod){
    KMethod.abstract(method, true);
} or {
    KMethod.parameters(method, _);
}",repo-ecore-all/data/kieler/klassviz/plugins/de.cau.cs.kieler.klassviz.model/model/classdata.ecore,"class KClassModel {
	attribute EString[0..*] javaProjects;
	attribute EString[0..*] bundles;
	reference KPackage[0..*] packages;
	attribute EBoolean[0..1] resolved;
	reference KOption[0..*] options;
}
class KOption {
	attribute EString[1..1] key;
	attribute EString[1..1] value;
}
class KPackage {
	attribute EString[1..1] name;
	reference KType[0..*] types;
}
abstract class KType {
	attribute EBoolean[0..1] selected;
	attribute EString[1..1] name;
	reference KField[0..*] fields;
	reference KMethod[0..*] methods;
	reference KType[0..*] nestedTypes;
	reference KDependency[0..*] dependencies;
	attribute EBoolean[1..1] static;
	attribute KVisibility[1..1] visibility;
}
class KClass extends KType {
	reference KClass[0..1] superClass;
	reference KInterface[0..*] interfaces;
	attribute EString[0..*] typeParameters;
	attribute EBoolean[1..1] final;
	attribute EBoolean[1..1] abstract;
}
class KInterface extends KType {
	reference KInterface[0..*] superInterfaces;
	attribute EString[0..*] typeParameters;
}
class KEnum extends KType {
	attribute EString[0..*] constants;
}
class KDependency {
	reference KType[1..1] target;
	attribute EString[0..1] label;
}
abstract class KMember {
	attribute EBoolean[0..1] selected;
	attribute EString[1..1] name;
	attribute EBoolean[1..1] static;
	attribute EBoolean[1..1] final;
	attribute KVisibility[1..1] visibility;
}
class KField extends KMember {
	reference KTypeReference[0..1] type;
}
class KMethod extends KMember {
	reference KTypeReference[0..*] parameters;
	reference KTypeReference[0..1] returnType;
	attribute EBoolean[1..1] abstract;
}
class KTypeReference {
	attribute EString[0..1] name;
	attribute EString[0..1] signature;
	reference KType[0..1] referenceType;
}
enum KVisibility {
	PUBLIC;
	PROTECTED;
	PACKAGE;
	PRIVATE;
}
",19030,yes,yes,yes
54580,Receivers with their blocking attribute set,"pattern receiverWithBlockingAttribute(receiver : Receiver) {
    Receiver.blockierend(receiver, true);
}",repo-ecore-all/data/Litschi/YASA/Modell/EMF/ShootingMachine/model/ShootingMachineEMFModel.ecore,"class ToplevelSystem extends Standardclass {
	reference Component[1..*] hasComponent;
	reference Brick[1..*] hasBrick;
	reference Connections[0..*] hasConnections;
}
abstract class Component extends Standardclass {
	reference Runnable[1..*] hasRunnable;
}
class Brick extends Standardclass {
	reference Task[1..*] hasTaskBrick;
	reference Event[0..*] hasEventBrick;
	reference Alarm[0..*] hasAlarmBrick;
	reference HWPorts[0..7] hasHWPortsBrick;
	attribute EBoolean[1..1] IsMaster;
}
class SA_Component extends Component {
}
class SW_Component extends Component {
}
abstract class Ports extends Standardclass {
}
abstract class SenderPorts extends Ports {
}
abstract class ReceiverPorts extends Ports {
	attribute EBoolean[0..1] blockierend;
}
class Sender extends SenderPorts {
}
class Client extends SenderPorts {
}
class SendEvent extends SenderPorts {
}
class Receiver extends ReceiverPorts {
}
class Server extends ReceiverPorts {
}
class GetEvent extends ReceiverPorts {
}
abstract class Standardclass {
	attribute EString[0..1] name;
}
class Task extends Standardclass {
	reference Event[0..*] hasEvent;
	reference Alarm[0..*] hasAlarm;
	reference Runnable[1..*] hasRunnable;
	attribute EBoolean[0..1] AUTOSTART;
	attribute EInt[0..1] PRIORITY;
	attribute EInt[0..1] ACTIVATION;
}
class Event extends Standardclass {
}
class Alarm extends Standardclass {
	attribute EInt[0..1] MINCYCLE;
	attribute EInt[0..1] MAXALLOWEDVALUE;
	attribute EInt[0..1] TICKSPERBASE;
	attribute EBoolean[0..1] AUTOSTART;
	attribute EInt[0..1] ALARMTIME;
	attribute EInt[0..1] CYCLETIME;
}
class Connections extends Standardclass {
	reference ReceiverPorts[1..*] hasReceiverPorts;
	reference SenderPorts[1..1] hasSenderPorts;
	reference InterBrickCommunication[0..1] hasInterBrickCommunicationSystem;
	reference Message[1..1] hasMessage;
}
class Runnable extends Standardclass {
	attribute EString[0..1] applicationcode;
	reference Ports[0..*] hasSWPorts;
}
class InterBrickCommunication extends Standardclass {
	attribute EInt[0..1] messageID;
	reference Brick[0..*] hasIBCOut;
	reference Brick[0..*] hasIBCIn;
	reference ReceiverPorts[1..*] hasReceiverPort;
	reference Message[1..1] hasMessage;
}
abstract class HWPorts extends Standardclass {
	attribute HWPort[0..1] Portname;
}
abstract class HWInput extends HWPorts {
	reference OSPortIN[0..1] Has_OSPORTS_IN;
}
abstract class HWOutput extends HWPorts {
	reference OSPortOUT[0..1] Has_OSPORTS_OUT;
}
class HWIntern extends HWInput {
	attribute HWType[0..1] Type;
}
class HWExtern extends HWInput {
	attribute EInt[0..1] Pinnumber;
}
class Motor extends HWOutput {
}
class Display extends HWOutput {
}
class Message extends Standardclass {
	attribute EChar[0..1] MessageHeader;
	attribute EString[0..1] myMessage;
}
enum HWType {
	BUTTON;
	SONIC;
}
enum HWPort {
	NXT_PORT_S1;
	NXT_PORT_S2;
	NXT_PORT_S3;
	NXT_PORT_S4;
	NXT_PORT_A;
	NXT_PORT_B;
	NXT_PORT_C;
	Display;
}
class OSPortIN extends ReceiverPorts {
}
class OSPortOUT extends SenderPorts {
}
",14489,spec,no,spec
55064,"Attributes that are required and have a name starting with ""req""","pattern requiredAttributeWithName(attribute : Attribute) {
    Attribute.required(attribute, ""true"");
    Attribute.name(attribute, name);
    check(name.startsWith(""req""));
}",repo-ecore-all/data/bdave94/winformcodegen/org.xtext.entityDsl/model/generated/EntityDsl.ecore,"class Domainmodel {
	attribute EString[0..1] applicationName;
	reference Entity[0..*] elements;
}
class Entity {
	attribute EString[0..1] name;
	reference Attribute[0..*] attributes;
}
class Attribute {
	attribute EString[0..1] required;
	attribute EString[0..1] name;
	reference WinFormControlType[0..1] inputType;
	reference Label[0..1] labelText;
}
class DataType {
	attribute EString[0..1] type;
}
class Label {
	attribute EString[0..1] text;
}
class WinFormControlType {
	reference TextBox[0..1] controlType;
	attribute EString[0..1] name;
}
class TrackBar extends WinFormControlType {
	reference DataType[0..1] dataType;
	attribute EInt[0..1] defaultTick;
	attribute EInt[0..1] increment;
	attribute EInt[0..1] denominator;
	attribute EInt[0..1] minimumValue;
	attribute EInt[0..1] maximumValue;
	attribute EString[0..*] stringValues;
}
class Spinner extends WinFormControlType {
	attribute EInt[0..1] defaultValue;
	attribute EInt[0..1] minimumValue;
	attribute EInt[0..1] maximumValue;
}
class RadioButtonGroup extends WinFormControlType {
	reference RadioButton[0..*] buttons;
	reference DataType[0..1] dataType;
}
class RadioButton {
	attribute EString[0..1] text;
}
class CheckBox extends WinFormControlType {
}
class TextBox {
	attribute EString[0..1] name;
	reference DataType[0..1] dataType;
	attribute EInt[0..1] minTextLength;
	attribute EInt[0..1] maxTextLength;
}
class ComboBox extends WinFormControlType {
	reference ComboBoxItem[0..*] items;
	reference DataType[0..1] dataType;
}
class ComboBoxItem {
	attribute EString[0..1] text;
}
",14973,yes,yes,yes
