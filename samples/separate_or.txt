Given this metamodel 

abstract class Pseudostate extends Vertex {
}
abstract class Vertex {
	reference Transition[0..*] incomingTransitions;
	reference Transition[0..*] outgoingTransitions;
}
class Region {
	reference Vertex[0..*] vertices;
	attribute EString[0..1] name;
}
class Transition {
	reference Vertex[1..1] target;
	reference Vertex[0..1] source;
}
class Statechart extends CompositeElement {
}
class Entry extends Pseudostate {
}
class Synchronization extends Pseudostate {
}
class State extends RegularState, CompositeElement {
}
abstract class RegularState extends Vertex {
}
abstract class CompositeElement {
	reference Region[0..*] regions;
}
class Choice extends Pseudostate {
}
class Exit extends Pseudostate {
}
class FinalState extends RegularState {
}

and the following Viatra Query examples

Example 1:
Description: "Veterx that are either entry or final state"
Query:
pattern entryOrSynchronizedState(s : Vertex ) {
	Entry(s);
} or {
	FinalState(s);
}

Example 2:
Description: Vertex that has incoming or outgoing transition.
pattern incomingOrOutgoing(vertex: Vertex){
	Vertex.incomingTransitions(vertex,_);
} or {
	Vertex.outgoingTransitions(vertex,_);
}

Example 3:
Description: State that are either entry state or has incoming transition.
pattern entryorIncoming(vertex: Vertex){
	Entry(vertex);
} or {
	Vertex.incomingTransitions(vertex,_);
}

Example 4:
Description: Transitions with the same source or same target.
Query:
pattern sameSourceOrTarget(transition1: Transition, transition2: Transition){
	Transition.source(transition1,source);
	Transition.source(transition2,source);
} or {
	Transition.target(transition1,target);
	Transition.target(transition2,target);
}

Generate 15 Viatra Queries of increasing complexity and their descriptions that contain or statement based on the following metamodel

class Database extends ModelElement {
	attribute EString[0..1] name;
	attribute EString[0..1] url;
	reference Schema[0..*] ownedSchemas;
}
class Schema extends ModelElement {
	attribute EString[0..1] name;
	reference Table[0..*] ownedTables;
	reference Database[1..1] owner;
}
class Table extends ModelElement {
	attribute EString[0..1] name;
	reference Column[0..*] ownedColumns;
	reference ForeignKey[0..*] ownedForeignKeys;
	reference Schema[1..1] owner;
}
class ForeignKey extends ModelElement {
	attribute EString[0..1] name;
	reference Table[1..1] foreignTable;
	reference Table[1..1] sourceTable;
}
class Column extends ModelElement {
	attribute EString[0..1] name;
	attribute Type[0..1] type;
	attribute EBoolean[0..1] isPrimaryKey;
	attribute EBoolean[0..1] isUnique;
	reference Table[1..1] owner;
}
enum Type {
	NUMERIC;
	VARCHAR;
	DATE;
	TIME;
	FLOAT;
	CHAR;
}
abstract class ModelElement {
	attribute EString[0..1] comment;
}

Ensure that or statement can only be used between query bodies ( "} or {").
Only use or expressions.
